#pragma once

/**
 * Name: Satisfactory
 * Version: Early_Access_CL#273254
 */

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
	// --------------------------------------------------
	// # Classes
	// --------------------------------------------------
	/**
	 * Class FactoryGame.FGAbstractServerWidget
	 * Size -> 0x0010 (FullSize[0x0290] - InheritedSize[0x0280])
	 */
	class UFGAbstractServerWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_397O[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGServerObject*                                     mServer;                                                 // 0x0288(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetServer(class UFGServerObject* Server);
		void BP_OnServerChanged(class UFGServerObject* Server);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAction
	 * Size -> 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
	 */
	class UFGAction : public UObject
	{
	public:
		unsigned char                                              UnknownData_LSDK[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnActionFinished;                                        // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		TArray<class UFGActionScorer*>                             mActionScorers;                                          // 0x0040(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGActionTest*>                               mActionInterrupts;                                       // 0x0050(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class FString                                              mActionDescription;                                      // 0x0060(0x0010) Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mActionDuration;                                         // 0x0070(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mActionDurationFinishResult;                             // 0x0078(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FYXX[0x3];                                   // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFloatInterval                                      mActionStartDelay;                                       // 0x007C(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mActionCooldown;                                         // 0x0084(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mActionCooldownMax;                                      // 0x0088(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mActionRecoveryTime;                                     // 0x008C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mActionRecoveryTimeMax;                                  // 0x0090(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mActionLastExecuteTime;                                  // 0x0094(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mActionLastFinishTime;                                   // 0x0098(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsActionTickable;                                       // 0x009C(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsActionTickableWhenPaused;                             // 0x009D(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsActionTickableInEditor;                               // 0x009E(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HQ1B[0x1];                                   // 0x009F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGAction*                                           mPreAction;                                              // 0x00A0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGAction*                                           mPostAction;                                             // 0x00A8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class APawn>                                mPawn;                                                   // 0x00B0(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AController>                          mController;                                             // 0x00B8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EFGActionState                                             mActionState;                                            // 0x00C0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZDM9[0x7];                                   // 0x00C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        mActionTimeoutTimerHandle;                               // 0x00C8(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        mActionRecoveryTimerHandle;                              // 0x00D0(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        mActionStartDelayHandle;                                 // 0x00D8(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGAction*                                           mParentAction;                                           // 0x00E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YLT0[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (PADDING)

	public:
		bool SetupAction();
		void SetActionState(EFGActionState NewState);
		void SetActionLastFinishTime(float finishTime);
		void SetActionLastExecuteTime(float executeTime);
		bool ScoreAction(float* Score);
		void PerformAction();
		void OnPreActionFinished(bool Success);
		void Multicast_RepActionState(EFGActionState NewState);
		bool IsInCooldown();
		bool IsActionExecuting();
		bool InitializeAction(class AController* Controller, class APawn* Pawn);
		bool HasBeenInitialized();
		bool HasAuthority();
		float GetRemainingCooldown();
		class UFGAction* GetPreAction();
		class UFGAction* GetPostAction();
		class APawn* GetPawn();
		class UFGAction* GetParentAction();
		class AController* GetController();
		EFGActionState GetActionState();
		float GetActionLastFinishTime();
		float GetActionLastExecuteTime();
		class FString GetActionDescription();
		float GetActionCooldownMax();
		float GetActionCooldown();
		void FinishAction(bool actionSuccess);
		bool ExecuteAction();
		void CleanupAction(bool actionSuccess);
		bool CanPerformAction();
		void CancelAction();
		void ActionTick(float DeltaTime);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGActionTest
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGActionTest : public UObject
	{
	public:
		bool                                                       mInvertCondition;                                        // 0x0028(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FS3D[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APawn*                                               mPawn;                                                   // 0x0030(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AController*                                         mController;                                             // 0x0038(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGAction*                                           mOwnerAction;                                            // 0x0040(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void Initialize_Blueprint(class APawn* Pawn, class AController* Controller, class UFGAction* ownerAction);
		void Initialize(class APawn* Pawn, class AController* Controller, class UFGAction* ownerAction);
		class APawn* GetPawn();
		class AController* GetController();
		class UFGAction* GetAction();
		bool ExecuteTest();
		bool ExecuteCheck();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGActionScorer
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGActionScorer : public UObject
	{
	public:
		class UFGAction*                                           mAction;                                                 // 0x0028(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void InitializeScorer();
		bool GetScore(float* out_score);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGActionScorerCompound
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UFGActionScorerCompound : public UFGActionScorer
	{
	public:
		TArray<class UFGActionScorer*>                             mActionScorers;                                          // 0x0030(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGActorRepresentation
	 * Size -> 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
	 */
	class UFGActorRepresentation : public UObject
	{
	public:
		unsigned char                                              UnknownData_XUWB[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              mRealActor;                                              // 0x0030(0x0008) Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRepresentationVector2D                             mActorLocation;                                          // 0x0038(0x0008) Net, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UOKX[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            mActorRotation;                                          // 0x0058(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       mIsStatic;                                               // 0x0070(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_090Z[0x7];                                   // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          mRepresentationTexture;                                  // 0x0078(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                mRepresentationText;                                     // 0x0080(0x0018) Net, RepNotify, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        mRepresentationColor;                                    // 0x0098(0x0010) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ERepresentationType                                        mRepresentationType;                                     // 0x00A8(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EFogOfWarRevealType                                        mFogOfWarRevealType;                                     // 0x00A9(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OVFK[0x2];                                   // 0x00AA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mFogOfWarRevealRadius;                                   // 0x00AC(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mShouldShowInCompass;                                    // 0x00B0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mShouldShowOnMap;                                        // 0x00B1(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsHidden;                                               // 0x00B2(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECompassViewDistance                                       mCompassViewDistance;                                    // 0x00B3(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FXB1[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_ShouldShowOnMap();
		void OnRep_ShouldShowInCompass();
		void OnRep_ActorRepresentationUpdated();
		bool IsHidden();
		bool IsActorStatic();
		bool GetShouldShowOnMap();
		bool GetShouldShowInCompass();
		bool GetScaleWithMap();
		float GetScaleOnMap();
		ERepresentationType GetRepresentationType();
		class UTexture2D* GetRepresentationTexture();
		class FText GetRepresentationText();
		struct FLinearColor GetRepresentationColor();
		class AActor* GetRealActor();
		EFogOfWarRevealType GetFogOfWarRevealType();
		float GetFogOfWarRevealRadius();
		ECompassViewDistance GetCompassViewDistance();
		struct FRotator GetActorRotation();
		struct FVector GetActorLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGActorRepresentationInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGActorRepresentationInterface : public UInterface
	{
	public:
		bool UpdateRepresentation();
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		bool IsActorStatic();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRemoteCallObject
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGRemoteCallObject : public UObject
	{
	public:
		void Server_ConstructHologram(const struct FNetConstructionID& NetConstructionID, const struct FConstructHologramMessage& Message);
		class AFGGameState* GetGameState();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGActorRepresentationRemoteCallObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGActorRepresentationRemoteCallObject : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGActorRepresentationRemoteCallObject;   // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FMV3[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSubsystem
	 * Size -> 0x0000 (FullSize[0x02F8] - InheritedSize[0x02F8])
	 */
	class AFGSubsystem : public AInfo
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGActorRepresentationManager
	 * Size -> 0x0098 (FullSize[0x0390] - InheritedSize[0x02F8])
	 */
	class AFGActorRepresentationManager : public AFGSubsystem
	{
	public:
		class FScriptMulticastDelegate                             mOnActorRepresentationAdded;                             // 0x02F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnActorRepresentationRemoved;                           // 0x0308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnActorRepresentationUpdated;                           // 0x0318(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnActorRepresentationUpdatedCompassShow;                // 0x0328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnActorRepresentationUpdatedMapShow;                    // 0x0338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnActorRepresentationTypeFilteredOnMap;                 // 0x0348(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnActorRepresentationTypeFilteredOnCompass;             // 0x0358(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UFGActorRepresentation*>                      mAllRepresentations;                                     // 0x0368(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class UFGActorRepresentation*>                      mReplicatedRepresentations;                              // 0x0378(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TTW7[0x8];                                   // 0x0388(0x0008) MISSED OFFSET (PADDING)

	public:
		bool UpdateRepresentationOfActor(class AActor* realActor);
		void SetMapRepresentationTypeFilter(class APawn* owningPlayerPawn, ERepresentationType Type, bool Visible);
		void SetCompassViewDistanceForActorRepresentation(class UFGActorRepresentation* actorRepresentation, ECompassViewDistance viewDistance);
		void SetCompassRepresentationTypeFilter(class APawn* owningPlayerPawn, ERepresentationType Type, bool Visible);
		bool RemoveRepresentationOfActor(class AActor* realActor);
		void OnRep_ReplicatedRepresentations(TArray<class UFGActorRepresentation*> previousReplicatedRepresentations);
		bool GetMapRepresentationTypeFilter(class APawn* owningPlayerPawn, ERepresentationType Type);
		float GetDistanceValueFromCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool GetCompassRepresentationTypeFilter(class APawn* owningPlayerPawn, ERepresentationType Type);
		void GetAllActorRepresentations(TArray<class UFGActorRepresentation*>* out_AllRepresentations);
		class AFGActorRepresentationManager* STATIC_Get(class UObject* WorldContext);
		class UFGActorRepresentation* CreateAndAddNewRepresentationNoActor(const struct FVector& Location, class UTexture2D* compassTexture, const struct FLinearColor& compassColor, float LifeSpan, bool shouldShowInCompass, bool shouldShowOnMap, ERepresentationType representationType, class UClass* representationClass);
		class UFGActorRepresentation* CreateAndAddNewRepresentation(class AActor* realActor, bool isLocal, class UClass* representationClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAvailabilityDependency
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGAvailabilityDependency : public UObject
	{
	public:
		bool AreDependenciesMet(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGActorsBuiltDependency
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UFGActorsBuiltDependency : public UFGAvailabilityDependency
	{
	public:
		TMap<class UClass*, int32_t>                               mActorsBuiltCount;                                       // 0x0028(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		EActorBuiltDependencyType                                  mType;                                                   // 0x0078(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YX6Y[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAdminInterface
	 * Size -> 0x00F8 (FullSize[0x03F0] - InheritedSize[0x02F8])
	 */
	class AFGAdminInterface : public AInfo
	{
	public:
		unsigned char                                              UnknownData_1J4H[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_889H[0xF0];                                  // 0x0300(0x00F0) MISSED OFFSET (PADDING)

	public:
		void SetSessionVisibility(ESessionVisibility Visibility);
		void Server_SaveGame(int16_t RequestID, const class FString& SaveGame);
		void Server_LoadGame(const struct FSaveHeader& Header);
		void Server_EnumerateSaveGames(int16_t RequestID);
		void Server_DeleteSaveFiles(TArray<class FString> saveNames, int16_t RequestID);
		void SaveGame(bool locally, const class FString& saveName, const class FScriptDelegate& completeDelegate);
		void LoadGameByName(const class FString& saveGameName);
		void LoadGame(bool locally, const struct FSaveHeader& save);
		void KickPlayer(class APlayerState* PlayerState);
		void EnumerateSaveGames(bool localSaves, const class FScriptDelegate& completeDelegate);
		void DeleteSaveSession(bool localSaves, const struct FSessionSaveStruct& Session, const class FScriptDelegate& completeDelegate);
		void DeleteSaveFiles(bool localSaves, TArray<class FString> saveNames, const class FScriptDelegate& completeDelegate);
		void DeleteSaveFile(bool localSaves, const class FString& saveName, const class FScriptDelegate& completeDelegate);
		void Client_OnSaveGameCompleted(bool Success, int16_t RequestID, const class FText& ErrorMessage);
		void Client_OnEnumerateSaveGamesCompleted(bool Success, int16_t RequestID, TArray<struct FSaveHeader> saves);
		void Client_DeleteSaveFilesCompleted(bool Success, int16_t RequestID);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAdvancedGameSettings
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UFGAdvancedGameSettings : public UWorldSubsystem
	{
	public:
		unsigned char                                              UnknownData_RI78[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class UFGUserSettingApplyType*>        mUserSettings;                                           // 0x0038(0x0050) Transient, NativeAccessSpecifierPrivate

	public:
		bool HasChangesThatShouldEnableCreativeMode();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAIPerceptionComponent
	 * Size -> 0x0008 (FullSize[0x0198] - InheritedSize[0x0190])
	 */
	class UFGAIPerceptionComponent : public UAIPerceptionComponent
	{
	public:
		class AFGCreatureController*                               mCreatureController;                                     // 0x0190(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAISystem
	 * Size -> 0x0000 (FullSize[0x0170] - InheritedSize[0x0170])
	 */
	class UFGAISystem : public UAISystem
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAmbientSettings
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UFGAmbientSettings : public UObject
	{
	public:
		class UAkAudioEvent*                                       mOnEnterOuterVolumeEvent;                                // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mOnExitOuterVolumeEvent;                                 // 0x0030(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mOnEnterInnerVolumeEvent;                                // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mOnExitInnerVolumeEvent;                                 // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIgnoreListenerRotation : 1;                             // 0x0048(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9ZAD[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		bool ShouldIgnoreListenerRotation();
		void OnExitOuterVolume(class UAkComponent* ambientComponent);
		void OnExitInnerVolume(class UAkComponent* ambientComponent);
		void OnEnterOuterVolume(class UAkComponent* ambientComponent);
		void OnEnterInnerVolume(class UAkComponent* ambientComponent);
		class UAkAudioEvent* GetEnterOuterVolumeEvent();
		class UAkAudioEvent* GetEnterInnerVolumeEvent();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAmbientSoundSpline
	 * Size -> 0x0028 (FullSize[0x0320] - InheritedSize[0x02F8])
	 */
	class AFGAmbientSoundSpline : public AActor
	{
	public:
		unsigned char                                              UnknownData_2K55[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class USplineComponent*                                    mSpline;                                                 // 0x0300(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGSoundSplineComponent*                             mSoundSpline;                                            // 0x0308(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSignificanceRange;                                      // 0x0310(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AN3F[0xC];                                   // 0x0314(0x000C) MISSED OFFSET (PADDING)

	public:
		class USplineComponent* GetSplineComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAmbientVolume
	 * Size -> 0x0060 (FullSize[0x0390] - InheritedSize[0x0330])
	 */
	class AFGAmbientVolume : public AVolume
	{
	public:
		unsigned char                                              UnknownData_326T[0x8];                                   // 0x0330(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mAmbientSettings;                                        // 0x0338(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent*                                        mAudioComponent;                                         // 0x0340(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mAdditionalAttenuationDistance;                          // 0x0348(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y73V[0x40];                                  // 0x034C(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSignificanceRange;                                      // 0x038C(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGItemDescriptor
	 * Size -> 0x0178 (FullSize[0x01A0] - InheritedSize[0x0028])
	 */
	class UFGItemDescriptor : public UObject
	{
	public:
		bool                                                       mUseDisplayNameAndDescription;                           // 0x0028(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AHFK[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                mDisplayName;                                            // 0x0030(0x0018) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FText                                                mDescription;                                            // 0x0048(0x0018) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FText                                                mAbbreviatedDisplayName;                                 // 0x0060(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		EStackSize                                                 mStackSize;                                              // 0x0078(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanBeDiscarded;                                         // 0x0079(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mRememberPickUp;                                         // 0x007A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GIO7[0x1];                                   // 0x007B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mEnergyValue;                                            // 0x007C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRadioactiveDecay;                                       // 0x0080(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EResourceForm                                              mForm;                                                   // 0x0084(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LRKS[0x3];                                   // 0x0085(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          mSmallIcon;                                              // 0x0088(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mPersistentBigIcon;                                      // 0x0090(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              mCrosshairMaterial[0x30];                                // 0x0098(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		TArray<struct FDescriptorStatBar>                          mDescriptorStatBars;                                     // 0x00C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mInventorySettingsWidget;                                // 0x00D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mConveyorMesh;                                           // 0x00E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mCategory;                                               // 0x00E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mSubCategories;                                          // 0x00F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UClass*                                              mQuickSwitchGroup;                                       // 0x0100(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMenuPriority;                                           // 0x0108(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              mFluidColor;                                             // 0x010C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FColor                                              mGasColor;                                               // 0x0110(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_17Z3[0x4];                                   // 0x0114(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCompatibleItemDescriptors>                  mCompatibleItemDescriptors;                              // 0x0118(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              mClassToScanFor[0x30];                                   // 0x0128(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		class UClass*                                              mCustomScannableDetails;                                 // 0x0158(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EScannableActorType                                        mScannableType;                                          // 0x0160(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7PDD[0x7];                                   // 0x0161(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mRequiredSchematicToScan;                                // 0x0168(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mShouldOverrideScannerDisplayText;                       // 0x0170(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZNJ8[0x7];                                   // 0x0171(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                mScannerDisplayText;                                     // 0x0178(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FColor                                              mScannerLightColor;                                      // 0x0190(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mResourceSinkPoints;                                     // 0x0194(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mCachedStackSize;                                        // 0x0198(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mItemIndex;                                              // 0x019C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		bool STATIC_RememberPickUp(class UClass* InClass);
		TArray<class UClass*> STATIC_GetSubCategoriesOfClass(class UClass* InClass, class UClass* outputCategoryClass);
		void GetSubCategoriesFromInstance(TArray<class UClass*>* out_subCategories);
		void STATIC_GetSubCategories(class UClass* InClass, TArray<class UClass*>* out_subCategories);
		float STATIC_GetStackSizeConverted(class UClass* InClass);
		int32_t STATIC_GetStackSize(class UClass* InClass);
		class UTexture2D* GetSmallIconFromInstance();
		class UTexture2D* STATIC_GetSmallIcon(class UClass* InClass);
		struct FColor STATIC_GetScannerLightColor(class UClass* InClass);
		class FText STATIC_GetScannerDisplayText(class UClass* InClass);
		float STATIC_GetRadioactiveDecay(class UClass* InClass);
		class UClass* STATIC_GetQuickSwitchGroup(class UClass* InClass);
		float STATIC_GetMenuPriority(class UClass* InClass);
		class FString GetItemNameFromInstanceAsString();
		class FText GetItemNameFromInstance();
		class FText STATIC_GetItemName(class UClass* InClass);
		class UStaticMesh* STATIC_GetItemMesh(class UClass* InClass);
		class FText GetItemDescriptionFromInstance();
		class FText STATIC_GetItemDescription(class UClass* InClass);
		void STATIC_GetInventorySettingsWidget(class UClass* InClass, class UClass** out_InventorySettingsWidget);
		struct FLinearColor STATIC_GetGasColorLinear(class UClass* InClass);
		struct FColor STATIC_GetGasColor(class UClass* InClass);
		EResourceForm STATIC_GetForm(class UClass* InClass);
		struct FLinearColor STATIC_GetFluidColorLinear(class UClass* InClass);
		struct FColor STATIC_GetFluidColor(class UClass* InClass);
		float STATIC_GetEnergyValue(class UClass* InClass);
		void STATIC_GetDescriptorStatBars(class UClass* InClass, TArray<struct FDescriptorStatBar>* out_DescriptorStatBars);
		class UMaterialInterface* STATIC_GetCrosshairMaterial(class UClass* InClass);
		TArray<struct FCompatibleItemDescriptors> STATIC_GetCompatibleItemDescriptors(class UClass* InClass);
		class UClass* GetCategoryFromInstance();
		class UClass* STATIC_GetCategory(class UClass* InClass);
		class UTexture2D* GetBigIconFromInstance();
		class UTexture2D* STATIC_GetBigIcon(class UClass* InClass);
		class FText STATIC_GetAbbreviatedDisplayName(class UClass* InClass);
		bool STATIC_CanBeDiscarded(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAmmoType
	 * Size -> 0x0240 (FullSize[0x03E0] - InheritedSize[0x01A0])
	 */
	class UFGAmmoType : public UFGItemDescriptor
	{
	public:
		unsigned char                                              UnknownData_0I4C[0x8];                                   // 0x01A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             AmmoFiredDelegate;                                       // 0x01A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AFGWeapon*                                           mWeapon;                                                 // 0x01B8(0x0008) Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class APawn*                                               mInstigator;                                             // 0x01C0(0x0008) Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6X06[0x8];                                   // 0x01C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          mFiringTransform;                                        // 0x01D0(0x0060) Net, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mFiringDirection;                                        // 0x0230(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mMagazineSize;                                           // 0x0248(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxAmmoEffectiveRange;                                  // 0x024C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mReloadTimeMultiplier;                                   // 0x0250(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFireRate;                                               // 0x0254(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mFiringTransformIgnoresDispersion;                       // 0x0258(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KEWT[0x3];                                   // 0x0259(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDispersionFireRateMultiplier;                           // 0x025C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDispersionPerShot;                                      // 0x0260(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRestingDispersion;                                      // 0x0264(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFiringDispersion;                                       // 0x0268(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDispersionRecoveryTime;                                 // 0x026C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasBeenInitialized;                                     // 0x0270(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6XRX[0x7];                                   // 0x0271(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              mAmmoTarget;                                             // 0x0278(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mWeaponDamageMultiplier;                                 // 0x0280(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_K2YC[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMesh*                                       mMagazineMesh;                                           // 0x0288(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mMagazineMeshAnimClass;                                  // 0x0290(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FSkeletalMaterial>                           mMagazineMeshMaterials;                                  // 0x0298(0x0010) Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<class UMaterialInstance*>                           mMagazineMeshMaterials1p;                                // 0x02A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<class UFGDamageType*>                               mDamageTypesOnImpact;                                    // 0x02B8(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class UClass*                                              mFiringNoise;                                            // 0x02C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRuntimeFloatCurve                                  mAmmoDamageFalloff;                                      // 0x02D0(0x0088) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     mMuzzleFlashVFX;                                         // 0x0358(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mMuzzleFlashScale;                                       // 0x0360(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UAkAudioEvent*>                               mFiringSounds;                                           // 0x0378(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<class UAkAudioEvent*>                               mFiringSounds1P;                                         // 0x0388(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		struct FLinearColor                                        mAmmoColor;                                              // 0x0398(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mAmmoScale;                                              // 0x03A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WPK3[0x4];                                   // 0x03AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAmmoTickFunction                                   mAmmoTickFunction;                                       // 0x03B0(0x0030) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		void SetFiringTransform(const struct FTransform& firingTransform);
		void SetFiringDirection(const struct FVector& firingDirection);
		void SetAmmoTarget(class AActor* Target);
		void SetAmmoScale(float UniformScale);
		void SetAmmoInstigator(class APawn* Pawn);
		void SetAmmoColor(const struct FLinearColor& Color);
		void OnWeaponStateChanged(EWeaponState oldState, EWeaponState NewState);
		void OnEndFire();
		void OnBeginFire();
		void OnAmmoTypeEjected();
		void InitializeAmmoType(class AFGWeapon* Weapon, bool Force);
		bool HasBeenInitialized();
		bool HasAuthority();
		float GetWeaponDamageMultiplier();
		class AFGWeapon* GetWeapon();
		float GetRestingDispersion();
		float GetReloadTimeMultiplier();
		class UParticleSystem* GetMuzzleFlashVFX();
		struct FVector GetMuzzleFlashScale();
		float GetMaxAmmoEffectiveRange();
		int32_t GetMagazineSize();
		class USkeletalMesh* GetMagazineMeshWithCustomMaterials();
		class USkeletalMesh* GetMagazineMesh();
		TArray<class UMaterialInstance*> GetMagazineMaterials1p();
		TArray<struct FSkeletalMaterial> GetMagazineMaterials();
		class UClass* GetMagazineAnimClass();
		bool GetFiringTransformIgnoresDispersion();
		struct FTransform GetFiringTransform();
		TArray<class UAkAudioEvent*> GetFiringSounds1P();
		TArray<class UAkAudioEvent*> GetFiringSounds();
		float GetFiringDispersion();
		float GetFireRate();
		float GetDispersionRecoveryTime();
		float GetDispersionPerShot();
		float GetDispersionFireRateMultiplier();
		TArray<class UFGDamageType*> GetDamageTypesOnImpact();
		class AActor* GetAmmoTarget();
		float GetAmmoScale();
		struct FRuntimeFloatCurve GetAmmoDamageFalloffCurve();
		struct FLinearColor GetAmmoColor();
		void FireSecondary();
		void FireAmmunition();
		void AmmoTick(float DeltaSeconds);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAmmoTypeHomingBase
	 * Size -> 0x0018 (FullSize[0x03F8] - InheritedSize[0x03E0])
	 */
	class UFGAmmoTypeHomingBase : public UFGAmmoType
	{
	public:
		float                                                      mHomingOverlapSize;                                      // 0x03E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mHomingAngleLimit;                                       // 0x03E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FFGHomingTarget>                             mHomingOverrideTargets;                                  // 0x03E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		EHomingPriority GetPriorityLevelForActor(class AActor* Actor);
		bool GetNewHomingTarget(struct FHitResult* out_hitResult);
		bool CanHomingHitTarget(class AActor* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAmmoTypeHoming
	 * Size -> 0x0008 (FullSize[0x0400] - InheritedSize[0x03F8])
	 */
	class UFGAmmoTypeHoming : public UFGAmmoTypeHomingBase
	{
	public:
		unsigned char                                              UnknownData_Q1E3[0x8];                                   // 0x03F8(0x0008) Fix Super Size

	public:
		void ProcessHit(const struct FHitResult& HitResult);
		void PlayEffects(const struct FHitResult& HitResult);
		void NetMulticast_PlayEffects(const struct FHitResult& HitResult);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAmmoTypeInstantHit
	 * Size -> 0x0010 (FullSize[0x03F0] - InheritedSize[0x03E0])
	 */
	class UFGAmmoTypeInstantHit : public UFGAmmoType
	{
	public:
		bool                                                       mPlayFireEffects;                                        // 0x03E0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZOO0[0x7];                                   // 0x03E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mHitNoise;                                               // 0x03E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void ProcessHit(const struct FHitResult& HitResult);
		void PlayEffects(const struct FHitResult& HitResult);
		void NetMulticast_PlayEffects(const struct FHitResult& HitResult);
		float GetTotalHitDamageAmount(const struct FHitResult& HitResult, class UFGDamageType* DamageType);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAmmoTypeLaser
	 * Size -> 0x0010 (FullSize[0x0400] - InheritedSize[0x03F0])
	 */
	class UFGAmmoTypeLaser : public UFGAmmoTypeInstantHit
	{
	public:
		float                                                      mBonusChargeDamagePercentage;                            // 0x03F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VNDY[0xC];                                   // 0x03F4(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAmmoTypeProjectile
	 * Size -> 0x01D8 (FullSize[0x05D0] - InheritedSize[0x03F8])
	 */
	class UFGAmmoTypeProjectile : public UFGAmmoTypeHomingBase
	{
	public:
		class UClass*                                              mProjectileClass;                                        // 0x03F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mInitialProjectileSpeedOverride;                         // 0x0400(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mProjectileMaxSpeedOverride;                             // 0x0404(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mProjectileHealthOverride;                               // 0x0408(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mProjectileLifespan;                                     // 0x040C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mProjectileStickspan;                                    // 0x0410(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanTakeDamageBySameProjectileOrChild;                   // 0x0414(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NRAX[0x3];                                   // 0x0415(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGDamageType*>                               mDamageTypesAtEndOfLife;                                 // 0x0418(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, SaveGame, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mGravityScaleOverLifespan;                               // 0x0428(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       mHomingProjectile;                                       // 0x04B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHomingNeedsValidTarget;                                 // 0x04B1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_92BV[0x2];                                   // 0x04B2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mMaxHomingAccelerationMagnitudeOverride;                 // 0x04B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mHomingMagnitudeMultiplierOverLifespan;                  // 0x04B8(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mHomingMagnitudeMultiplierOverDistanceToTarget;          // 0x0540(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5OI0[0x8];                                   // 0x05C8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetupProjectile(class AFGProjectile* Projectile);
		class UClass* GetProjectileClass();
		float GetInitialSpeedOverride();
		TArray<class UFGDamageType*> GetDamageTypesEndOfLife();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAmmoTypeSpreadshot
	 * Size -> 0x0010 (FullSize[0x03F0] - InheritedSize[0x03E0])
	 */
	class UFGAmmoTypeSpreadshot : public UFGAmmoType
	{
	public:
		struct FInt32Interval                                      mNumShots;                                               // 0x03E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSpreadAngleDegrees;                                     // 0x03E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VJNK[0x4];                                   // 0x03EC(0x0004) MISSED OFFSET (PADDING)

	public:
		void ProcessHit(const struct FHitResult& HitResult);
		void PlayEffects(TArray<struct FHitResult> traceResults);
		void NetMulticast_PlayEffects(TArray<struct FHitResult> traceResults);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnimInstanceTrainDocking
	 * Size -> 0x08A8 (FullSize[0x0BF0] - InheritedSize[0x0348])
	 */
	class UFGAnimInstanceTrainDocking : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_CZ4B[0x8];                                   // 0x0348(0x0008) Fix Super Size
		struct FAnimInstanceProxyTrainDocking                      mProxy;                                                  // 0x0350(0x08A0) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnimInstanceTruckStation
	 * Size -> 0x08B8 (FullSize[0x0C00] - InheritedSize[0x0348])
	 */
	class UFGAnimInstanceTruckStation : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_2E2X[0x4];                                   // 0x0348(0x0004) Fix Super Size
		float                                                      mRampDownTime;                                           // 0x034C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                mStateMachineName;                                       // 0x0350(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1EOB[0x8];                                   // 0x0358(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAnimInstanceProxyTruckStation                      mProxy;                                                  // 0x0360(0x08A0) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnimNotify
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UFGAnimNotify : public UAnimNotify
	{
	public:
		class FScriptMulticastDelegate                             mOnNotifyTriggered;                                      // 0x0038(0x0010) BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnimNotify_AutoAkEvent
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UFGAnimNotify_AutoAkEvent : public UAnimNotify
	{
	public:
		class FName                                                SocketName;                                              // 0x0038(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       AudioEvent;                                              // 0x0040(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       bFollow;                                                 // 0x0048(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BJG8[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnimNotify_AkEventSetRTPC
	 * Size -> 0x0020 (FullSize[0x0070] - InheritedSize[0x0050])
	 */
	class UFGAnimNotify_AkEventSetRTPC : public UFGAnimNotify_AutoAkEvent
	{
	public:
		class UAkRtpc*                                             mRTPCValue;                                              // 0x0050(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              mRTPC;                                                   // 0x0058(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mInterpolationTimeMs;                                    // 0x0068(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_K8UR[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnimNotify_AkEventCurrentPotential
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UFGAnimNotify_AkEventCurrentPotential : public UFGAnimNotify_AkEventSetRTPC
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnimNotify_Attack
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGAnimNotify_Attack : public UFGAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnimNotify_CreatureSound
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class UFGAnimNotify_CreatureSound : public UAnimNotify
	{
	public:
		TArray<struct FCreatureSound>                              mCreatureSounds;                                         // 0x0038(0x0010) Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate
		bool                                                       bFollowBone;                                             // 0x0048(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7SNZ[0x3];                                   // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                mBoneName;                                               // 0x004C(0x0008) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5NYX[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnimNotify_FootDown
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class UFGAnimNotify_FootDown : public UFGAnimNotify
	{
	public:
		int32_t                                                    mFootIndex;                                              // 0x0048(0x0004) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mPlaySound;                                              // 0x004C(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UTYS[0x3];                                   // 0x004D(0x0003) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnimNotify_Landed
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGAnimNotify_Landed : public UFGAnimNotify
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCharacterAnimInstance
	 * Size -> 0x01B0 (FullSize[0x04F8] - InheritedSize[0x0348])
	 */
	class UFGCharacterAnimInstance : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_PV73[0x4];                                   // 0x0348(0x0004) Fix Super Size
		float                                                      mAccelerationVectorLength;                               // 0x034C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             mVelocity;                                               // 0x0350(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             mVelocityLocalNormalized;                                // 0x0368(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             mAccelerationLocalNormalized;                            // 0x0380(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ICN9[0x8];                                   // 0x0398(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          mActorTransform;                                         // 0x03A0(0x0060) BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGCharacterBase*                                    mCachedCharacter;                                        // 0x0400(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EMovementMode                                              mCachedMovementMode;                                     // 0x0408(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EMovementMode                                              mCachedDefaultWalkMode;                                  // 0x0409(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RWB4[0x2];                                   // 0x040A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSpeed;                                                  // 0x040C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mSpeedLastFrame;                                         // 0x0410(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mSpeedZ;                                                 // 0x0414(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mWalkRotation;                                           // 0x0418(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsStandingStill;                                        // 0x041C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsAccelerating;                                         // 0x041D(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0MPX[0x2];                                   // 0x041E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mYawDelta;                                               // 0x0420(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAimYaw;                                                 // 0x0424(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAimYawInterpSpeed;                                      // 0x0428(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ESI3[0x4];                                   // 0x042C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            mRootRotation;                                           // 0x0430(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		bool                                                       mTurnInPlaceLeft;                                        // 0x0448(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mTurnInPlaceRight;                                       // 0x0449(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mTurnInPlaceComplete;                                    // 0x044A(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FX9W[0x5];                                   // 0x044B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         mTurnLeftCurve;                                          // 0x0450(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         mTurnRightCurve;                                         // 0x0458(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             mActorRotationForwardVector;                             // 0x0460(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             mActorRotationForwardVectorReference;                    // 0x0478(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAimYawReductionStartTime;                               // 0x0490(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAimYawReductionCurrentTime;                             // 0x0494(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRotator                                            mActorRotationLastTick;                                  // 0x0498(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      mYawRotationStrength;                                    // 0x04B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mYawRotationInterpSpeed;                                 // 0x04B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mRootRotationInterpSpeed;                                // 0x04B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mAllowedToTurn;                                          // 0x04BC(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I8G7[0x7];                                   // 0x04BD(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mTurnInPlaceDefaultTime;                                 // 0x04C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mUseTurnInPlace;                                         // 0x04C8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mCanUpdateActorRotationReference;                        // 0x04C9(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7X3J[0x2];                                   // 0x04CA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mYawAimMaxValue;                                         // 0x04CC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mYawAimMinValue;                                         // 0x04D0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAimPitch;                                               // 0x04D4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAimPitchInterpSpeed;                                    // 0x04D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mGetDeltaPitchRotation;                                  // 0x04DC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mUsePreLand;                                             // 0x04DD(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mPreLand;                                                // 0x04DE(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GTCI[0x1];                                   // 0x04DF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPreLandVelocityMultiplier;                              // 0x04E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_US5N[0x4];                                   // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<ECollisionChannel>                                  mPreLandCollisionChannels;                               // 0x04E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		void OnRadialDamageTaken();
		void OnPointDamageTaken(const struct FVector& shootDirection);
		void OnAnyDamageTaken();
		float GetVelocityDirection();
		struct FVector GetVelocity();
		struct FRotator GetDesiredWalkRotation();
		struct FRotator GetDesiredRunLeanRotation();
		class AFGCharacterBase* GetCachedCharacter();
		float GetAccelerationVectorLength();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnimPlayer
	 * Size -> 0x0018 (FullSize[0x0510] - InheritedSize[0x04F8])
	 */
	class UFGAnimPlayer : public UFGCharacterAnimInstance
	{
	public:
		unsigned char                                              UnknownData_S0OR[0x8];                                   // 0x04F8(0x0008) Fix Super Size
		class AFGCharacterPlayer*                                  mCharacter;                                              // 0x0500(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsIdling;                                               // 0x0508(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J2EC[0x7];                                   // 0x0509(0x0007) MISSED OFFSET (PADDING)

	public:
		void BlueprintUninitializeAnimation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAnyUndefinedDescriptor
	 * Size -> 0x0000 (FullSize[0x01A0] - InheritedSize[0x01A0])
	 */
	class UFGAnyUndefinedDescriptor : public UFGItemDescriptor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAssetManager
	 * Size -> 0x0000 (FullSize[0x04E8] - InheritedSize[0x04E8])
	 */
	class UFGAssetManager : public UAssetManager
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAtmosphereUpdater
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UFGAtmosphereUpdater : public UObject
	{
	public:
		unsigned char                                              UnknownData_6EKF[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAtmosphereVolumeBlend>                      mBlendingVolumes;                                        // 0x0030(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z2UH[0x10];                                  // 0x0040(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAtmosphereVolume
	 * Size -> 0x52C0 (FullSize[0x55F0] - InheritedSize[0x0330])
	 */
	class AFGAtmosphereVolume : public AVolume
	{
	public:
		unsigned char                                              UnknownData_5M1B[0x8];                                   // 0x0330(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGBiome*                                            mBiome;                                                  // 0x0338(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mPriority;                                               // 0x0340(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mBlendDistance;                                          // 0x0344(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFogHeight;                                              // 0x0348(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFogDensity;                                             // 0x03D0(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mFogInscatteringColor;                                   // 0x0458(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFullyDirectionalInscatteringColorDistance;              // 0x0660(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mNonDirectionalInscatteringColorDistance;                // 0x06E8(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mDirectionalInscatteringExponent;                        // 0x0770(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mDirectionalInscatteringStartDistance;                   // 0x07F8(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mDirectionalInscatteringColor;                           // 0x0880(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFogHeightFalloff;                                       // 0x0A88(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFogMaxOpacity;                                          // 0x0B10(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mStartDistance;                                          // 0x0B98(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFogCutoffDistance;                                      // 0x0C20(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mHorizonColorCurve;                                      // 0x0CA8(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mZenithColorCurve;                                       // 0x0EB0(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mCloudColorCurve;                                        // 0x10B8(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mSunLightColorCurve;                                     // 0x12C0(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mMoonLightColorCurve;                                    // 0x14C8(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mSunIntensity;                                           // 0x16D0(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mMoonIntensity;                                          // 0x1758(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mCloudOpacity;                                           // 0x17E0(0x0088) Protected, NativeAccessSpecifierProtected
		float                                                      mBlendWeight;                                            // 0x1868(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U0ZT[0x4];                                   // 0x186C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  mWhiteTemp;                                              // 0x1870(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mWhiteTint;                                              // 0x18F8(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorSaturation;                                        // 0x1980(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorContrast;                                          // 0x1B88(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorGamma;                                             // 0x1D90(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorGain;                                              // 0x1F98(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorOffset;                                            // 0x21A0(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorSaturationShadows;                                 // 0x23A8(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorContrastShadows;                                   // 0x25B0(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorGammaShadows;                                      // 0x27B8(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorGainShadows;                                       // 0x29C0(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorOffsetShadows;                                     // 0x2BC8(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorSaturationMidtones;                                // 0x2DD0(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorContrastMidtones;                                  // 0x2FD8(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorGammaMidtones;                                     // 0x31E0(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorGainMidtones;                                      // 0x33E8(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorOffsetMidtones;                                    // 0x35F0(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorSaturationHighlights;                              // 0x37F8(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorContrastHighlights;                                // 0x3A00(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorGammaHighlights;                                   // 0x3C08(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorGainHighlights;                                    // 0x3E10(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mColorOffsetHighlights;                                  // 0x4018(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mColorCorrectionHighlightsMin;                           // 0x4220(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mColorCorrectionShadowsMax;                              // 0x42A8(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mBlueCorrection;                                         // 0x4330(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mExpandGamut;                                            // 0x43B8(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mSceneColorTint;                                         // 0x4440(0x0208) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFilmSlope;                                              // 0x4648(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFilmToe;                                                // 0x46D0(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFilmShoulder;                                           // 0x4758(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFilmBlackClip;                                          // 0x47E0(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFilmWhiteClip;                                          // 0x4868(0x0088) Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mContrast;                                               // 0x48F0(0x0208) Deprecated, Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mGain;                                                   // 0x4AF8(0x0208) Deprecated, Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mSaturation;                                             // 0x4D00(0x0208) Deprecated, Protected, NativeAccessSpecifierProtected
		bool                                                       mEnableContrast : 1;                                     // 0x4F08(0x0001) BIT_FIELD Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableGain : 1;                                         // 0x4F08(0x0001) BIT_FIELD Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableSaturation : 1;                                   // 0x4F08(0x0001) BIT_FIELD Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFogHeight : 1;                                    // 0x4F08(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFogDensity : 1;                                   // 0x4F08(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFogInscatteringColor : 1;                         // 0x4F08(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFullyDirectionalInscatteringColorDistance : 1;    // 0x4F08(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableNonDirectionalInscatteringColorDistance : 1;      // 0x4F08(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableDirectionalInscatteringExponent : 1;              // 0x4F09(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableDirectionalInscatteringStartDistance : 1;         // 0x4F09(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableDirectionalInscatteringColor : 1;                 // 0x4F09(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFogHeightFalloff : 1;                             // 0x4F09(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFogMaxOpacity : 1;                                // 0x4F09(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableStartDistance : 1;                                // 0x4F09(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFogCutoffDistance : 1;                            // 0x4F09(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mOverrideHorizonColor : 1;                               // 0x4F09(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mOverrideMoonIntensity : 1;                              // 0x4F0A(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mOverrideCloudOpacity : 1;                               // 0x4F0A(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mOverrideSunIntensity : 1;                               // 0x4F0A(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mOverrideZenithColor : 1;                                // 0x4F0A(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mOverrideCloudColor : 1;                                 // 0x4F0A(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mOverrideSunLightColor : 1;                              // 0x4F0A(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mOverrideMoonLightColor : 1;                             // 0x4F0A(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableWhiteTemp : 1;                                    // 0x4F0A(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableWhiteTint : 1;                                    // 0x4F0B(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorSaturation : 1;                              // 0x4F0B(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorContrast : 1;                                // 0x4F0B(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorGamma : 1;                                   // 0x4F0B(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorGain : 1;                                    // 0x4F0B(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorOffset : 1;                                  // 0x4F0B(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFilmSlope : 1;                                    // 0x4F0B(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFilmToe : 1;                                      // 0x4F0B(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFilmShoulder : 1;                                 // 0x4F0C(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFilmBlackClip : 1;                                // 0x4F0C(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableFilmWhiteClip : 1;                                // 0x4F0C(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorSaturationShadows : 1;                       // 0x4F0C(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorContrastShadows : 1;                         // 0x4F0C(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorGammaShadows : 1;                            // 0x4F0C(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorGainShadows : 1;                             // 0x4F0C(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorOffsetShadows : 1;                           // 0x4F0C(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorSaturationMidtones : 1;                      // 0x4F0D(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorContrastMidtones : 1;                        // 0x4F0D(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorGammaMidtones : 1;                           // 0x4F0D(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorGainMidtones : 1;                            // 0x4F0D(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorOffsetMidtones : 1;                          // 0x4F0D(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorSaturationHighlights : 1;                    // 0x4F0D(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorContrastHighlights : 1;                      // 0x4F0D(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorGammaHighlights : 1;                         // 0x4F0D(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorGainHighlights : 1;                          // 0x4F0E(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorOffsetHighlights : 1;                        // 0x4F0E(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorCorrectionShadowsMax : 1;                    // 0x4F0E(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableColorCorrectionHighlightsMin : 1;                 // 0x4F0E(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableBlueCorrection : 1;                               // 0x4F0E(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableExpandGamut : 1;                                  // 0x4F0E(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnableSceneColorTint : 1;                               // 0x4F0E(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_71PU[0x6E1];                                 // 0x4F0F(0x06E1) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAttachedLootComponent
	 * Size -> 0x0010 (FullSize[0x02B0] - InheritedSize[0x02A0])
	 */
	class UFGAttachedLootComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_UHW4[0x8];                                   // 0x02A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGItemPickup_Spawnable*                             mAttachedItemPickup;                                     // 0x02A8(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SpawnAttachedItemDrop(const struct FInventoryStack& stack);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAttachmentPointType
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGAttachmentPointType : public UObject
	{
	public:
		TArray<class UClass*>                                      mAllowedAttachmentPointSnapTypes;                        // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		bool CanAttach(const struct FFGAttachmentPoint& Point, const struct FFGAttachmentPoint& TargetPoint);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAttachmentPointComponent
	 * Size -> 0x0010 (FullSize[0x02B0] - InheritedSize[0x02A0])
	 */
	class UFGAttachmentPointComponent : public USceneComponent
	{
	public:
		EAttachmentPointUsage                                      mUsage;                                                  // 0x02A0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4EKB[0x7];                                   // 0x02A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mType;                                                   // 0x02A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAttentionPingActor
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class AFGAttentionPingActor : public AActor
	{
	public:
		class AFGPlayerState*                                      mOwningPlayerState;                                      // 0x02F8(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mCompassTexture;                                         // 0x0300(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLifeSpan;                                               // 0x0308(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mActorRepresentationLifeSpan;                            // 0x030C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SpawnAttentionPingEffects();
		void OnRep_OwningPlayerState();
		class AFGPlayerState* GetOwningPlayerState();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMessageBase
	 * Size -> 0x0058 (FullSize[0x02D8] - InheritedSize[0x0280])
	 */
	class UFGMessageBase : public UUserWidget
	{
	public:
		class FText                                                mTitle;                                                  // 0x0280(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FText                                                mPreviewText;                                            // 0x0298(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       mIsPopup;                                                // 0x02B0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mShouldTriggerCall;                                      // 0x02B1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0V8S[0x6];                                   // 0x02B2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mSenderClass;                                            // 0x02B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EMessageType                                               mType;                                                   // 0x02C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VCYA[0x7];                                   // 0x02C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UTexture2D*>                                  mImages;                                                 // 0x02C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		class UObject* STATIC_GetMessageDefaultObject(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAudioMessage
	 * Size -> 0x00C8 (FullSize[0x03A0] - InheritedSize[0x02D8])
	 */
	class UFGAudioMessage : public UFGMessageBase
	{
	public:
		class UAkComponent*                                        mAkAudioComponent;                                       // 0x02D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FMessageDialogue>                            mDialogueData;                                           // 0x02E0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ANND[0x18];                                  // 0x02F0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FMessageDialogue                                    mCurrentDialogue;                                        // 0x0308(0x0020) NativeAccessSpecifierPublic
		struct FMessageSubtitle                                    mCurrentSubtitle;                                        // 0x0328(0x0028) NativeAccessSpecifierPublic
		float                                                      mSubtitleTimeMultiplier;                                 // 0x0350(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BT0D[0x4];                                   // 0x0354(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                mOverrideText;                                           // 0x0358(0x0018) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       mShowOnlyOverrideText;                                   // 0x0370(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LP6L[0x7];                                   // 0x0371(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnAudioMessageFinishedPlayback;                         // 0x0378(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UInputMappingContext*                                mMappingContext;                                         // 0x0388(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputComponent*                                     mAudioMessageInputComponent;                             // 0x0390(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGMessage*                                          mMessage;                                                // 0x0398(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void StartPlayback();
		bool ShowOnlyOverrideText();
		void PlayNextDialogue();
		void OnSkipButtonReleased();
		void OnSkipButtonPressed();
		class FText GetOverrideText();
		class FText GetMessageText();
		EMessagePriorityType STATIC_GetMessagePriorityType(class UClass* Message, class UObject* WorldContext);
		struct FMessageSubtitle GetCurrentSubtitle();
		struct FAudioSubtitlePair GetCurrentDialogue();
		void ContinuePlayback();
		void CancelPlayback();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAudioBusMonitor
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UFGAudioBusMonitor : public UObject
	{
	public:
		unsigned char                                              UnknownData_VD1M[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnBusMeteringInfoUpdate;                                 // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YRNZ[0x18];                                  // 0x0040(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              BusName;                                                 // 0x0058(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAkMeteringFlags                                           MeteringFlags;                                           // 0x0068(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G3OX[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetMeteringFlags(EAkMeteringFlags MeteringFlags);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAudioMeteringSubsystem
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UFGAudioMeteringSubsystem : public UGameInstanceSubsystem
	{
	public:
		TMap<class FString, class UFGAudioBusMonitor*>             mRegisteredMonitors;                                     // 0x0030(0x0050) NativeAccessSpecifierPrivate

	public:
		class UFGAudioBusMonitor* GetAudioBusMonitor(const class FString& BusName);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAudioVolumeSubsystem
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGAudioVolumeSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_2ODR[0x8];                                   // 0x02F8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGAutoJsonExportSettings
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UFGAutoJsonExportSettings : public UDeveloperSettings
	{
	public:
		TArray<class UClass*>                                      mCustomClasses;                                          // 0x0038(0x0010) Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPoolDataReaderInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGPoolDataReaderInterface : public UInterface
	{
	public:
		struct FPoolMeshSettings GetMeshSettings();
		struct FLinearColor GetMeshColor();
		struct FPoolLightSettings GetLightSettings();
		class UMaterialInterface* GetLightMaterialFunction();
		float GetLightIntensity();
		struct FLinearColor GetLightColor();
		struct FTransform GetCustomTransform();
		bool DoesNeedCustomTransform();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.PoolRoot
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class APoolRoot : public AActor
	{
	public:
		TArray<class UActorComponent*>                             Components;                                              // 0x02F8(0x0010) Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FK4M[0x8];                                   // 0x0308(0x0008) MISSED OFFSET (PADDING)

	public:
		void STATIC_SetFlag(class AFGBuildable* buildable, int32_t Flags);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPoolableProxyComponentBase
	 * Size -> 0x0000 (FullSize[0x0620] - InheritedSize[0x0620])
	 */
	class UFGPoolableProxyComponentBase : public UStaticMeshComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPoolSettings
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UFGPoolSettings : public UDeveloperSettings
	{
	public:
		TArray<struct FFGPoolType>                                 PoolEntry;                                               // 0x0038(0x0010) Edit, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBaseUI
	 * Size -> 0x0098 (FullSize[0x0318] - InheritedSize[0x0280])
	 */
	class UFGBaseUI : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_MI5V[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPopupWidget*                                      mActivePopup;                                            // 0x0288(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPopupData>                                  mPopupDataQueue;                                         // 0x0290(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YYKR[0x78];                                  // 0x02A0(0x0078) MISSED OFFSET (PADDING)

	public:
		void SetPopup(class UFGPopupWidget* inPopup);
		void PopPopupQueue();
		class UFGPopupWidget* GetPopup();
		class UFGPopupWidget* CreatePopupWidget(const struct FPopupData& PopupData);
		void ClosePopup();
		void ClearPopupQueueOfClass(class UClass* WidgetClass);
		void ClearPopupQueueAndPopupOfContentClass(class UClass* WidgetClass);
		void AddPopup(const class FText& Title, const class FText& Body, const class FScriptDelegate& ConfirmClickDelegate, EPopupId PopupID, class UClass* PopupClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStaticReplicatedActor
	 * Size -> 0x0000 (FullSize[0x02F8] - InheritedSize[0x02F8])
	 */
	class AFGStaticReplicatedActor : public AActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBeacon
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGBeacon : public AFGStaticReplicatedActor
	{
	public:
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x02F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		class FText GetRepresentationText();
		struct FLinearColor GetRepresentationColor();
		ECompassViewDistance GetCompassViewDistance();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHologram
	 * Size -> 0x0168 (FullSize[0x0460] - InheritedSize[0x02F8])
	 */
	class AFGHologram : public AActor
	{
	public:
		unsigned char                                              UnknownData_NFLB[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_SY9T[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mValidHitClasses;                                        // 0x0308(0x0010) Edit, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UClass*                                              mRecipe;                                                 // 0x0318(0x0008) Net, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent*                                        mLoopSound;                                              // 0x0320(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGClearanceComponent*                               mClearanceBox;                                           // 0x0328(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGClearanceComponent*>                       mAdditionalClearanceBoxes;                               // 0x0330(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                mClearanceMeshComponent;                                 // 0x0340(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       mClearanceDetector;                                      // 0x0348(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mShouldCreateClearanceMeshVisual;                        // 0x0350(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EHologramSoftClearanceResponse                             mSoftClearanceOverlapResponse;                           // 0x0351(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DO15[0x6];                                   // 0x0352(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UStaticMeshComponent*>                        mGeneratedAbstractComponents;                            // 0x0358(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D4KR[0x4];                                   // 0x0368(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mScrollRotation;                                         // 0x036C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EHologramBuildModeCategory                                 mBuildModeCategory;                                      // 0x0370(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F82Y[0x7];                                   // 0x0371(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mDefaultBuildMode;                                       // 0x0378(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EHologramMaterialState                                     mPlacementMaterialState;                                 // 0x0380(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BHCU[0x7];                                   // 0x0381(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstance*                                   mValidPlacementMaterial;                                 // 0x0388(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstance*                                   mInvalidPlacementMaterial;                               // 0x0390(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AFGHologram*>                                 mChildren;                                               // 0x0398(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class AFGHologram*                                         mParent;                                                 // 0x03A8(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IZY2[0x8];                                   // 0x03B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mBuildClass;                                             // 0x03B8(0x0008) Net, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mUseBuildClearanceOverlapSnapp;                          // 0x03C0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YGV7[0x17];                                  // 0x03C1(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableBlueprintDesigner*                       mBlueprintDesigner;                                      // 0x03D8(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAllowEdgePlacementInDesignerEvenOnIntersect;            // 0x03E0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanBePlacedInBlueprintDesigner;                         // 0x03E1(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanLockHologram;                                        // 0x03E2(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BVNW[0x1];                                   // 0x03E3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mCanNudgeHologram;                                       // 0x03E4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G7BX[0x3];                                   // 0x03E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDefaultNudgeDistance;                                   // 0x03E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxNudgeDistance;                                       // 0x03EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ETZ3[0x30];                                  // 0x03F0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APawn*                                               mConstructionInstigator;                                 // 0x0420(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsDisabled;                                             // 0x0428(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsChanged;                                              // 0x0429(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_W25W[0x6];                                   // 0x042A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mConstructionPosition;                                   // 0x0430(0x0018) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRotator                                            mConstructionRotation;                                   // 0x0448(0x0018) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate

	public:
		void ToggleHologramPositionLock();
		class AFGHologram* STATIC_SpawnHologramFromRecipe(class UClass* inRecipe, class AActor* hologramOwner, const struct FVector& SpawnLocation, class APawn* hologramInstigator);
		class AFGHologram* STATIC_SpawnChildHologramFromRecipe(class AFGHologram* Parent, class UClass* recipe, class AActor* hologramOwner, const struct FVector& SpawnLocation, class APawn* hologramInstigator);
		void SetNudgeOffset(const struct FVector& NewNudgeOffset);
		void OnRep_PlacementMaterialState();
		void OnPendingConstructionHologramCreated(class AFGHologram* fromHologram);
		ENudgeFailReason NudgeTowardsWorldDirection(const struct FVector& Direction);
		ENudgeFailReason NudgeHologram(const struct FVector& NudgeInput, const struct FHitResult& HitResult);
		void LockHologramPosition(bool lock);
		bool IsHologramLocked();
		bool IsCurrentBuildMode(class UClass* buildMode);
		bool IsChanged();
		void GetSupportedBuildModes(TArray<class UClass*>* out_buildmodes);
		struct FVector GetNudgeOffset();
		class AFGHologram* GetNudgeHologramTarget();
		float GetNudgeDistance();
		struct FVector GetHologramLockLocation();
		class UClass* GetDefaultBuildGunMode();
		void GetConstructDisqualifiers(TArray<class UClass*>* out_constructResults);
		EHologramBuildModeCategory GetBuildModeCategory();
		float GetBuildGunRangeOverride();
		class UClass* GetBuildClass();
		void Client_PlaySnapSound();
		bool CanNudgeHologram();
		bool CanLockHologram();
		bool CanConstruct();
		bool CanBeZooped();
		void AddValidHitClass(class UClass* hitClass);
		ENudgeFailReason AddNudgeOffset(const struct FVector& Offset);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableHologram
	 * Size -> 0x0228 (FullSize[0x0688] - InheritedSize[0x0460])
	 */
	class AFGBuildableHologram : public AFGHologram
	{
	public:
		float                                                      mMaxPlacementFloorAngle;                                 // 0x0460(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_USAB[0x4];                                   // 0x0464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGFactoryLegsComponent*                             mLegs;                                                   // 0x0468(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mUseGradualFoundationRotations;                          // 0x0470(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XBS9[0x3];                                   // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mGridSnapSize;                                           // 0x0474(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DLMP[0x50];                                  // 0x0478(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGComplexClearanceComponent*                        mComplexClearanceComponent;                              // 0x04C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInstancedStaticMeshComponent*                       mInstancedGuidelineMeshComponent;                        // 0x04D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I88V[0x8];                                   // 0x04D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFGHologramGuidelineSnapResult                      mGuidelineSnapResult;                                    // 0x04E0(0x00B0) NoDestructor, Protected, NativeAccessSpecifierProtected
		class AFGBuildable*                                        mSnappedBuilding;                                        // 0x0590(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGClearanceComponent*                               mSnappedClearanceBox;                                    // 0x0598(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGBuildable*                                        mSnappedFloor;                                           // 0x05A0(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGBuildable*                                        mSnappedWall;                                            // 0x05A8(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_01Z0[0x19];                                  // 0x05B0(0x0019) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mNeedsValidFloor;                                        // 0x05C9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DJYF[0x2E];                                  // 0x05CA(0x002E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mMustSnapToAttachmentPoint;                              // 0x05F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanSnapWithAttachmentPoints;                            // 0x05F9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E91I[0x2];                                   // 0x05FA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mAttachmentPointSnapDistanceThreshold;                   // 0x05FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFactoryCustomizationData                           mCustomizationData;                                      // 0x0600(0x0078) Protected, NativeAccessSpecifierProtected
		class UClass*                                              mDefaultSwatch;                                          // 0x0678(0x0008) ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YWFX[0x8];                                   // 0x0680(0x0008) Fix size for supers

	public:
		void ReceiveConfigureComponents(class AFGBuildable* inBuildable);
		void ReceiveConfigureActor(class AFGBuildable* inBuildable);
		TArray<class UFGPowerConnectionComponent*> GetCachedPowerConnectionComponents();
		TArray<class UFGPipeConnectionComponent*> GetCachedPipeConnectionComponents();
		TArray<class UFGFactoryConnectionComponent*> GetCachedFactoryConnectionComponents();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBeamHologram
	 * Size -> 0x0068 (FullSize[0x06F0] - InheritedSize[0x0688])
	 */
	class AFGBeamHologram : public AFGBuildableHologram
	{
	public:
		class UClass*                                              mBuildModeDiagonal;                                      // 0x0688(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mBuildModeFreeForm;                                      // 0x0690(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                mBeamMesh;                                               // 0x0698(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HQWR[0xC];                                   // 0x06A0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCurrentLength;                                          // 0x06AC(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZCHQ[0x30];                                  // 0x06B0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EBeamHologramBuildStep                                     mBuildStep;                                              // 0x06E0(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FD1W[0xF];                                   // 0x06E1(0x000F) MISSED OFFSET (PADDING)

	public:
		void OnRep_CurrentLength();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBlueprintDesignerHologram
	 * Size -> 0x0018 (FullSize[0x06A0] - InheritedSize[0x0688])
	 */
	class AFGBlueprintDesignerHologram : public AFGBuildableHologram
	{
	public:
		class USceneComponent*                                     mStorageLocation;                                        // 0x0688(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableHologram*                                mStorageHologram;                                        // 0x0690(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U03Q[0x8];                                   // 0x0698(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_WaitForValidSubsystems(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
		void STATIC_WaitForPlayerState(class UObject* WorldContextObject, class AFGPlayerController* PlayerController, const struct FLatentActionInfo& LatentInfo, class AFGPlayerState** out_playerState);
		void STATIC_WaitForGameUI(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class UFGGameUI** out_GameUI);
		void STATIC_WaitForFGHud(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class AFGHUD** out_HUD);
		void STATIC_WaitForCondition(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const class FScriptDelegate& Predicate, bool ExecuteOnDedicatedServer);
		void STATIC_UpdateUseState(struct FUseState* State, class UClass* NewState);
		void STATIC_UpdateHotbarShortcutsForSpecifiedMaterialDescriptor(class APlayerController* PlayerController, class UClass* MaterialDesc);
		void STATIC_TravelToMainMenu(class APlayerController* PlayerController);
		void STATIC_SortCustomizationRecipes(TArray<class UClass*>* Recipes);
		void STATIC_ShowOutline(class UPrimitiveComponent* Comp, EOutlineColor Color);
		bool STATIC_ShouldShowUnstableSaveVersionWarning();
		bool STATIC_ShouldShowOfflineSessionWarning();
		void STATIC_SetWaterCollisionSettings(class UStaticMeshComponent* Target);
		void STATIC_SetMetadataTag(class UObject* Object, const class FName& Tag, const class FString& Value);
		void STATIC_SetGlobalDefaultMaterialDescriptor(class APlayerController* PlayerController, class UClass* MaterialDesc, bool updateHotbarShortcuts);
		void STATIC_SetDefaultMatDescForBuildableCategory(class APlayerController* PlayerController, class UClass* Category, class UClass* MaterialDesc);
		void STATIC_SetCusomizationColorSlot(struct FFactoryCustomizationColorSlot* ColorData, const struct FLinearColor& PrimaryColor, const struct FLinearColor& SecondaryColor, float Metallic, float Roughness);
		bool STATIC_SegmentIntersection(const struct FVector& SegmentBeginA, const struct FVector& SegmentEndA, const struct FVector& SegmentBeginB, const struct FVector& SegmentEndB);
		class FString STATIC_SecondsToTimeString(float InSeconds);
		void STATIC_ScrollToEndAfterTwoTicks(class UScrollBox* ScrollBox);
		float STATIC_RoundFloatWithPrecision(float Value, int32_t MaximumFractionalDigits);
		void STATIC_RemoveTrainFromSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_RemoveStaticSignificance(class UObject* WorldContextObject, class UObject* Object);
		void STATIC_RemoveGenericTickObjectFromSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_RemoveGainSignificanceObjectFromSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_RemoveFromSignificanceManagerGeneric(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_RemoveFactoryObjectFromSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_RemoveConveyorBeltFromSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_RemoveAudioVolumeFromSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_RemoveAndReleaseChildFromPanel(class AFGHUD* HUD, class UPanelWidget* PanelWidget, int32_t Index);
		void STATIC_RemoveAndReleaseAllChildsFromPanel(class AFGHUD* HUD, class UPanelWidget* PanelWidget);
		void STATIC_RemoveAmbientSoundSplineFromSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_OccludeOutlineByComponent(class UPrimitiveComponent* Comp, bool occlude);
		void STATIC_OccludeOutlineByActor(class AActor* Actor, bool occlude);
		bool STATIC_NotEqual_FrameTimeFrameTime(const struct FFrameTime& frameTimeA, const struct FFrameTime& frameTimeB);
		struct FFactoryCustomizationColorSlot STATIC_MakeCustomizationColorSlot(const struct FLinearColor& PrimaryColor, const struct FLinearColor& SecondaryColor, float Metallic, float Roughness);
		float STATIC_LogX(float Base, float Value);
		class USessionMigrationSequence* STATIC_LoadSaveFile(const struct FSaveHeader& SaveGame, class APlayerController* Player, bool enableAdvancedGameSettings);
		class FString STATIC_LinearColorToHex(const struct FLinearColor& InColor);
		bool STATIC_IsWidgetUnderCursor(class ULocalPlayer* LocalPlayer, class UUserWidget* Widget);
		bool STATIC_IsLocationNearABase(class UObject* WorldContext, const struct FVector& InLocation, float closeDistance);
		bool STATIC_IsLocallyHumanControlled(class APawn* Pawn);
		bool STATIC_IsInAlwaysLoadedLevel(class AActor* Actor);
		bool STATIC_IsGameWorld(class UObject* WorldContext);
		bool STATIC_IsEditorWorld(class UObject* WorldContext);
		bool STATIC_IsAlphaBuild();
		bool STATIC_ImpactEffectIsWithinDistance(class UObject* WorldContext, class APawn* Instigator, const struct FVector& SpawnLocation, float visibleCullDistance);
		bool STATIC_ImpactEffectIsRelevant(class UObject* WorldContext, class APawn* Instigator, const struct FVector& SpawnLocation, float visibleCullDistance, float alwaysSuccessDistance, bool skipLOSCheck);
		void STATIC_HideOutline(class UPrimitiveComponent* Comp);
		struct FLinearColor STATIC_HexToLinearColor(const class FString& inHex);
		void STATIC_GetVisibleSubCategoriesForSchematicCategory(class UObject* WorldContext, class UClass* Category, ESchematicType schematicType, TArray<class UClass*>* out_subCategories);
		class FString STATIC_GetVersionString();
		void STATIC_GetValidMaterialRecipesSubCategory(class UObject* WorldContext, class UClass* Category, class UClass* SubCategory, TArray<class UClass*>* out_matRecipes);
		void STATIC_GetValidBuildablsForCustomization(class UClass* customizationDesc, TArray<class UClass*>* out_buildables);
		void STATIC_GetSubCategoriesForSchematicCategory(class UObject* WorldContext, class UClass* Category, TArray<class UClass*>* out_subCategories);
		void STATIC_GetSlotDataForSwatchDesc(class UClass* SwatchDesc, class AActor* WorldContext, struct FFactoryCustomizationColorSlot* out_SlotData);
		class UClass* STATIC_GetQuickSwitchGroupFromRecipe(class UClass* recipe);
		float STATIC_GetPrimitiveDefaultDataFromIndex(int32_t Index, class UPrimitiveComponent* Component);
		float STATIC_GetPrimitiveDataFromIndex(int32_t Index, class UPrimitiveComponent* Component);
		class AActor* STATIC_GetOuterActor(class UObject* Obj);
		class FString STATIC_GetMetadataTag(class UObject* Object, const class FName& Tag);
		class UClass* STATIC_GetMaterialDescriptorForBuildingDescriptor(class UObject* WorldContext, class UClass* buildingDesc);
		class UClass* STATIC_GetMaterialDescriptorForBuildableClass(class UObject* WorldContext, class UClass* buildable);
		void STATIC_GetMaterialCustomizationBuildableMap(class UClass* materialCustomization, TMap<class UClass*, class UClass*>* out_buildableMap);
		void STATIC_GetMatchingQuickSwitchGroupRecipes(class UClass* recipe, TArray<class UClass*> recipesToMatchAgainst, TArray<class UClass*>* out_recipes);
		int32_t STATIC_GetMapMarkerID(const struct FMapMarker& MapMarker, bool* out_hasValidID);
		class FString STATIC_GetLanguage();
		bool STATIC_GetIsCategoryDefaultForMaterialDesc(class UClass* MaterialDesc);
		int32_t STATIC_GetIDForCustomizationDesc(class UClass* customizationDesc);
		class UTexture2D* STATIC_GetIconForCustomizationDesc(class UClass* customizationDesc);
		class UClass* STATIC_GetGlobalDefaultMatDescForMaterialCategory(class APlayerController* PlayerController, class UClass* Category);
		bool STATIC_GetGIsEditor();
		int64_t STATIC_GetFrameNumber();
		struct FVector STATIC_GetEditorCameraLocation();
		void STATIC_GetDescriptionForCustomizationDesc(class UClass* customizationDesc, class FText* out_description);
		class UClass* STATIC_GetDefaultMatDescForBuildableCategory(class APlayerController* PlayerController, class UClass* Category, class UClass* SubCategory);
		void STATIC_GetCustomizationsFromCollectionClass(class UClass* collectionClass, TArray<class UClass*>* out_customizaitons);
		class FName STATIC_GetComponentFlagSoftLanding();
		TArray<class UClass*> STATIC_GetCategoriesWithAffordableRecipes(class AFGCharacterPlayer* playerPawn, class UClass* forProducer);
		TArray<class UClass*> STATIC_GetAvailableSubCategoriesForCategory(class UObject* WorldContext, class UClass* Category, class UClass* outputSubCategoryClass);
		void STATIC_GetAvailableRecipesWithDefaultMaterialInSubCategory(class APlayerController* PlayerController, class UClass* Category, class UClass* SubCategory, TArray<class UClass*>* out_recipes);
		void STATIC_GetAvailableRecipesInSubCategory(class UObject* WorldContext, class UClass* Category, class UClass* SubCategory, TArray<class UClass*>* out_recipes);
		void STATIC_GetAvailableRecipesForMaterialDescriptorInSubCategory(class APlayerController* PlayerController, class UClass* Category, class UClass* SubCategory, class UClass* MaterialDesc, TArray<class UClass*>* out_recipes);
		void STATIC_GetAllWidgetsOfClassInHierarchy(class UWidget* hierarchyContext, class UClass* WidgetClass, TArray<class UWidget*>* FoundWidgets);
		void STATIC_GetAllPickupableItemDescriptors(class UObject* WorldContextObject, TArray<class UClass*>* out_itemDescriptors);
		void STATIC_GetAllMeshComponentsInClass(class UClass* InClass, TArray<class UMeshComponent*>* out_components);
		TArray<class UClass*> STATIC_GetAllItemsInCategory(class UObject* WorldContext, class UClass* itemCategory);
		void STATIC_GetAllDescriptorsSorted(class UObject* WorldContext, TArray<class UClass*>* out_descriptors);
		TArray<class UClass*> STATIC_GetAllCategoriesFromRecipes(TArray<class UClass*> Recipes, class UClass* outputCategoryClass);
		void STATIC_GetAllAvailableCustomizations(class UObject* WorldContext, TArray<class UClass*>* out_customizations, class UClass* customizationClass);
		void STATIC_GetActorsInRadius(class UObject* WorldContextObject, const struct FVector& InLocation, float InRadius, class UClass* inActorClass, TArray<class AActor*>* Result);
		class FString STATIC_GetActorGridStringRuntTime(class AActor* InActor);
		float STATIC_FindClosestPlayerSq(class AActor* Source);
		bool STATIC_FileLoadString(const class FString& AbsoluteFilePath, class FString* String);
		bool STATIC_EvaluateMathExpression(const class FString& Expression, class FText* out_Result);
		bool STATIC_EqualEqual_FrameTimeFrameTime(const struct FFrameTime& frameTimeA, const struct FFrameTime& frameTimeB);
		bool STATIC_EqualEqual_FMapMarkerFMapMarker(const struct FMapMarker& mapMarkerA, const struct FMapMarker& mapMarkerB);
		void STATIC_ED_SetMinDrawDistance(class UStaticMeshComponent* Comp, float Distance);
		class FText STATIC_CutTextByPixelOffset(const class FText& Text, const struct FSlateFontInfo& InFontInfo, int32_t horizontalOffset, const class FString& Suffix);
		void STATIC_CSS_SetAnimationAsset(class USkeletalMeshComponent* Comp, class UAnimationAsset* AnimationAsset);
		class USessionMigrationSequence* STATIC_CreateSessionAndTravelToMapWithStartingLocation(class APlayerController* Player, const class FString& mapName, const class FString& startingLocation, const class FString& SessionName, ESessionVisibility sessionVisibility, bool skipOnboarding);
		class USessionMigrationSequence* STATIC_CreateSessionAndTravelToMap(class APlayerController* Player, const class FString& mapName, const class FString& Options, const class FString& SessionName, ESessionVisibility sessionVisibility);
		void STATIC_CopyTextToClipboard(const class FText& textToCopy);
		class FText STATIC_CopyTextFromClipboard();
		class UObject* STATIC_Conv_SessionSaveStructToObject(const struct FSessionSaveStruct& inSessionSaveStruct);
		class UObject* STATIC_Conv_SaveHeaderToObject(const struct FSaveHeader& inSaveHeader);
		class FString STATIC_Conv_IntToString(int64_t inInt);
		struct FFrameTime STATIC_Conv_IntToFrameTime(int32_t FrameCount);
		int32_t STATIC_Conv_FrameTimeToInt(const struct FFrameTime& FrameTime);
		float STATIC_CmS2KmH(float CmS);
		void STATIC_ClosePopup(class APlayerController* Controller);
		void STATIC_ClearPopupQueueOfContentClass(class APlayerController* Controller, class UClass* contentClass);
		void STATIC_ClearPopupQueueOfClass(class APlayerController* Controller, class UClass* WidgetClass);
		void STATIC_Cheat_GetAllDescriptors(TArray<class UClass*>* out_descriptors);
		void STATIC_ChangeLanguage(const class FString& Target);
		bool STATIC_CanBeOnConveyor(class UClass* InClass);
		class FString STATIC_BuildSourceString(const class FText& InText);
		void STATIC_BreakCustomizationColorSlot(const struct FFactoryCustomizationColorSlot& CustomData, struct FLinearColor* PrimaryColor, struct FLinearColor* SecondaryColor, float* Metallic, float* Roughness);
		void STATIC_ApplySkinDataToMeshArray(TArray<class UMeshComponent*>* compArr, struct FFactorySkinComponentGroup* groupData);
		void STATIC_ApplyDefaultColorPrimitiveData(class AActor* Actor);
		void STATIC_ApplyCustomizationPrimitiveData(class AActor* Actor, const struct FFactoryCustomizationData& customizationData, int32_t colorSlotFallback, class UMeshComponent* onlyApplyToComponent);
		void STATIC_AddTrainToSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_AddStaticSignificance(class UObject* WorldContextObject, class UObject* Object);
		void STATIC_AddPopupWithContent(class APlayerController* Controller, const class FText& Title, const class FText& Body, const class FScriptDelegate& CloseDelegate, class UFGPopupWidgetContent* Content, EPopupId PopupID, class UObject* popupInstigator);
		void STATIC_AddPopupWithCloseDelegate(class APlayerController* Controller, const class FText& Title, const class FText& Body, const class FScriptDelegate& CloseDelegate, EPopupId PopupID, class UClass* PopupClass, class UObject* popupInstigator);
		void STATIC_AddPopup(class APlayerController* Controller, const class FText& Title, const class FText& Body, const class FScriptDelegate& ConfirmClickDelegate, EPopupId PopupID, class UClass* PopupClass, class UObject* popupInstigator);
		void STATIC_AddPipelineToSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_AddGenericTickObjectToSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_AddGainSignificanceObjectToSignificanceManager(class UObject* WorldContextObject, class UObject* Obj, float desiredGainDistance);
		void STATIC_AddFactoryObjectToSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_AddConveyorBeltToSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_AddAudioVolumeToSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		void STATIC_AddAmbientSoundSplineToSignificanceManager(class UObject* WorldContextObject, class UObject* Obj);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryHologram
	 * Size -> 0x0000 (FullSize[0x0688] - InheritedSize[0x0688])
	 */
	class AFGFactoryHologram : public AFGBuildableHologram
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBlueprintHologram
	 * Size -> 0x0138 (FullSize[0x07C0] - InheritedSize[0x0688])
	 */
	class AFGBlueprintHologram : public AFGFactoryHologram
	{
	public:
		class AFGBuildable*                                        mCurrentDuplicatingBuildable;                            // 0x0688(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UFGClearanceComponent*>                       mClearanceComponents;                                    // 0x0690(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic
		TMap<class AFGBuildable*, class USceneComponent*>          mBuildableToNewRoot;                                     // 0x06A0(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic
		TMap<class AFGBuildable*, class USplineComponent*>         mBlueprintWorldSplineToHoloSpline;                       // 0x06F0(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UFGBlueprintDescriptor*                              mBlueprintDescriptor;                                    // 0x0740(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mBlueprintSnapBuildMode;                                 // 0x0748(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGBlueprintProxy*                                   mSnappedProxy;                                           // 0x0750(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                mBlueprintBoundsMesh;                                    // 0x0758(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                mBlueprintDirectionMesh;                                 // 0x0760(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M0YR[0x58];                                  // 0x0768(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBlueprintProxy
	 * Size -> 0x0088 (FullSize[0x0380] - InheritedSize[0x02F8])
	 */
	class AFGBlueprintProxy : public AActor
	{
	public:
		unsigned char                                              UnknownData_DHSE[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_85XU[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                mBlueprintName;                                          // 0x0308(0x0018) Net, SaveGame, RepNotify, NativeAccessSpecifierPrivate
		struct FBox                                                mLocalBounds;                                            // 0x0320(0x0038) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		TArray<class AFGBuildable*>                                mBuildables;                                             // 0x0358(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		class UFGBlueprintDescriptor*                              mBlueprintDescriptor;                                    // 0x0368(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UBoxComponent*                                       mBoundingBox;                                            // 0x0370(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2JFS[0x8];                                   // 0x0378(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_LocalBounds();
		void OnRep_BlueprintName();
		TArray<class AFGBuildable*> GetBuildables();
		class UBoxComponent* GetBoundingBox();
		class FText GetBlueprintName();
		class UFGBlueprintDescriptor* GetBlueprintDescriptor();
		int32_t CollectBuildables(TArray<class AFGBuildable*>* out_buildables);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBlueprintSettings
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UFGBlueprintSettings : public UDeveloperSettings
	{
	public:
		class UClass*                                              mBlueprintRecipeClass;                                   // 0x0038(0x0008) Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mBlueprintDesignerRecipeClass;                           // 0x0040(0x0008) Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mUndefinedCategoryIconID;                                // 0x0048(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VXBD[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHotbarShortcut
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UFGHotbarShortcut : public UObject
	{
	public:
		unsigned char                                              UnknownData_J67E[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnActiveStatusChanged;                                  // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnShortcutBound;                                        // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    mShortcutIndex;                                          // 0x0050(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mShortcutJustBound;                                      // 0x0054(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7HMP[0x3];                                   // 0x0055(0x0003) MISSED OFFSET (PADDING)

	public:
		void SetShortcutJustBound();
		void OnRep_ShortcutBound();
		void OnClientSubsystemsValid();
		void NotifyShortcutChanged();
		bool IsValidShortcut(class AFGPlayerController* Owner);
		bool IsSame(class UFGHotbarShortcut* shortcut);
		bool IsActive(class AFGPlayerController* Owner);
		void InitializeShortcut();
		class UTexture2D* GetDisplayImage();
		void Execute(class AFGPlayerController* Owner);
		void DestroyShortcut();
		class FString DescribeShortcut();
		void Client_ResetShortcutJustBound();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBlueprintShortcut
	 * Size -> 0x0018 (FullSize[0x0070] - InheritedSize[0x0058])
	 */
	class UFGBlueprintShortcut : public UFGHotbarShortcut
	{
	public:
		class FString                                              mBlueprintName;                                          // 0x0058(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGBlueprintDescriptor*                              mBlueprintDescriptor;                                    // 0x0068(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetBlueprintName(const class FString& inBlueprintName, bool silent);
		void OnRep_BlueprintName();
		void OnBlueprintDescriptorUpdated(class UFGBlueprintDescriptor* blueprintDescriptor);
		class FString GetBlueprintName();
		class UFGBlueprintDescriptor* GetBlueprintDescriptor();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBlueprintRemoteCallObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGBlueprintRemoteCallObject : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGSignDataRemoteCallObject;              // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_QKV6[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void Server_SetCategoryRecordData(TArray<struct FBlueprintCategoryRecord> categoryRecords);
		void Server_SetBlueprintRecordData(TArray<struct FBlueprintRecord> categoryRecords);
		void Server_SaveBlueprintInDesigner(class AFGBuildableBlueprintDesigner* designer, class AFGPlayerController* Controller, const struct FBlueprintRecord& Record, const struct FBlueprintCategoryRecord& categoryRecord, const struct FBlueprintSubCategoryRecord& subCategoryRecord);
		void Server_RequestFileData(const class FString& Filename, int32_t currentProgress);
		void Server_LoadBlueprintInDesigner(class AFGBuildableBlueprintDesigner* designer, class AFGPlayerController* Controller, const class FString& BlueprintName);
		void Server_DeleteBlueprintDescriptor(const class FString& BlueprintName);
		void Server_ClearBlueprintDesigner(class AFGBuildableBlueprintDesigner* designer, class AFGPlayerController* Controller);
		void Client_RespondFinalFileDataResponse(TArray<unsigned char> fileData, const struct FBlueprintRecord& Record);
		void Client_RespondFileFailure(const class FString& Filename);
		void Client_RespondFileDataResponse(TArray<unsigned char> fileData);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBlueprintSubsystem
	 * Size -> 0x0218 (FullSize[0x0510] - InheritedSize[0x02F8])
	 */
	class AFGBlueprintSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_KXHY[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		struct FBlueprintSaveData                                  mStoredBlueprintData;                                    // 0x0300(0x0078) NativeAccessSpecifierPublic
		TArray<class AFGBuildable*>                                mBlueprintWorldBuildables;                               // 0x0378(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBlueprintDescriptorUpdated;                            // 0x0388(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              mDefaultBuildEffectActor;                                // 0x0398(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      mBlacklistedDesignerBuildables;                          // 0x03A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      mIgnoreRecipeRequirements;                               // 0x03B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		TArray<class UFGBlueprintDescriptor*>                      mAllBlueprintDescriptors;                                // 0x03C0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class UFGBlueprintCategory*>                        mAllBlueprintCategories;                                 // 0x03D0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class UFGBlueprintSubCategory*>                     mAllBlueprintSubCategories;                              // 0x03E0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FBlueprintRecord>                            mBlueprintRecords;                                       // 0x03F0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FBlueprintCategoryRecord>                    mBlueprintCategoryRecords;                               // 0x0400(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FBlueprintRecord>                            mBlueprintRecordsPendingNetSend;                         // 0x0410(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		float                                                      mTimeSinceLastBlueprintRecordMulticast;                  // 0x0420(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTimeSinceLastRecipeCheck;                               // 0x0424(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mRecordDataIsDirty;                                      // 0x0428(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mBlueprintDescriptorsRequireRefresh;                     // 0x0429(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VR7N[0x6];                                   // 0x042A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWorld*                                              mBlueprintWorld;                                         // 0x0430(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FBlueprintRecord>                            mCachedRecords;                                          // 0x0438(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FBlueprintHeader>                            mCachedHeaders;                                          // 0x0448(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		bool                                                       mHasInitialized;                                         // 0x0458(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TRD9[0x7];                                   // 0x0459(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGBlueprintDescriptor*                              mActiveBlueprintDescriptor;                              // 0x0460(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AFGBuildableBlueprintDesigner*>               mAllBlueprintDesigners;                                  // 0x0468(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		struct FBlueprintManifest                                  mServerManifest;                                         // 0x0478(0x0010) Net, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FBlueprintBuildEffectData>                   mPendingBlueprintBuildEffects;                           // 0x0488(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FBlueprintBuildEffectData>                   mTemporaryBuildEffectData;                               // 0x0498(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		int32_t                                                    mBlueprintBuildEffectID;                                 // 0x04A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LTRB[0x14];                                  // 0x04AC(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBlueprintManifest                                  mClientManifest;                                         // 0x04C0(0x0010) NativeAccessSpecifierPrivate
		bool                                                       mClientHasGeneratedInitialManifest;                      // 0x04D0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1PCV[0x7];                                   // 0x04D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FBlueprintNameAndHash>                       mMissingClientBlueprints;                                // 0x04D8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<unsigned char>                                      mFileTransferData;                                       // 0x04E8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		class FString                                              mPendingFileTransferName;                                // 0x04F8(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasActiveFileTransfer;                                  // 0x0508(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mClientAwaitingResponse;                                 // 0x0509(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GXJQ[0x6];                                   // 0x050A(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetBlueprintCategories(TArray<class UFGBlueprintCategory*> blueprintCategories);
		void SetActiveBlueprintHologramDescriptor(class UFGBlueprintDescriptor* Desc);
		void OnRep_ServerManifest();
		void OnRep_BlueprintCategoryRecords();
		void Multicast_DeleteBlueprintDescriptor(const class FString& BlueprintName);
		void Multicast_BroadcastBlueprintRecordChanges(TArray<struct FBlueprintRecord> Records);
		void Multicast_AddBlueprintBuildEffectData(const struct FBlueprintBuildEffectData& buildeffectData);
		class UFGBlueprintSubCategory* GetSubCategoryForUndefined();
		class UFGBlueprintCategory* GetCategoryForUndefined();
		class AFGBlueprintSubsystem* STATIC_GetBlueprintSubsystem(class UObject* WorldContext);
		void STATIC_GetBlueprintDescriptors(TArray<class UFGBlueprintDescriptor*>* out_descriptors, class UObject* WorldContext);
		void GetAllBlueprintCategories(TArray<class UFGBlueprintCategory*>* out_Categories);
		class UFGBlueprintDescriptor* GetActiveBlueprintDescriptor();
		bool DeleteBlueprintDescriptor(class UFGBlueprintDescriptor* blueprintDesc);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBoomboxListenerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGBoomboxListenerInterface : public UInterface
	{
	public:
		void RepeatModeChanged(EBoomBoxRepeatMode NewMode);
		void PlaybackStateChanged(int32_t NewState);
		void PlaybackPositionUpdate(float CurrentPosition, float TotalDuration);
		void CurrentTapeChanged(class UClass* currentTape);
		void CurrentSongChanged(const struct FSongData& currentSong, int32_t Index);
		void BoomBoxModeChanged(EBoomBoxMode NewMode);
		void AudioVolumeChanged(float Volume);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBoomBoxRemoteCallObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGBoomBoxRemoteCallObject : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGBoomBoxRemoteCallObject;               // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EP8H[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void Server_SyncPlayerStateRequest(class AFGBoomBoxPlayer* Player, float clientTimestamp);
		void Server_StopNow(class AFGBoomBoxPlayer* Player);
		void Server_SetVolumeNormalized(class AFGBoomBoxPlayer* Player, float Volume);
		void Server_SetRepeatMode(class AFGBoomBoxPlayer* Player, EBoomBoxRepeatMode repeatMode);
		void Server_PutBoomBoxDown(class AFGBoomBoxPlayer* Player, const struct FTransform& Transform);
		void Server_PrevNow(class AFGBoomBoxPlayer* Player);
		void Server_PlayNow(class AFGBoomBoxPlayer* Player);
		void Server_NextNow(class AFGBoomBoxPlayer* Player);
		void Server_LoadTapeNow(class AFGBoomBoxPlayer* Player);
		void Server_FireTurboBassNow(class AFGBoomBoxPlayer* Player);
		void Server_EjectTapeNow(class AFGBoomBoxPlayer* Player);
		void Server_BeginTurboBassSequence(class AFGBoomBoxPlayer* Player);
		void Server_BeginStopSequence(class AFGBoomBoxPlayer* Player);
		void Server_BeginPreviousSongSequence(class AFGBoomBoxPlayer* Player);
		void Server_BeginPlaySequence(class AFGBoomBoxPlayer* Player);
		void Server_BeginNextSongSequence(class AFGBoomBoxPlayer* Player);
		void Server_BeginChangeTapeSequence(class AFGBoomBoxPlayer* Player, class UClass* newTape);
		void Client_SyncPlayerState(class AFGBoomBoxPlayer* Player, const struct FBoomBoxPlayerState& State, float Timestamp);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBoomBoxPlayer
	 * Size -> 0x0268 (FullSize[0x0560] - InheritedSize[0x02F8])
	 */
	class AFGBoomBoxPlayer : public AActor
	{
	public:
		unsigned char                                              UnknownData_P7SA[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_F3T6[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkRtpc*                                             mVolumeRtpc;                                             // 0x0308(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkRtpc*                                             mTurboBassOutputRTPC;                                    // 0x0310(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkRtpc*                                             mTurboBassRTPC;                                          // 0x0318(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mTurboBassAudioEvent;                                    // 0x0320(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTurboBassBlockingThreshold;                             // 0x0328(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mTapeTextureParameter;                                   // 0x032C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mTapeMaterialIndex;                                      // 0x0334(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent*                                        mAkComponent;                                            // 0x0338(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              mMesh;                                                   // 0x0340(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     mSceneRoot;                                              // 0x0348(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       mBoxCollision;                                           // 0x0350(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VK8S[0x8];                                   // 0x0358(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          mBaseTransformEquipped;                                  // 0x0360(0x0060) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTransform                                          mBaseTransformFreeActor;                                 // 0x03C0(0x0060) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mImpulseRadius;                                          // 0x0420(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mImpulseStrength;                                        // 0x0424(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mVerticalImpulseStrength;                                // 0x0428(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTurboBassBaseDamage;                                    // 0x042C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mImpulseDamageType;                                      // 0x0430(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mTurboBassNoise;                                         // 0x0438(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mBoostJumpMultiplier;                                    // 0x0440(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mBoostJumpVelocityRange;                                 // 0x0444(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstance*                                   mFirstPersonTapeMaterial;                                // 0x0448(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, struct FFirstPersonMaterialArray>        mComponentNameToFirstPersonMaterials;                    // 0x0450(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<class FName, struct FFirstPersonMaterialArray>        mOriginalMaterials;                                      // 0x04A0(0x0050) Protected, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic*                            mCachedMaterialInstance;                                 // 0x04F0(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstanceDynamic*                            mCachedMaterialInstance1p;                               // 0x04F8(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              mStateListeners[0x10];                                   // 0x0500(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              UnknownData_C1RY[0x18];                                  // 0x0510(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FBoomBoxPlayerState                                 mState;                                                  // 0x0528(0x0018) SaveGame, NoDestructor, NativeAccessSpecifierPrivate
		EBoomBoxMode                                               mMode;                                                   // 0x0540(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EBoomBoxRepeatMode                                         mRepeatMode;                                             // 0x0541(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CXSX[0x6];                                   // 0x0542(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGCharacterPlayer*                                  mOwningCharacter;                                        // 0x0548(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGEquipmentBoomBox*                                 mEquipmentActor;                                         // 0x0550(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mNextTape;                                               // 0x0558(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UnregisterStateListener();
		void TogglePlaybackNow(class AFGCharacterPlayer* Character);
		void TapeTextureLoadedAsync(class UTexture2D* Texture);
		void SwitchToNextTapeTexture();
		void StopNow(class AFGCharacterPlayer* Character);
		void SongFinished(EAkCallbackType cbType, class UAkCallbackInfo* cbInfo);
		void SetVolumeNormalized(float Volume, class AFGCharacterPlayer* instigatorCharacter);
		void SetRepeatMode(EBoomBoxRepeatMode repeatMode, class AFGCharacterPlayer* instigatorCharacter);
		void RegisterStateListener();
		void PutDown(const struct FTransform& Transform);
		void PrevNow(class AFGCharacterPlayer* Character);
		void PlayTurboBassSequence(class AFGCharacterPlayer* instigatorPlayer);
		void PlayTurboBassEffects(class AFGCharacterPlayer* Character);
		void PlaySwitchTapeSequence(class AFGCharacterPlayer* instigatorPlayer);
		void PlayStopSequence(class AFGCharacterPlayer* instigatorPlayer);
		void PlayStingerEffects(class AFGCharacterPlayer* Character);
		void PlayPrevSongSequence(class AFGCharacterPlayer* instigatorPlayer);
		void PlayPlaySequence(class AFGCharacterPlayer* instigatorPlayer);
		void PlayNow(class AFGCharacterPlayer* Character);
		void PlayNextSongSequence(class AFGCharacterPlayer* instigatorPlayer);
		void PlayLoadTapeSequence(class AFGCharacterPlayer* instigatorPlayer);
		void PlayEquipEffects(class AFGCharacterPlayer* Character);
		void OnRep_RepeatMode();
		void OnPlaybackStateChanged(int32_t PlaybackState);
		void OnPawnPossessed(class APawn* Pawn, class AController* Controller);
		void OnModeChanged();
		void OnceClientSubsystemsAreReady();
		void NextNow(class AFGCharacterPlayer* Character);
		void Multicast_SetAudioVolume(float normalizedVolume);
		void Multicast_PutDown(const struct FTransform& Transform);
		void Multicast_FireTurboBassNow(class AFGCharacterPlayer* Character);
		void Multicast_BeginTurboBassSequence(class AFGCharacterPlayer* instigatorPlayer);
		void Multicast_BeginSwitchTapeSequence(class UClass* newTape, class AFGCharacterPlayer* instigatorPlayer);
		void Multicast_BeginStopSequence(class AFGCharacterPlayer* instigatorPlayer);
		void Multicast_BeginPreviousSongSequence(class AFGCharacterPlayer* instigatorPlayer);
		void Multicast_BeginPlaySequence(class AFGCharacterPlayer* instigatorPlayer);
		void Multicast_BeginNextSongSequence(class AFGCharacterPlayer* instigatorPlayer);
		void Multicast_BeginLoadTapeSequence(class UClass* newTape, class AFGCharacterPlayer* instigatorPlayer);
		void Multicast_ApplyState(const struct FBoomBoxPlayerState& boomBoxState);
		void LoadTapeNow(class AFGCharacterPlayer* Character);
		bool IsPlaybackEnabled();
		bool IsPlaybackEffectivelyAllowed();
		bool IsPlaybackAllowedByPossessedStatus();
		bool IsPlaybackAllowedByEquippedStatus();
		bool IsInEquipmentMode();
		bool IsCurrentlyPlaying();
		EBoomBoxRepeatMode GetRepeatMode();
		EBoomBoxPickupButtonState GetPickupButtonState(class AFGCharacterPlayer* Player);
		class UClass* GetCurrentTape();
		bool GetCharacterNearbyTransform(struct FTransform* out_Transform);
		bool GetCharacterLookAtTransform(struct FTransform* out_Transform);
		void FireTurboBassNow(class AFGCharacterPlayer* Character);
		void EjectTapeNow(class AFGCharacterPlayer* Character);
		bool CanBePickedUp(class AFGCharacterPlayer* byPlayer);
		void BeginTurboBassSequence(class AFGCharacterPlayer* instigatorCharacter);
		void BeginStopSequence(class AFGCharacterPlayer* instigatorCharacter);
		void BeginPreviousSongSequence(class AFGCharacterPlayer* instigatorCharacter);
		void BeginPlaySequence(class AFGCharacterPlayer* instigatorCharacter);
		void BeginNextSongSequence(class AFGCharacterPlayer* instigatorCharacter);
		void BeginChangeTapeSequence(class UClass* newTape, class AFGCharacterPlayer* instigatorCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBoundedTextRenderComponent
	 * Size -> 0x0008 (FullSize[0x05C0] - InheritedSize[0x05B8])
	 */
	class UFGBoundedTextRenderComponent : public UTextRenderComponent
	{
	public:
		class UBoxComponent*                                       mBoundingBox;                                            // 0x05B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void AssignBoundingBox(class UBoxComponent* BoxComponent);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignificantNetworkRCO
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGSignificantNetworkRCO : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGSignificantNetworkRemoteCallObject;    // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ASBY[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void Server_RequestDecoratorSignificantComponents(class AFGBuildable* Actor, class AFGPlayerController* Controller);
		void Server_RemoveDecoratorSignificantComponents(class AFGBuildable* Actor, class AFGPlayerController* Controller);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableSparseDataObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGBuildableSparseDataObject : public UObject
	{
	public:
		class UClass*                                              mSparseBuildEffectActorTemplate;                         // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildable
	 * Size -> 0x02E0 (FullSize[0x05D8] - InheritedSize[0x02F8])
	 */
	class AFGBuildable : public AActor
	{
	public:
		unsigned char                                              UnknownData_C4NY[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_61RI[0x28];                                  // 0x0300(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mHologramClass;                                          // 0x0328(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                mDisplayName;                                            // 0x0330(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FText                                                mDescription;                                            // 0x0348(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      MaxRenderDistance;                                       // 0x0360(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3M0J[0x14];                                  // 0x0364(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mDecoratorClass;                                         // 0x0378(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KBP1[0x18];                                  // 0x0380(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCustomizationDescToRecipeData>              mAlternativeMaterialRecipes;                             // 0x0398(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       mContainsComponents;                                     // 0x03A8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q2A4[0x3];                                   // 0x03A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mIsConsideredForBaseWeightValue;                         // 0x03AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGBuildableSparseDataObject*                        mBuildableSparseDataCDO;                                 // 0x03B0(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              mDismantleRedirectActor;                                 // 0x03B8(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFactoryTickFunction                                mFactoryTickFunction;                                    // 0x03C0(0x0030) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              mColorSlot;                                              // 0x03F0(0x0001) Edit, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YGC9[0x7];                                   // 0x03F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFactoryCustomizationData                           mCustomizationData;                                      // 0x03F8(0x0078) Net, SaveGame, RepNotify, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mDefaultSwatchCustomizationOverride;                     // 0x0470(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mSwatchGroup;                                            // 0x0478(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mFactorySkinClass;                                       // 0x0480(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGMaterialEffect_Build*                             mActiveBuildEffect;                                      // 0x0488(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              mBuildEffectInstignator;                                 // 0x0490(0x0008) Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mBuildEffectSpeed;                                       // 0x0498(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAllowColoring : 1;                                      // 0x049C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAllowPatterning : 1;                                    // 0x049C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UnknownData_YG6L : 1;                                    // 0x049C(0x0001) BIT_FIELD (PADDING)
		bool                                                       mSkipBuildEffect : 1;                                    // 0x049C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mForceNetUpdateOnRegisterPlayer : 1;                     // 0x049C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mToggleDormancyOnInteraction : 1;                        // 0x049C(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsMultiSpawnedBuildable : 1;                            // 0x049C(0x0001) BIT_FIELD Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       UnknownData_UAW5 : 1;                                    // 0x049C(0x0001) BIT_FIELD (PADDING)
		bool                                                       UnknownData_MKEK : 3;                                    // 0x049D(0x0001) BIT_FIELD (PADDING)
		bool                                                       mShouldShowAttachmentPointVisuals : 1;                   // 0x049D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCreateClearanceMeshRepresentation : 1;                  // 0x049D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanContainLightweightInstances : 1;                     // 0x049D(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SURQ[0x2];                                   // 0x049E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAbstractInstanceDataObject*                         mInstanceDataCDO;                                        // 0x04A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9CE3[0x10];                                  // 0x04A8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mAffectsOcclusion;                                       // 0x04B8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EFGRainOcclusionShape                                      mOcclusionShape;                                         // 0x04B9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PIXM[0x6];                                   // 0x04BA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mCustomOcclusionShape;                                   // 0x04C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mScaleCustomOffset;                                      // 0x04C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EFGRainOcclusionShapeScaling                               mCustomScaleType;                                        // 0x04CC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I7OF[0x3];                                   // 0x04CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FBox>                                        mOcclusionBoxInfo;                                       // 0x04D0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J6LS[0x38];                                  // 0x04E0(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FFGAttachmentPoint>                          mAttachmentPoints;                                       // 0x0518(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class AFGBuildableBlueprintDesigner*                       mBlueprintDesigner;                                      // 0x0528(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YYEW[0x10];                                  // 0x0530(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mInteractWidgetClass;                                    // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3CI2[0x8];                                   // 0x0548(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGCharacterPlayer*>                          mInteractingPlayers;                                     // 0x0550(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		bool                                                       UnknownData_OJ45 : 2;                                    // 0x0560(0x0001) BIT_FIELD (PADDING)
		bool                                                       mIsUseable : 1;                                          // 0x0560(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NADG[0x1];                                   // 0x0561(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FNetConstructionID                                  mNetConstructionID;                                      // 0x0562(0x0006) Net, Transient, NoDestructor, NativeAccessSpecifierPrivate
		class UClass*                                              mBuiltWithRecipe;                                        // 0x0568(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mOriginalBuildableVariant;                               // 0x0570(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mBuildTimeStamp;                                         // 0x0578(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6KHH[0x4];                                   // 0x057C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGClearanceComponent*                               mClearanceComponent;                                     // 0x0580(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGComplexClearanceComponent*                        mComplexClearanceComponent;                              // 0x0588(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KS69[0x5];                                   // 0x0590(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mHideOnBuildEffectStart;                                 // 0x0595(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mShouldModifyWorldGrid;                                  // 0x0596(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y608[0x1];                                   // 0x0597(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UStaticMeshComponent*>                        mProxyBuildEffectComponents;                             // 0x0598(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class AFGPlayerController*>                         mActiveSignificantControllers;                           // 0x05A8(0x0010) Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPrivate
		TArray<class USceneComponent*>                             mGeneratedSignificantComponents;                         // 0x05B8(0x0010) Edit, ExportObject, ZeroConstructor, Transient, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class AFGBlueprintProxy*                                   mBlueprintProxy;                                         // 0x05C8(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mBlueprintBuildEffectID;                                 // 0x05D0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_990E[0x4];                                   // 0x05D4(0x0004) Fix size for supers

	public:
		bool ShouldShowAttachmentPointVisuals();
		bool ShouldModifyWorldGrid();
		bool ShouldBeConsideredForBase();
		void SetupInstances(bool bInitializeHidden);
		void SetDismantleRedirectActor(class AActor* actorToRedirectTo);
		void RemoveInstances();
		void PlayDismantleSound();
		void PlayDismantleEffects();
		void PlayConstructSound();
		void PlayBuildEffects(class AActor* inInstigator);
		void PlayBuildEffectActor(class AActor* inInstigator);
		void OnSkinCustomizationApplied(class UClass* skin);
		void OnRep_LightweightTransform();
		void OnRep_CustomizationData();
		void OnMaterialInstancesUpdated();
		void OnBuildEffectActorFinished();
		void K2_OnBuildEffectFinished();
		bool IsPlayingBuildEffect();
		TArray<class UMeshComponent*> GetMainMeshes();
		class UClass* GetInteractWidgetClass();
		class AActor* GetDismantleRedirectActor();
		void GetDismantleEffectTemplate();
		void GetDismantleBlueprintReturns(TArray<struct FInventoryStack>* out_returns);
		class UClass* GetDefaultSwatchCustomizationOverride(class UObject* WorldContext);
		float GetConsideredForBaseWeight();
		class UFGComplexClearanceComponent* GetComplexClearanceComponent();
		class UFGClearanceComponent* GetClearanceComponent();
		void GetBuildEffectTemplate();
		void FlagReevaluateMaterialOnColored();
		void Factory_ReceiveTick(float DeltaTime);
		bool Factory_PeekOutput(class UFGFactoryConnectionComponent* Connection, TArray<struct FInventoryItem>* out_items, class UClass* Type);
		bool Factory_GrabOutput(class UFGFactoryConnectionComponent* Connection, struct FInventoryItem* out_item, float* out_OffsetBeyond, class UClass* Type);
		void ExecutePlayBuildActorEffects();
		void DestroyBuildEffectProxyComponents();
		TArray<class UStaticMeshComponent*> CreateBuildEffectProxyComponents();
		bool CanBeSampled();
		void ApplySkinData(class UClass* newSkinDesc);
		void ApplyMeshPrimitiveData(const struct FFactoryCustomizationData& customizationData);
		void ApplyHasPowerCustomData();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableConveyorAttachment
	 * Size -> 0x0038 (FullSize[0x0610] - InheritedSize[0x05D8])
	 */
	class AFGBuildableConveyorAttachment : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_47OD[0x8];                                   // 0x05D8(0x0008) Fix Super Size
		class UFGInventoryComponent*                               mBufferInventory;                                        // 0x05E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J8E1[0x28];                                  // 0x05E8(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableAttachmentMerger
	 * Size -> 0x0010 (FullSize[0x0620] - InheritedSize[0x0610])
	 */
	class AFGBuildableAttachmentMerger : public AFGBuildableConveyorAttachment
	{
	public:
		int32_t                                                    mCurrentInputIndex;                                      // 0x0610(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LV40[0xC];                                   // 0x0614(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableAttachmentSplitter
	 * Size -> 0x0010 (FullSize[0x0620] - InheritedSize[0x0610])
	 */
	class AFGBuildableAttachmentSplitter : public AFGBuildableConveyorAttachment
	{
	public:
		int32_t                                                    mCurrentOutputIndex;                                     // 0x0610(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KH74[0xC];                                   // 0x0614(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableFactory
	 * Size -> 0x0128 (FullSize[0x0700] - InheritedSize[0x05D8])
	 */
	class AFGBuildableFactory : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_NTJR[0x8];                                   // 0x05D8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_Y7VT[0x8];                                   // 0x05E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPowerConsumption;                                       // 0x05E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mPowerConsumptionExponent;                               // 0x05EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mPowerInfoClass;                                         // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mDoesHaveShutdownAnimation;                              // 0x05F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5J35[0x7];                                   // 0x05F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPowerInfoComponent*                               mPowerInfo;                                              // 0x0600(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnHasPowerChanged;                                      // 0x0608(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnHasProductionChanged;                                 // 0x0618(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnHasStandbyChanged;                                    // 0x0628(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		float                                                      mMinimumProducingTime;                                   // 0x0638(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMinimumStoppedTime;                                     // 0x063C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTimeSinceStartStopProducing;                            // 0x0640(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TGB5[0x1];                                   // 0x0644(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mCanEverMonitorProductivity;                             // 0x0645(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanChangePotential;                                     // 0x0646(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z2PR[0x1];                                   // 0x0647(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPendingPotential;                                       // 0x0648(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMinPotential;                                           // 0x064C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxPotential;                                           // 0x0650(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxPotentialIncreasePerCrystal;                         // 0x0654(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EStackSize                                                 mFluidStackSizeDefault;                                  // 0x0658(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OY1A[0x3];                                   // 0x0659(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mFluidStackSizeMultiplier;                               // 0x065C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsProductionPaused;                                     // 0x0660(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FK8T[0x7];                                   // 0x0661(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGReplicationDetailActor*                           mReplicationDetailActor;                                 // 0x0668(0x0008) Net, ZeroConstructor, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnReplicationDetailActorCreatedEvent;                    // 0x0670(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UFGInventoryComponent*                               mInventoryPotential;                                     // 0x0680(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FReplicationDetailData                              mInventoryPotentialHandlerData;                          // 0x0688(0x0028) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		float                                                      mCurrentPotential;                                       // 0x06B0(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mEffectUpdateInterval;                                   // 0x06B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1346[0xC];                                   // 0x06B8(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDefaultProductivityMeasurementDuration;                 // 0x06C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mLastProductivityMeasurementProduceDuration;             // 0x06C8(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mLastProductivityMeasurementDuration;                    // 0x06CC(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mCurrentProductivityMeasurementProduceDuration;          // 0x06D0(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mCurrentProductivityMeasurementDuration;                 // 0x06D4(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              mCurrentProductivity;                                    // 0x06D8(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mProductivityMonitorEnabled : 1;                         // 0x06D9(0x0001) BIT_FIELD SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsProducing : 1;                                        // 0x06D9(0x0001) BIT_FIELD Net, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       UnknownData_EIMQ : 1;                                    // 0x06D9(0x0001) BIT_FIELD (PADDING)
		bool                                                       mHasPower : 1;                                           // 0x06D9(0x0001) BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F6MM[0x6];                                   // 0x06DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USkeletalMeshComponent*>                      mCachedSkeletalMeshes;                                   // 0x06E0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		bool                                                       mAddToSignificanceManager : 1;                           // 0x06F0(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RSHD[0x3];                                   // 0x06F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSignificanceRange;                                      // 0x06F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTickExponent;                                           // 0x06F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4OJX[0x4];                                   // 0x06FC(0x0004) MISSED OFFSET (PADDING)

	public:
		void TryStopProductionLoopEffects(bool didStopProducing);
		void TryStopIdlingLoopEffects(bool didLosePower);
		void TryStartProductionLoopEffects(bool didStartProducing);
		void TryStartIdlingLoopEffects(bool didGainPower);
		void StopProductionLoopEffects(bool didStopProducing);
		void StopIdlingLoopEffects(bool didLosePower);
		void StartProductionLoopEffects(bool didStartProducing);
		void StartIdlingLoopEffects(bool didGainPower);
		void SetPendingPotential(float newPendingPotential);
		void SetIsProductionPaused(bool IsPaused);
		bool RunsOnPower();
		void ReceiveUpdateEffects(float DeltaSeconds);
		void OnRep_ReplicationDetailActor();
		void OnRep_IsProductionPaused();
		void OnRep_IsProducing();
		void OnRep_CurrentPotential();
		void OnPotentialInventoryItemRemoved(class UClass* ItemClass, int32_t numRemoved);
		void OnIsProducingChanged_Native(bool newIsProducing);
		void OnIsProducingChanged(bool newIsProducing);
		void OnHasPowerChanged_Native(bool newHasPower);
		void OnHasPowerChanged(bool newHasPower);
		void OnCurrentPotentialChanged(float newCurrentPotential);
		bool IsProductionPaused();
		bool IsProducing();
		bool IsConfigured();
		bool HasValidReplicationDetailActor();
		bool HasPower();
		int32_t GetScaledFluidStackSize();
		float GetProductivityMeasurementDuration();
		float GetProductivity();
		float GetProductionProgress();
		EProductionStatus GetProductionIndicatorStatus();
		float GetProductionCycleTimeForRecipe(class UClass* recipe);
		float GetProductionCycleTime();
		float GetProducingPowerConsumption();
		class UFGPowerInfoComponent* GetPowerInfo();
		class UFGInventoryComponent* GetPotentialInventory();
		float GetPendingPotential();
		float GetMinPotential();
		float GetMaxPossiblePotential();
		bool GetIsSignificant();
		float GetFluidInventoryStackSizeScalar();
		float GetDefaultProductionCycleTime();
		float GetDefaultProducingPowerConsumption();
		float GetCurrentPotential();
		float GetCurrentMaxPotential();
		TArray<class UFGFactoryConnectionComponent*> GetConnectionComponents();
		bool GetCanChangePotential();
		bool FilterPotentialInventoryClasses(class UClass* Object, int32_t idx);
		void Factory_ReceiveTickProducing(float DeltaTime);
		void Factory_ReceiveStopProducing();
		void Factory_ReceiveStartProducing();
		void Factory_PushPipeOutput(float dt);
		void Factory_PullPipeInput(float dt);
		void Factory_ProductionCycleCompleted(float overProductionRate);
		void Factory_CollectInput();
		bool CanProduce();
		float CalcProductionCycleTimeForPotential(float potential);
		float CalcProducingPowerConsumptionForPotential(float potential);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableManufacturer
	 * Size -> 0x00DC (FullSize[0x07DC] - InheritedSize[0x0700])
	 */
	class AFGBuildableManufacturer : public AFGBuildableFactory
	{
	public:
		unsigned char                                              UnknownData_B52A[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mCurrentRecipeChanged;                                   // 0x0708(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		float                                                      mManufacturingSpeed;                                     // 0x0718(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCurrentManufacturingProgress;                           // 0x071C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGInventoryComponent*                               mInputInventory;                                         // 0x0720(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGFactoryConnectionComponent*>               mFactoryInputConnections;                                // 0x0728(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGPipeConnectionComponent*>                  mPipeInputConnections;                                   // 0x0738(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGFactoryConnectionComponent*>               mFactoryOutputConnections;                               // 0x0748(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGPipeConnectionComponent*>                  mPipeOutputConnections;                                  // 0x0758(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UFGInventoryComponent*                               mOutputInventory;                                        // 0x0768(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FReplicationDetailData                              mInputInventoryHandlerData;                              // 0x0770(0x0028) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FReplicationDetailData                              mOutputInventoryHandlerData;                             // 0x0798(0x0028) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mCurrentRecipe;                                          // 0x07C0(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGRecipe*                                           mCachedRecipe;                                           // 0x07C8(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E7MD[0xC];                                   // 0x07D0(0x000C) Fix size for supers

	public:
		void SetRecipe(class UClass* recipe);
		void OnRep_CurrentRecipe();
		bool MoveOrDropOutputInventory(class AFGCharacterPlayer* Pawn);
		bool MoveOrDropInputInventory(class AFGCharacterPlayer* Pawn);
		void InvalidateCacheCanProduce_OutputItemRemoved(class UClass* ItemClass, int32_t numAdded);
		void InvalidateCacheCanProduce_OutputItemAdded(class UClass* ItemClass, int32_t numAdded);
		void InvalidateCacheCanProduce_InputItemRemoved(class UClass* ItemClass, int32_t numAdded);
		void InvalidateCacheCanProduce_InputItemAdded(class UClass* ItemClass, int32_t numAdded);
		class UFGInventoryComponent* GetOutputInventory();
		float GetManufacturingSpeed();
		class UFGInventoryComponent* GetInputInventory();
		class UClass* GetCurrentRecipe();
		void GetAvailableRecipes(TArray<class UClass*>* out_recipes);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableAutomatedWorkBench
	 * Size -> 0x0004 (FullSize[0x07E0] - InheritedSize[0x07DC])
	 */
	class AFGBuildableAutomatedWorkBench : public AFGBuildableManufacturer
	{
	public:
		unsigned char                                              UnknownData_6PFJ[0x4];                                   // 0x07DC(0x0004) Fix Super Size

	public:
		void SetManufacturingSpeed(float newManufacturingSpeed);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBeamAttachmentPoint
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UFGBeamAttachmentPoint : public UFGAttachmentPointType
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableFactoryBuilding
	 * Size -> 0x0010 (FullSize[0x05E8] - InheritedSize[0x05D8])
	 */
	class AFGBuildableFactoryBuilding : public AFGBuildable
	{
	public:
		class UFGColoredInstanceMeshProxy*                         mMeshComponentProxy;                                     // 0x05D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mCustomRainBoundsMesh;                                   // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableBeam
	 * Size -> 0x0098 (FullSize[0x0680] - InheritedSize[0x05E8])
	 */
	class AFGBuildableBeam : public AFGBuildableFactoryBuilding
	{
	public:
		unsigned char                                              UnknownData_EE5I[0x4];                                   // 0x05E8(0x0004) Fix Super Size
		float                                                      mDefaultLength;                                          // 0x05EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxLength;                                              // 0x05F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLength;                                                 // 0x05F4(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VQ1R[0x88];                                  // 0x05F8(0x0088) MISSED OFFSET (PADDING)

	public:
		void OnRep_Length();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableBeamLightweight
	 * Size -> 0x0000 (FullSize[0x0680] - InheritedSize[0x0680])
	 */
	class AFGBuildableBeamLightweight : public AFGBuildableBeam
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableBlueprintDesigner
	 * Size -> 0x0118 (FullSize[0x06F0] - InheritedSize[0x05D8])
	 */
	class AFGBuildableBlueprintDesigner : public AFGBuildable
	{
	public:
		class UBoxComponent*                                       mCollisionComponent;                                     // 0x05D8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                mDesignerBoxMesh;                                        // 0x05E0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGColoredInstanceMeshProxy*                         mTerminalMesh;                                           // 0x05E8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UInstancedStaticMeshComponent*                       mFloorMeshComponent;                                     // 0x05F0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     mRefundLocationComponent;                                // 0x05F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mFloorMeshTile;                                          // 0x0600(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mTerminalDistanceFromEdge;                               // 0x0608(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mTerminalHalfDepth;                                      // 0x060C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FIntVector                                          mDimensions;                                             // 0x0610(0x000C) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GXIK[0x4];                                   // 0x061C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnRecordDataChanged;                                     // 0x0620(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnBlueprintCostChanged;                                  // 0x0630(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              mDefaultStorageRecipe;                                   // 0x0640(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FItemAmount>                                 mCurrentCost;                                            // 0x0648(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
		class AFGBuildableStorage*                                 mStorage;                                                // 0x0658(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USceneComponent*                                     mStorageLocation;                                        // 0x0660(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AFGBuildable*>                                mBuildables;                                             // 0x0668(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPrivate
		TArray<class UFGClearanceComponent*>                       mIntersectComponents;                                    // 0x0678(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		struct FBlueprintRecord                                    mCurrentRecordData;                                      // 0x0688(0x0050) Net, SaveGame, RepNotify, NativeAccessSpecifierPrivate
		class UFGBlueprintDescriptor*                              mCurrentBlueprintDescriptor;                             // 0x06D8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsDismantlingAll;                                       // 0x06E0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_I8HB[0xF];                                   // 0x06E1(0x000F) MISSED OFFSET (PADDING)

	public:
		void SaveBlueprint(const struct FBlueprintRecord& BlueprintRecord, class AFGPlayerController* Controller);
		void OnRep_Storage();
		void OnRep_RecordData();
		void OnRep_CostChanged();
		void OnRep_Buildables();
		EBlueprintDesignerLoadResult LoadBlueprintIntoDesigner(class UFGBlueprintDescriptor* blueprintDescriptor, class AFGPlayerController* Controller);
		bool IsEdittingExistingBlueprint();
		TArray<struct FItemAmount> GetItemCost();
		class UFGBlueprintDescriptor* GetCurrentDescriptor();
		struct FBlueprintRecord GetCurrentBlueprintRecord();
		struct FIntVector GetBlueprintDimensions();
		void DismantleCurrentBuildables(class AFGPlayerController* Controller);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableCalendar
	 * Size -> 0x0098 (FullSize[0x0670] - InheritedSize[0x05D8])
	 */
	class AFGBuildableCalendar : public AFGBuildable
	{
	public:
		class UFGInventoryComponent*                               mInventory;                                              // 0x05D8(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mNumberOfSlotsInCalendar;                                // 0x05E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PTK3[0x4];                                   // 0x05E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mCalendarRewardsClass;                                   // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<int32_t, int32_t>                                     mInventoryIndexToRandomRewardIndexMapping;               // 0x05F0(0x0050) Protected, NativeAccessSpecifierProtected
		TArray<struct FSlotIndextoRandomRewardMapping>             mReplicatedIndexMapping;                                 // 0x0640(0x0010) Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<int32_t>                                            mOpenedSlotsInCalendar;                                  // 0x0650(0x0010) Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mSlotFillerItemClass;                                    // 0x0660(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4NZ0[0x8];                                   // 0x0668(0x0008) MISSED OFFSET (PADDING)

	public:
		void OpenSlot(int32_t dayNumber);
		void OnInventoryItemRemoved(class UClass* ItemClass, int32_t numRemoved);
		bool IsSlotOpened(int32_t dayNumber);
		class UFGUnlock* GetUnlockOnSlot(int32_t dayNumber);
		int32_t GetNumberOfSlotsInCalendar();
		class UFGInventoryComponent* GetInventory();
		bool GetContentOnSlot(int32_t dayNumber, struct FInventoryStack* out_slotContent);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableCheatFluidSink
	 * Size -> 0x0090 (FullSize[0x0790] - InheritedSize[0x0700])
	 */
	class AFGBuildableCheatFluidSink : public AFGBuildableFactory
	{
	public:
		unsigned char                                              UnknownData_QD8P[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsEnabled;                                              // 0x0708(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ABF0[0x3];                                   // 0x0709(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSinkRate;                                               // 0x070C(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMeasuredSinkRate;                                       // 0x0710(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMinimumContent;                                         // 0x0714(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMinimumPressure;                                        // 0x0718(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MT1C[0x4];                                   // 0x071C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPipeConnectionComponent*                          mInputConnection;                                        // 0x0720(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FFluidBox                                           mFluidBox;                                               // 0x0728(0x005C) SaveGame, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O8RI[0xC];                                   // 0x0784(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetEnabled(bool IsEnabled);
		bool IsEnabled();
		float GetMaxContent();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableCheatFluidSpawner
	 * Size -> 0x0090 (FullSize[0x0790] - InheritedSize[0x0700])
	 */
	class AFGBuildableCheatFluidSpawner : public AFGBuildableFactory
	{
	public:
		unsigned char                                              UnknownData_MFUL[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsEnabled;                                              // 0x0708(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6GH8[0x7];                                   // 0x0709(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mResourceType;                                           // 0x0710(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSpawnRate;                                              // 0x0718(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMeasuredSpawnRate;                                      // 0x071C(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mPressure;                                               // 0x0720(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2V5B[0x4];                                   // 0x0724(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPipeConnectionComponent*                          mOutputConnection;                                       // 0x0728(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FFluidBox                                           mFluidBox;                                               // 0x0730(0x005C) SaveGame, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PQX0[0x4];                                   // 0x078C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetResourceType(class UClass* Type);
		void SetEnabled(bool IsEnabled);
		bool IsEnabled();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableCircuitBridge
	 * Size -> 0x0028 (FullSize[0x0600] - InheritedSize[0x05D8])
	 */
	class AFGBuildableCircuitBridge : public AFGBuildable
	{
	public:
		class FScriptMulticastDelegate                             mOnCircuitsChanged;                                      // 0x05D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       mIsBridgeConnected;                                      // 0x05E8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PWS0[0x7];                                   // 0x05E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGCircuitConnectionComponent*>               mConnections;                                            // 0x05F0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		void OnRep_IsBridgeConnected();
		void OnCircuitsChanged__DelegateSignature();
		class UFGCircuitConnectionComponent* GetConnection1();
		class UFGCircuitConnectionComponent* GetConnection0();
		int32_t GetCircuitID1();
		int32_t GetCircuitID0();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableCircuitSwitch
	 * Size -> 0x0050 (FullSize[0x0650] - InheritedSize[0x0600])
	 */
	class AFGBuildableCircuitSwitch : public AFGBuildableCircuitBridge
	{
	public:
		unsigned char                                              UnknownData_JDUH[0x8];                                   // 0x0600(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnIsSwitchOnChanged;                                    // 0x0608(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnIsConnectedChanged;                                   // 0x0618(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnBuildingTagChanged;                                   // 0x0628(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       mIsSwitchOn;                                             // 0x0638(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasBuildingTag;                                         // 0x0639(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SPC0[0x6];                                   // 0x063A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              mBuildingTag;                                            // 0x0640(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetSwitchOn(bool IsSwitchOn);
		void OnRep_IsSwitchOn();
		void OnRep_HasBuildingTag();
		void OnRep_BuildingTag();
		void OnIsSwitchOnChanged();
		void OnIsSwitchConnectedChanged();
		void OnBuildingTagChanged(bool HasTag, const class FString& Tag);
		bool IsSwitchOn();
		bool IsSwitchConnected();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableControlPanelHost
	 * Size -> 0x0030 (FullSize[0x0630] - InheritedSize[0x0600])
	 */
	class AFGBuildableControlPanelHost : public AFGBuildableCircuitBridge
	{
	public:
		class FScriptMulticastDelegate                             mOnControlledBuildablesChanged;                          // 0x0600(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UFGCircuitConnectionComponent*                       mDownstreamConnection;                                   // 0x0610(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mControlledBuildableType;                                // 0x0618(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AFGBuildable*>                                mControlledBuildables;                                   // 0x0620(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void OnPropertyChanged__DelegateSignature();
		TArray<class AFGBuildable*> GetControlledBuildables(class UClass* OutputType);
		void ControlledBuildablesChanged();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableConveyorAttachmentLightweight
	 * Size -> 0x0000 (FullSize[0x0610] - InheritedSize[0x0610])
	 */
	class AFGBuildableConveyorAttachmentLightweight : public AFGBuildableConveyorAttachment
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorRemoteCallObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGConveyorRemoteCallObject : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGConveyorRemoteCallObject;              // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HWAG[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void Server_ReportInvalidStateAndRequestConveyorRepReset(class AFGBuildableConveyorBase* Target);
		void Server_OnUse(class AFGBuildableConveyorBelt* Target, class AFGCharacterPlayer* byCharacter, uint32_t itemRepID, float ItemOffset);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableConveyorBase
	 * Size -> 0x0150 (FullSize[0x0728] - InheritedSize[0x05D8])
	 */
	class AFGBuildableConveyorBase : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_12HS[0x8];                                   // 0x05D8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_ITYG[0x4];                                   // 0x05E0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSpeed;                                                  // 0x05E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_06FM[0x8];                                   // 0x05E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FConveyorBeltItems                                  mItems;                                                  // 0x05F0(0x00A8) Net, Protected, NativeAccessSpecifierProtected
		class UFGFactoryConnectionComponent*                       mConnection0;                                            // 0x0698(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGFactoryConnectionComponent*                       mConnection1;                                            // 0x06A0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A6QS[0x8];                                   // 0x06A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableConveyorBase*                            mNextConveyor;                                           // 0x06B0(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              mConveyorChainFlags;                                     // 0x06B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QEZ1[0x7];                                   // 0x06B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UInstancedStaticMeshComponent*>               mFrozenItemsInstancedStaticMeshComponents;               // 0x06C0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YQ1Z[0x58];                                  // 0x06D0(0x0058) Fix size for supers

	public:
		bool GetIsSignificant();
		void DestroyStaticItemInstances();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGUseState : public UObject
	{
	public:
		bool                                                       mWantAdditonalData;                                      // 0x0028(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsUsableState;                                          // 0x0029(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MP1A[0x6];                                   // 0x002A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_ConveyorBeltValid
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UFGUseState_ConveyorBeltValid : public UFGUseState
	{
	public:
		unsigned char                                              UnknownData_8ODR[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_ConveyorBeltFullInventory
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UFGUseState_ConveyorBeltFullInventory : public UFGUseState
	{
	public:
		unsigned char                                              UnknownData_BR3I[0x8];                                   // 0x0030(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_ConveyorBeltEmpty
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_ConveyorBeltEmpty : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableConveyorBelt
	 * Size -> 0x00A8 (FullSize[0x07D0] - InheritedSize[0x0728])
	 */
	class AFGBuildableConveyorBelt : public AFGBuildableConveyorBase
	{
	public:
		unsigned char                                              UnknownData_EBF3[0x8];                                   // 0x0728(0x0008) Fix Super Size
		class UStaticMesh*                                         mMesh;                                                   // 0x0730(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mCollisionProxyMesh;                                     // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMeshLength;                                             // 0x0740(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IRZZ[0x4];                                   // 0x0744(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, class UInstancedStaticMeshComponent*>    mItemMeshMap;                                            // 0x0748(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<struct FSplinePointData>                            mSplineData;                                             // 0x0798(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		class USplineComponent*                                    mSplineComponent;                                        // 0x07A8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGConveyorInstancedSplineMeshComponent*             mInstancedSplineComponent_;                              // 0x07B0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGSoundSplineComponent*                             mSoundSplineComponent;                                   // 0x07B8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       mSplineAudioEvent;                                       // 0x07C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RGT5[0x8];                                   // 0x07C8(0x0008) MISSED OFFSET (PADDING)

	public:
		class UStaticMesh* GetSplineMesh();
		class USplineComponent* GetSplineComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableConveyorLiftSparseData
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UFGBuildableConveyorLiftSparseData : public UObject
	{
	public:
		float                                                      mMeshHeight;                                             // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1AZR[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mBottomMesh;                                             // 0x0030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mMidMesh;                                                // 0x0038(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mHalfMidMesh;                                            // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mTopMesh;                                                // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mBellowMesh;                                             // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mJointMesh;                                              // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mShelfMesh;                                              // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableConveyorLift
	 * Size -> 0x0118 (FullSize[0x0840] - InheritedSize[0x0728])
	 */
	class AFGBuildableConveyorLift : public AFGBuildableConveyorBase
	{
	public:
		class UFGBuildableConveyorLiftSparseData*                  mConveyorLiftSparesDataCDO;                              // 0x0728(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMeshHeight;                                             // 0x0730(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6PLQ[0x4];                                   // 0x0734(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mBottomMesh;                                             // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mMidMesh;                                                // 0x0740(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mHalfMidMesh;                                            // 0x0748(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mTopMesh;                                                // 0x0750(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mBellowMesh;                                             // 0x0758(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mJointMesh;                                              // 0x0760(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mShelfMesh;                                              // 0x0768(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTransform                                          mTopTransform;                                           // 0x0770(0x0060) Net, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsReversed;                                             // 0x07D0(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4Q6C[0x7];                                   // 0x07D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, class UInstancedStaticMeshComponent*>    mItemMeshMap;                                            // 0x07D8(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class AFGBuildablePassthrough*>                     mSnappedPassthroughs;                                    // 0x0828(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		class UStaticMeshComponent*                                mVisibilityComponent;                                    // 0x0838(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnRep_TopTransform();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableCornerWall
	 * Size -> 0x0018 (FullSize[0x0600] - InheritedSize[0x05E8])
	 */
	class AFGBuildableCornerWall : public AFGBuildableFactoryBuilding
	{
	public:
		unsigned char                                              UnknownData_POYV[0x4];                                   // 0x05E8(0x0004) Fix Super Size
		float                                                      mHeight;                                                 // 0x05EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsInverted;                                             // 0x05F0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EC74[0xF];                                   // 0x05F1(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableDecor
	 * Size -> 0x0008 (FullSize[0x05E0] - InheritedSize[0x05D8])
	 */
	class AFGBuildableDecor : public AFGBuildable
	{
	public:
		class UStaticMesh*                                         mDecorMesh;                                              // 0x05D8(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetDecorMesh(class UStaticMesh* Mesh);
		class UStaticMesh* GetDecorMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableDockingStation
	 * Size -> 0x01E0 (FullSize[0x08E0] - InheritedSize[0x0700])
	 */
	class AFGBuildableDockingStation : public AFGBuildableFactory
	{
	public:
		class FScriptMulticastDelegate                             VehicleFuelConsumptionRateChangedDelegate;               // 0x0700(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ItemTransferRateChangedDelegate;                         // 0x0710(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             MaximumStackTransferRateChangedDelegate;                 // 0x0720(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FVector2D                                           mDockPosition;                                           // 0x0730(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMinimumDockingTime;                                     // 0x0740(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KCG5[0x4];                                   // 0x0744(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UBoxComponent*                                       mDockArea;                                               // 0x0748(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZK3H[0x8];                                   // 0x0750(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x0758(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int8_t                                                     mStorageSizeX;                                           // 0x0760(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int8_t                                                     mStorageSizeY;                                           // 0x0761(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int8_t                                                     mFuelInventorySizeX;                                     // 0x0762(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int8_t                                                     mFuelInventorySizeY;                                     // 0x0763(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTransferSpeed;                                          // 0x0764(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFuelTransferSpeed;                                      // 0x0768(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTransferProgress;                                       // 0x076C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FReplicationDetailData                              mFuelInventoryHandlerData;                               // 0x0770(0x0028) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FReplicationDetailData                              mInventoryHandlerData;                                   // 0x0798(0x0028) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PK0W[0x20];                                  // 0x07C0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              mDockedActor;                                            // 0x07E0(0x0008) ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KDZH[0x8];                                   // 0x07E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mHasDockedActor : 1;                                     // 0x07F0(0x0001) BIT_FIELD SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsInLoadMode;                                           // 0x07F1(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GISC[0x2];                                   // 0x07F2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mStackTransferSize;                                      // 0x07F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsLoadUnloading;                                        // 0x07F8(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NT3Z[0x7];                                   // 0x07F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGDockingStationInfo*                               mInfo;                                                   // 0x0800(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGDockingStationInfo*                               mTempInfo;                                               // 0x0808(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInventoryComponent*                               mInventory;                                              // 0x0810(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInventoryComponent*                               mFuelInventory;                                          // 0x0818(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mForceSignificance;                                      // 0x0820(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YM54[0x3];                                   // 0x0821(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mVehicleFuelConsumptionRate;                             // 0x0824(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mItemTransferRate;                                       // 0x0828(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaximumStackTransferRate;                               // 0x082C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class AFGWheeledVehicle*, struct FDockingVehicleStatistics> mDockingVehicleStatistics;                               // 0x0830(0x0050) SaveGame, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WYE0[0x60];                                  // 0x0880(0x0060) MISSED OFFSET (PADDING)

	public:
		void VehicleFuelConsumptionRateChanged__DelegateSignature();
		void Undock(bool notifyDockedActor);
		void SetIsInLoadMode(bool isInLoadMode);
		void OnTransferComplete();
		void OnRep_VehicleFuelConsumptionRate();
		void OnRep_MaximumStackTransferRate();
		void OnRep_ItemTransferRate();
		void OnRep_FuelInventory();
		void OnDockingAreaEndOverlap(class UPrimitiveComponent* thisComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex);
		void OnDockingAreaBeginOverlap(class UPrimitiveComponent* thisComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex, bool isFromSweep, const struct FHitResult& SweepResult);
		void OnBeginUnloadVehicle();
		void OnBeginLoadVehicle();
		void MaximumStackTransferRateChanged__DelegateSignature();
		void ItemTransferRateChanged__DelegateSignature();
		bool IsLoadUnloading();
		float GetVehicleFuelConsumptionRate();
		float GetMaximumStackTransferRate();
		float GetItemTransferRate();
		bool GetIsInLoadMode();
		class UFGInventoryComponent* GetInventory();
		class AFGDockingStationInfo* GetInfo();
		class UFGInventoryComponent* GetFuelInventory();
		int32_t GetDockingVehicleCount();
		class AActor* GetDockedActor();
		struct FLinearColor GetDefaultRepresentationColor();
		class UBoxComponent* FindDockArea();
		bool FilterFuelClasses(class UClass* Object, int32_t idx);
		bool DockActor(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableWall
	 * Size -> 0x0028 (FullSize[0x0610] - InheritedSize[0x05E8])
	 */
	class AFGBuildableWall : public AFGBuildableFactoryBuilding
	{
	public:
		unsigned char                                              UnknownData_26XQ[0x4];                                   // 0x05E8(0x0004) Fix Super Size
		float                                                      mHeight;                                                 // 0x05EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mElevation;                                              // 0x05F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAngularDepth;                                           // 0x05F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EBuildableWallType                                         mWallType;                                               // 0x05F8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7XMU[0x7];                                   // 0x05F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mAngledVariants;                                         // 0x0600(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableDoor
	 * Size -> 0x0050 (FullSize[0x0660] - InheritedSize[0x0610])
	 */
	class AFGBuildableDoor : public AFGBuildableWall
	{
	public:
		unsigned char                                              UnknownData_QXLK[0x8];                                   // 0x0610(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EFactoryGame_EDoorState                                    mDoorState;                                              // 0x0618(0x0001) Edit, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EDoorConfiguration                                         mDoorConfiguration;                                      // 0x0619(0x0001) Edit, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UQFI[0x6];                                   // 0x061A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class APawn*>                                       mActiveOverlaps;                                         // 0x0620(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J154[0x10];                                  // 0x0630(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mCanBeLocked;                                            // 0x0640(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EDD3[0x3];                                   // 0x0641(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mAnimationRate;                                          // 0x0644(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMovementRate;                                           // 0x0648(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EEasingFunc                                                EasingFunction;                                          // 0x064C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_I382[0x3];                                   // 0x064D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      BlendExp;                                                // 0x0650(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    Steps;                                                   // 0x0654(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MH3D[0x8];                                   // 0x0658(0x0008) MISSED OFFSET (PADDING)

	public:
		void Update();
		void OnRep_DoorState();
		void OnRep_DoorConfiguration();
		void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnMovementStateChanged(EFactoryGame_EDoorState oldState, EFactoryGame_EDoorState NewState, float percentage);
		void OnFinishedOpening();
		void OnFinishedClosing();
		void OnEndOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnDoorConfigurationChanged(EDoorConfiguration NewState);
		void OnBeginOpening();
		void OnBeginClosing();
		class UFGColoredInstanceMeshProxy* GetDoorComponent();
		EDoorConfiguration GetCurrentDoorConfiguration();
		bool CanClose();
		bool CanBeLocked();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGVehicleHologram
	 * Size -> 0x0080 (FullSize[0x04E0] - InheritedSize[0x0460])
	 */
	class AFGVehicleHologram : public AFGHologram
	{
	public:
		struct FFactoryCustomizationData                           mCustomizationData;                                      // 0x0460(0x0078) Protected, NativeAccessSpecifierProtected
		class UClass*                                              mDefaultSwatch;                                          // 0x04D8(0x0008) ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableDroneHologram
	 * Size -> 0x0010 (FullSize[0x04F0] - InheritedSize[0x04E0])
	 */
	class AFGBuildableDroneHologram : public AFGVehicleHologram
	{
	public:
		class AFGBuildableDroneStation*                            mSnappedStation;                                         // 0x04E0(0x0008) Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UAYQ[0x8];                                   // 0x04E8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableDroneStation
	 * Size -> 0x0190 (FullSize[0x0890] - InheritedSize[0x0700])
	 */
	class AFGBuildableDroneStation : public AFGBuildableFactory
	{
	public:
		unsigned char                                              UnknownData_IH2J[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mDroneDockingStartLocationLocal;                         // 0x0708(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mDroneDockingLocationLocal;                              // 0x0720(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mDroneClass;                                             // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mBatteryClasses;                                         // 0x0740(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate
		class UClass*                                              mUIBatteryCostItemClass;                                 // 0x0750(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AFGDroneVehicle*>                             mDroneDockingQueue;                                      // 0x0758(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		bool                                                       mStationHasDronesInQueue;                                // 0x0768(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_K0JV[0x7];                                   // 0x0769(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGDroneVehicle*                                     mRecentlyDockedDrone;                                    // 0x0770(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EItemTransferringStage                                     mItemTransferringStage;                                  // 0x0778(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QMYO[0x3];                                   // 0x0779(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mTransferProgress;                                       // 0x077C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTransferSpeed;                                          // 0x0780(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mStackTransferSize;                                      // 0x0784(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mDroneQueueRadius;                                       // 0x0788(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mDroneQueueSeparationRadius;                             // 0x078C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mDroneQueueVerticalSeparation;                           // 0x0790(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTripPowerCost;                                          // 0x0794(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTripPowerPerMeterCost;                                  // 0x0798(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mTripInformationSampleCount;                             // 0x079C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGDroneVehicle*                                     mStationDrone;                                           // 0x07A0(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGDroneVehicle*                                     mDockedDrone;                                            // 0x07A8(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int8_t                                                     mStorageSizeX;                                           // 0x07B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int8_t                                                     mStorageSizeY;                                           // 0x07B1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int8_t                                                     mBatteryStorageSizeX;                                    // 0x07B2(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int8_t                                                     mBatteryStorageSizeY;                                    // 0x07B3(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OABM[0x4];                                   // 0x07B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FReplicationDetailData                              mInputInventoryHandler;                                  // 0x07B8(0x0028) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		struct FReplicationDetailData                              mOutputInventoryHandler;                                 // 0x07E0(0x0028) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		struct FReplicationDetailData                              mBatteryInventoryHandler;                                // 0x0808(0x0028) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class UFGInventoryComponent*                               mInputInventory;                                         // 0x0830(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInventoryComponent*                               mOutputInventory;                                        // 0x0838(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInventoryComponent*                               mBatteryInventory;                                       // 0x0840(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_P8JH[0x10];                                  // 0x0848(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGDroneStationInfo*                                 mInfo;                                                   // 0x0858(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGDroneStationInfo*                                 mTempInfo;                                               // 0x0860(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x0868(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FText                                                mMapText;                                                // 0x0870(0x0018) Net, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PJ36[0x8];                                   // 0x0888(0x0008) MISSED OFFSET (PADDING)

	public:
		bool UpdateRepresentation();
		void StartTakeoffSequence(class AFGDroneVehicle* Drone);
		void StartDockingSequence(class AFGDroneVehicle* Drone);
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		int32_t RequestDocking(class AFGDroneVehicle* DroneToDock);
		bool RemoveAsRepresentation();
		void OnStationHasDroneQueueUpdated(bool StationHasDroneQueue);
		void OnRep_StationHasDronesInQueue();
		void OnRep_ItemTransferringStage();
		void OnRep_DroneStationInfo();
		void OnDockingStateChanged(EDroneDockingState NewState, float TimeSinceChanged);
		bool IsTransferringItems();
		bool IsDroneInQueue(class AFGDroneVehicle* Drone);
		bool IsActorStatic();
		bool HasDronesInQueue();
		int32_t GetTripInformationSampleCount();
		class AFGDroneVehicle* GetStationDrone();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		class UFGInventoryComponent* GetOutputInventory();
		EItemTransferringStage GetItemTransferringStage();
		class UFGInventoryComponent* GetInputInventory();
		class AFGDroneStationInfo* GetInfo();
		float GetDroneQueueVerticalSeparation();
		float GetDroneQueueSeparationRadius();
		float GetDroneQueueRadius();
		struct FVector GetDroneDockingStartLocation();
		struct FVector GetDroneDockingLocation();
		class AFGDroneVehicle* GetDockedDrone();
		struct FLinearColor GetDefaultRepresentationColor();
		class UFGInventoryComponent* GetBatteryInventory();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		bool FilterBatteryClasses(class UClass* Object, int32_t idx);
		void EndTakeoffSequence(class AFGDroneVehicle* Drone);
		void EndDockingSequence(class AFGDroneVehicle* Drone, bool ShouldTransferItems);
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableFactoryBuildingLightweight
	 * Size -> 0x0008 (FullSize[0x05F0] - InheritedSize[0x05E8])
	 */
	class AFGBuildableFactoryBuildingLightweight : public AFGBuildableFactoryBuilding
	{
	public:
		unsigned char                                              UnknownData_04Z3[0x8];                                   // 0x05E8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableFactorySimpleProducer
	 * Size -> 0x0020 (FullSize[0x0720] - InheritedSize[0x0700])
	 */
	class AFGBuildableFactorySimpleProducer : public AFGBuildableFactory
	{
	public:
		class UClass*                                              mItemType;                                               // 0x0700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTimeToProduceItem;                                      // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EEvents                                                    mEventType;                                              // 0x070C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T5NV[0x13];                                  // 0x070D(0x0013) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableLightSource
	 * Size -> 0x0048 (FullSize[0x0620] - InheritedSize[0x05D8])
	 */
	class AFGBuildableLightSource : public AFGBuildable
	{
	public:
		class FScriptMulticastDelegate                             OnBuildableLightSourceStateChanged;                      // 0x05D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       mIsEnabled;                                              // 0x05E8(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JNF8[0x3];                                   // 0x05E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FLightSourceControlData                             mLightControlData;                                       // 0x05EC(0x000C) Net, SaveGame, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		struct FLinearColor                                        mCurrentLightColor;                                      // 0x05F8(0x0010) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mPowerConsumption;                                       // 0x0608(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KNMA[0x4];                                   // 0x060C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPowerInfoComponent*                               mPowerInfo;                                              // 0x0610(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasPower;                                               // 0x0618(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsDay;                                                  // 0x0619(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_COQR[0x6];                                   // 0x061A(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetLightEnabled(bool IsEnabled);
		void SetLightControlData(const struct FLightSourceControlData& Data);
		void OnUpdateMeshInfo(bool IsEnabled);
		void OnTimeOfDayChangedEvent(bool IsDay);
		void OnTimeOfDayChanged(bool IsDay);
		void OnRep_LightControlData();
		void OnRep_IsEnabled();
		void OnRep_IsDay();
		void OnRep_HasPower();
		void OnLightControlDataSet(const struct FLightSourceControlData& Data);
		bool IsLightEnabled();
		bool HasPower();
		struct FLightSourceControlData GetLightControlData();
		float GetDefaultPowerConsumption();
		struct FLinearColor GetCurrentLightColor();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableFloodlight
	 * Size -> 0x0010 (FullSize[0x0630] - InheritedSize[0x0620])
	 */
	class AFGBuildableFloodlight : public AFGBuildableLightSource
	{
	public:
		int32_t                                                    mFixtureAngle;                                           // 0x0620(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ESJT[0xC];                                   // 0x0624(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableFoundation
	 * Size -> 0x0018 (FullSize[0x0600] - InheritedSize[0x05E8])
	 */
	class AFGBuildableFoundation : public AFGBuildableFactoryBuilding
	{
	public:
		unsigned char                                              UnknownData_N6FH[0x4];                                   // 0x05E8(0x0004) Fix Super Size
		float                                                      mDepth;                                                  // 0x05EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mHeight;                                                 // 0x05F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mElevation;                                              // 0x05F4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsFrame;                                                // 0x05F8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFoundationSideSelectionFlags                       mDisableSnapOn;                                          // 0x05F9(0x0001) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		struct FFoundationSideSelectionFlags                       mDisableAttachmentSnapOn;                                // 0x05FA(0x0001) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6BVR[0x5];                                   // 0x05FB(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableFoundationLightweight
	 * Size -> 0x0000 (FullSize[0x0600] - InheritedSize[0x0600])
	 */
	class AFGBuildableFoundationLightweight : public AFGBuildableFoundation
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableResourceExtractorBase
	 * Size -> 0x0058 (FullSize[0x0758] - InheritedSize[0x0700])
	 */
	class AFGBuildableResourceExtractorBase : public AFGBuildableFactory
	{
	public:
		class UClass*                                              mRestrictToNodeType;                                     // 0x0700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<EResourceForm>                                      mAllowedResourceForms;                                   // 0x0708(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       mOnlyAllowCertainResources;                              // 0x0718(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7ESZ[0x7];                                   // 0x0719(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mAllowedResources;                                       // 0x0720(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UClass*                                              mMustPlaceOnResourceDisqualifier;                        // 0x0730(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mExtractorTypeName;                                      // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mTryFindMissingResource;                                 // 0x0740(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GU3K[0x7];                                   // 0x0741(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGResourceNode*                                     mExtractResourceNode;                                    // 0x0748(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              mExtractableResource;                                    // 0x0750(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnRep_ExtractableResource();
		class UParticleSystem* GetMiningParticle();
		void GetExtractableResource();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableFrackingActivator
	 * Size -> 0x0058 (FullSize[0x07B0] - InheritedSize[0x0758])
	 */
	class AFGBuildableFrackingActivator : public AFGBuildableResourceExtractorBase
	{
	public:
		class FScriptMulticastDelegate                             CurrentPotentialChangedDelegate;                         // 0x0758(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ConnectedExtractorCountChangedDelegate;                  // 0x0768(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      mActivationStartupTime;                                  // 0x0778(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mActivationStartupTimer;                                 // 0x077C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mSatelliteActivationComplete;                            // 0x0780(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OJ0E[0xB];                                   // 0x0781(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mSatelliteNodeCount;                                     // 0x078C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mConnectedExtractorCount;                                // 0x0790(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mDefaultPotentialExtractionPerMinute;                    // 0x0794(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mExtractorClass;                                         // 0x0798(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableFrackingExtractor*                       mDefaultExtractor;                                       // 0x07A0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QSDP[0x8];                                   // 0x07A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_ConnectedExtractorCount();
		void OnCurrentPotentialChanged__DelegateSignature(float currentPotentialChanged);
		void OnConnectedExtractorCountChanged__DelegateSignature(int32_t connectedExtractorCount);
		int32_t GetSatelliteNodeCount();
		float GetPotentialExtractionPerMinute();
		float GetDefaultPotentialExtractionPerMinute();
		int32_t GetConnectedExtractorCount();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableResourceExtractor
	 * Size -> 0x0098 (FullSize[0x07F0] - InheritedSize[0x0758])
	 */
	class AFGBuildableResourceExtractor : public AFGBuildableResourceExtractorBase
	{
	public:
		unsigned char                                              UnknownData_YPBH[0x8];                                   // 0x0758(0x0008) Fix Super Size
		unsigned char                                              UnknownData_00GP[0x20];                                  // 0x0760(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mExtractStartupTime;                                     // 0x0780(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mExtractStartupTimer;                                    // 0x0784(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mExtractCycleTime;                                       // 0x0788(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mItemsPerCycle;                                          // 0x078C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7T5D[0x4];                                   // 0x0790(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCurrentExtractProgress;                                 // 0x0794(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UFGPipeConnectionComponent*>                  mPipeOutputConnections;                                  // 0x0798(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class UFGInventoryComponent*                               mOutputInventory;                                        // 0x07A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C7JC[0x10];                                  // 0x07B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mReplicatedFlowRate;                                     // 0x07C0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZSXL[0x2C];                                  // 0x07C4(0x002C) MISSED OFFSET (PADDING)

	public:
		bool IsStartupComplete();
		class UFGInventoryComponent* GetOutputInventory();
		float GetNumExtractedItemsPerCycleConverted();
		int32_t GetNumExtractedItemsPerCycle();
		float GetMaxFlowRate();
		float GetFlowRateSmoothed();
		float GetExtractionPerMinute();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableFrackingExtractor
	 * Size -> 0x0010 (FullSize[0x0800] - InheritedSize[0x07F0])
	 */
	class AFGBuildableFrackingExtractor : public AFGBuildableResourceExtractor
	{
	public:
		unsigned char                                              UnknownData_RFU5[0x10];                                  // 0x07F0(0x0010) MISSED OFFSET (PADDING)

	public:
		void OnNodeStateChanged(EFrackingSatelliteState State);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableGenerator
	 * Size -> 0x0010 (FullSize[0x0710] - InheritedSize[0x0700])
	 */
	class AFGBuildableGenerator : public AFGBuildableFactory
	{
	public:
		float                                                      mPowerProduction;                                        // 0x0700(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLoadPercentage;                                         // 0x0704(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FIO4[0x8];                                   // 0x0708(0x0008) MISSED OFFSET (PADDING)

	public:
		float GetPowerProductionCapacity();
		float GetLoadPercentage();
		float GetDefaultPowerProductionCapacity();
		void Factory_TickPowerProduction(float dt);
		void Factory_StopPowerProduction();
		void Factory_StartPowerProduction();
		bool CanStartPowerProduction();
		float CalcPowerProductionCapacityForPotential(float potential);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableGeneratorFuel
	 * Size -> 0x00C8 (FullSize[0x07D8] - InheritedSize[0x0710])
	 */
	class AFGBuildableGeneratorFuel : public AFGBuildableGenerator
	{
	public:
		struct FReplicationDetailData                              mFuelInventoryHandlerData;                               // 0x0710(0x0028) NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mFuelClasses;                                            // 0x0738(0x0010) ZeroConstructor, Deprecated, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              mDefaultFuelClasses[0x10];                               // 0x0748(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<class UClass*>                                      mAvailableFuelClasses;                                   // 0x0758(0x0010) Net, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		EResourceForm                                              mFuelResourceForm;                                       // 0x0768(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YKQ4[0x3];                                   // 0x0769(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mFuelLoadAmount;                                         // 0x076C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mRequiresSupplementalResource;                           // 0x0770(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GAN7[0x7];                                   // 0x0771(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mSupplementalResourceClass;                              // 0x0778(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mSupplementalLoadAmount;                                 // 0x0780(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSupplementalToPowerRatio;                               // 0x0784(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsFullBlast;                                            // 0x0788(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7B7M[0x7];                                   // 0x0789(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGInventoryComponent*                               mFuelInventory;                                          // 0x0790(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGFactoryConnectionComponent*>               mCachedInputConnections;                                 // 0x0798(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGPipeConnectionComponent*>                  mCachedPipeInputConnections;                             // 0x07A8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F6TW[0x8];                                   // 0x07B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCurrentFuelAmount;                                      // 0x07C0(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCurrentSupplementalAmount;                              // 0x07C4(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasFuelCached;                                          // 0x07C8(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasSupplementalCached;                                  // 0x07C9(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NBIE[0x6];                                   // 0x07CA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mCurrentFuelClass;                                       // 0x07D0(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_FuelInventory();
		bool IsValidSupplementalResource(class UClass* Resource);
		bool IsValidFuel(class UClass* Resource);
		bool HasSupplementalResource();
		bool HasFuel();
		class UClass* GetSupplementalResourceClass();
		float GetSupplementalConsumptionRateMaximum();
		float GetSupplementalConsumptionRateCurrent();
		float GetSupplementalAmount();
		bool GetRequiresSupplementalResource();
		EResourceForm GetFuelResourceForm();
		class UFGInventoryComponent* GetFuelInventory();
		float GetFuelAmount();
		class UClass* GetCurrentFuelClass();
		TArray<class UClass*> GetAvailableFuelClasses();
		bool FilterFuelClasses(class UClass* Object, int32_t idx);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableGeneratorGeoThermal
	 * Size -> 0x0030 (FullSize[0x0740] - InheritedSize[0x0710])
	 */
	class AFGBuildableGeneratorGeoThermal : public AFGBuildableGenerator
	{
	public:
		class AFGResourceNode*                                     mExtractResourceNode;                                    // 0x0710(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              mExtractableResource;                                    // 0x0718(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         mPowerOutputCurve;                                       // 0x0720(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mVariablePowerProductionConstant;                        // 0x0728(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mVariablePowerProductionFactor;                          // 0x072C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mVariablePowerProductionCycleLength;                     // 0x0730(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMinPowerProduction;                                     // 0x0734(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaxPowerProduction;                                     // 0x0738(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mVariablePowerProductionCycleOffset;                     // 0x073C(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		float GetMinPowerProduction();
		float GetMaxPowerProduction();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableGeneratorNuclear
	 * Size -> 0x0038 (FullSize[0x0810] - InheritedSize[0x07D8])
	 */
	class AFGBuildableGeneratorNuclear : public AFGBuildableGeneratorFuel
	{
	public:
		class UFGInventoryComponent*                               mOutputInventory;                                        // 0x07D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FReplicationDetailData                              mOutputInventoryHandlerData;                             // 0x07E0(0x0028) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		int32_t                                                    mWasteLeftFromCurrentFuel;                               // 0x0808(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EGeneratorNuclearWarning                                   mCurrentGeneratorNuclearWarning;                         // 0x080C(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2JCV[0x3];                                   // 0x080D(0x0003) MISSED OFFSET (PADDING)

	public:
		class UFGInventoryComponent* GetWasteInventory();
		EGeneratorNuclearWarning GetCurrentGeneratorNuclearWarning();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableHubTerminal
	 * Size -> 0x0008 (FullSize[0x05E0] - InheritedSize[0x05D8])
	 */
	class AFGBuildableHubTerminal : public AFGBuildable
	{
	public:
		class AFGBuildableTradingPost*                             mTradingPost;                                            // 0x05D8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class AFGBuildableTradingPost* GetTradingPost();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableJumppad
	 * Size -> 0x0120 (FullSize[0x0820] - InheritedSize[0x0700])
	 */
	class AFGBuildableJumppad : public AFGBuildableFactory
	{
	public:
		float                                                      mPowerBankCapacity;                                      // 0x0700(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLaunchPowerCost;                                        // 0x0704(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mChargeRateMultiplier;                                   // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCurrentPowerLevel;                                      // 0x070C(0x0004) Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLaunchVelocity;                                         // 0x0710(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLaunchAngle;                                            // 0x0714(0x0004) Edit, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mPlayerChainJumpResetTime;                               // 0x0718(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasPowerForLaunch;                                      // 0x071C(0x0001) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E25A[0x3];                                   // 0x071D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UPrimitiveComponent*>                         ComponentsToLaunch;                                      // 0x0720(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class AFGCharacterBase*>                            CharactersToLaunch;                                      // 0x0730(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class AFGVehicle*>                                  VehiclesToLaunch;                                        // 0x0740(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UBoxComponent*                                       mLauncherBox;                                            // 0x0750(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTrajectoryData                                     mTrajectoryData;                                         // 0x0758(0x0030) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                mLauncherMeshComponent;                                  // 0x0788(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mTrajectoryMeshScale;                                    // 0x0790(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            mTrajectoryMeshRotation;                                 // 0x07A8(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      mDestinationMeshHeightOffset;                            // 0x07C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4LHZ[0x4];                                   // 0x07C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mDestinationMesh;                                        // 0x07C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mTrajectorySplineMesh;                                   // 0x07D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mTrajectorySplineMeshNumPrimitiveDataFloats;             // 0x07D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FSplineDataSettings                                 mTrajectorySplineMeshSplineDataSettings;                 // 0x07DC(0x0014) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    mNumArrows;                                              // 0x07F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_95Q1[0x4];                                   // 0x07F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInstancedSplineMeshComponent*                       mTrajectorySplineComponent;                              // 0x07F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                mDestinationMeshComponent;                               // 0x0800(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineComponent*                                    mSplineComponent;                                        // 0x0808(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        mKillTimer;                                              // 0x0810(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTrajectoryGravityMultiplier;                            // 0x0818(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mShowTrajectoryCounter;                                  // 0x081C(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FTrajectoryData STATIC_SimulateTrajectory(class UWorld* pWorld, const struct FVector& StartLocation, const struct FVector& LaunchVector, float GravityMultiplier, class AFGBuildableJumppad* pJumpPad);
		bool ShouldDisplayTrajectory();
		void SetTrajectoryVisibility(bool Visible);
		void SetLaunchAngle(float Angle);
		struct FTrajectoryData ResimulateTrajectory();
		void OnRep_LaunchAngle();
		void OnPlayerLaunched(class AFGCharacterPlayer* pPlayer, int32_t NumChainedBounces);
		void OnOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnLaunch(float HighestLaunchSpeed);
		void Launch();
		bool HasPowerForLaunch();
		struct FVector GetTrajectoryMeshScale();
		float GetTrajectoryGravityMultiplier();
		struct FTrajectoryData GetTrajectoryData();
		float GetPowerBankCapacity();
		int32_t GetNumAvailableCharges();
		float GetLaunchVelocity();
		float GetLaunchPowerCost();
		class UStaticMeshComponent* GetLauncherMeshComponent();
		class UBoxComponent* GetLauncherBoxComponent();
		struct FVector GetLaunchDirection();
		float GetCurrentPowerLevel();
		float GetChargeRateMultiplier();
		void DestroyVisualizer();
		struct FVector CalculateLaunchVelocity(const struct FVector& StartLocation, float Gravity);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableLadder
	 * Size -> 0x0048 (FullSize[0x0620] - InheritedSize[0x05D8])
	 */
	class AFGBuildableLadder : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_J9KZ[0x4];                                   // 0x05D8(0x0004) Fix Super Size
		float                                                      mMeshHeight;                                             // 0x05DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mLadderSegmentMesh;                                      // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mMaxSegmentCount;                                        // 0x05E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mNumSegments;                                            // 0x05EC(0x0004) Edit, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStaticMeshComponent*>                        mLadderMeshes;                                           // 0x05F0(0x0010) Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UFGClearanceComponent*                               mClearanceBox;                                           // 0x0600(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGLadderComponent*                                  mFrontLadderComponent;                                   // 0x0608(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGLadderComponent*                                  mBackLadderComponent;                                    // 0x0610(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YYMS[0x8];                                   // 0x0618(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_NumSegments();
		int32_t GetMaxLadderSegmentCount();
		float GetLadderWidth();
		float GetLadderMeshHeight();
		float GetLadderHeight();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableLightsControlPanel
	 * Size -> 0x0020 (FullSize[0x0650] - InheritedSize[0x0630])
	 */
	class AFGBuildableLightsControlPanel : public AFGBuildableControlPanelHost
	{
	public:
		class FScriptMulticastDelegate                             OnLightControlPanelStateChanged;                         // 0x0630(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FLightSourceControlData                             mLightControlData;                                       // 0x0640(0x000C) Net, SaveGame, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       mIsEnabled;                                              // 0x064C(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L5NA[0x3];                                   // 0x064D(0x0003) MISSED OFFSET (PADDING)

	public:
		void SetLightEnabled(bool IsEnabled);
		void SetLightControlData(const struct FLightSourceControlData& Data);
		void OnRep_IsEnabled();
		bool IsLightEnabled();
		struct FLightSourceControlData GetLightControlData();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableLightSettings
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UFGBuildableLightSettings : public UDeveloperSettings
	{
	public:
		TArray<struct FLinearColor>                                mDefaultColorSlots;                                      // 0x0038(0x0010) Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryClipboardSettings
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFactoryClipboardSettings : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLightSourceClipboardSettings
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGLightSourceClipboardSettings : public UFGFactoryClipboardSettings
	{
	public:
		struct FLightSourceControlData                             mLightSourceControlData;                                 // 0x0028(0x000C) BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UA64[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLightSourceClipboardRCO
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGLightSourceClipboardRCO : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGLightSourceClipboardRCO;               // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2BL8[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void Server_PasteSettingsControlPanel(class AFGBuildableLightsControlPanel* controlPanel, const struct FLightSourceControlData& LightSourceControlData);
		void Server_PasteSettingsBuildableLight(class AFGBuildableLightSource* buildableLight, const struct FLightSourceControlData& LightSourceControlData);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableMAM
	 * Size -> 0x0018 (FullSize[0x05F0] - InheritedSize[0x05D8])
	 */
	class AFGBuildableMAM : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_CQRL[0x8];                                   // 0x05D8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_0X1S[0x4];                                   // 0x05E0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSignificanceRange;                                      // 0x05E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8VVH[0x8];                                   // 0x05E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void ResearchStateChanged(EResearchState researchState);
		void OnResearchStateChanged(EResearchState researchState);
		bool IsSignificant();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGManufacturerClipboardSettings
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGManufacturerClipboardSettings : public UFGFactoryClipboardSettings
	{
	public:
		class UClass*                                              mRecipe;                                                 // 0x0028(0x0008) BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mTargetPotential;                                        // 0x0030(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mReachablePotential;                                     // 0x0034(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGManufacturerClipboardRCO
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGManufacturerClipboardRCO : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGManufacturerClipboardRCO;              // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3DEH[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void Server_PasteSettings(class AFGBuildableManufacturer* manufacturer, class AFGCharacterPlayer* Player, class UClass* recipe, float overclock);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableManufacturerVariablePower
	 * Size -> 0x0024 (FullSize[0x0800] - InheritedSize[0x07DC])
	 */
	class AFGBuildableManufacturerVariablePower : public AFGBuildableManufacturer
	{
	public:
		float                                                      mEstimatedMaximumPowerConsumption;                       // 0x07DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UCurveFloat*                                         mPowerConsumptionCurve;                                  // 0x07E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_38Q9[0x18];                                  // 0x07E8(0x0018) MISSED OFFSET (PADDING)

	public:
		float GetMinPowerConsumption();
		float GetMaxPowerConsumption();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePassthroughBase
	 * Size -> 0x0090 (FullSize[0x0668] - InheritedSize[0x05D8])
	 */
	class AFGBuildablePassthroughBase : public AFGBuildable
	{
	public:
		class UFGClearanceComponent*                               mClearanceBox;                                           // 0x05D8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSnappedBuildingThickness;                               // 0x05E0(0x0004) Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMidMeshLength;                                          // 0x05E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mGenerateTunnelCollision;                                // 0x05E8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LK14[0x7];                                   // 0x05E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mCapMesh;                                                // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mMidMesh;                                                // 0x05F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            mEndCapRotation;                                         // 0x0600(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            mMidMeshRotation;                                        // 0x0618(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             mEndCapTranslation;                                      // 0x0630(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mClearanceHeightMin;                                     // 0x0648(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mClearanceThickness;                                     // 0x064C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCostSegmentLength;                                      // 0x0650(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CZLV[0x4];                                   // 0x0654(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UStaticMeshComponent*>                        mGeneratedMeshComponents;                                // 0x0658(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePassthrough
	 * Size -> 0x0018 (FullSize[0x0680] - InheritedSize[0x0668])
	 */
	class AFGBuildablePassthrough : public AFGBuildablePassthroughBase
	{
	public:
		class UFGConnectionComponent*                              mBottomSnappedConnection;                                // 0x0668(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGConnectionComponent*                              mTopSnappedConnection;                                   // 0x0670(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mConnectionComponentClass;                               // 0x0678(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePassthroughPipeHyper
	 * Size -> 0x0018 (FullSize[0x0680] - InheritedSize[0x0668])
	 */
	class AFGBuildablePassthroughPipeHyper : public AFGBuildablePassthroughBase
	{
	public:
		unsigned char                                              UnknownData_DF70[0x8];                                   // 0x0668(0x0008) Fix Super Size
		class UFGPipeConnectionComponentBase*                      mConnection0;                                            // 0x0670(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGPipeConnectionComponentBase*                      mConnection1;                                            // 0x0678(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePillar
	 * Size -> 0x0028 (FullSize[0x0610] - InheritedSize[0x05E8])
	 */
	class AFGBuildablePillar : public AFGBuildableFactoryBuilding
	{
	public:
		struct FVector                                             mSize;                                                   // 0x05E8(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsSupport;                                              // 0x0600(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UXRF[0x7];                                   // 0x0601(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mLegacySwatch;                                           // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePillarLightweight
	 * Size -> 0x0000 (FullSize[0x0610] - InheritedSize[0x0610])
	 */
	class AFGBuildablePillarLightweight : public AFGBuildablePillar
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipeBase
	 * Size -> 0x0078 (FullSize[0x0650] - InheritedSize[0x05D8])
	 */
	class AFGBuildablePipeBase : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_TYIE[0x8];                                   // 0x05D8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_FVW5[0x8];                                   // 0x05E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mMesh;                                                   // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMeshLength;                                             // 0x05F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FY35[0xC];                                   // 0x05F4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPipeConnectionComponentBase*                      mConnection0;                                            // 0x0600(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGPipeConnectionComponentBase*                      mConnection1;                                            // 0x0608(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSplinePointData>                            mSplineData;                                             // 0x0610(0x0010) Net, ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		class USplineComponent*                                    mSplineComponent;                                        // 0x0620(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInstancedSplineMeshComponent*                       mInstancedSplineMeshComponent;                           // 0x0628(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AFGBuildablePassthrough*>                     mSnappedPassthroughs;                                    // 0x0630(0x0010) Net, ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D509[0x10];                                  // 0x0640(0x0010) MISSED OFFSET (PADDING)

	public:
		class UStaticMesh* GetSplineMesh();
		class USplineComponent* GetSplineComponent();
		bool GetIsSignificant();
		class UClass* GetConnectionType();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipeHyper
	 * Size -> 0x0000 (FullSize[0x0650] - InheritedSize[0x0650])
	 */
	class AFGBuildablePipeHyper : public AFGBuildablePipeBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipeHyperAttachment
	 * Size -> 0x0030 (FullSize[0x0730] - InheritedSize[0x0700])
	 */
	class AFGBuildablePipeHyperAttachment : public AFGBuildableFactory
	{
	public:
		unsigned char                                              UnknownData_PO6H[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mAttachmentLength;                                       // 0x0708(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NFLC[0x4];                                   // 0x070C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPipeConnectionComponentBase*                      mConnection0;                                            // 0x0710(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGPipeConnectionComponentBase*                      mConnection1;                                            // 0x0718(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mBuiltWithPipelineRecipe;                                // 0x0720(0x0008) Edit, ZeroConstructor, EditConst, SaveGame, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mBuiltWithPipelineCostMultiplier;                        // 0x0728(0x0004) Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_963W[0x4];                                   // 0x072C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipeHyperBooster
	 * Size -> 0x0030 (FullSize[0x0760] - InheritedSize[0x0730])
	 */
	class AFGBuildablePipeHyperBooster : public AFGBuildablePipeHyperAttachment
	{
	public:
		unsigned char                                              UnknownData_BAOT[0x8];                                   // 0x0730(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USplineComponent*                                    mSplineComponent;                                        // 0x0738(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      ActivePowerConsumption;                                  // 0x0740(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      PipeVelocityBoostImpulse;                                // 0x0744(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<TWeakObjectPtr<class AFGCharacterPlayer>>           mTravelingPlayers;                                       // 0x0748(0x0010) Edit, ZeroConstructor, Transient, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PYOJ[0x8];                                   // 0x0758(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPlayerBoosted_Cosmetic(class AFGCharacterPlayer* charPlayer);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipeHyperJunction
	 * Size -> 0x0060 (FullSize[0x0790] - InheritedSize[0x0730])
	 */
	class AFGBuildablePipeHyperJunction : public AFGBuildablePipeHyperAttachment
	{
	public:
		unsigned char                                              UnknownData_XEVY[0x8];                                   // 0x0730(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FFGPipeHyperJunctionPath>                    JunctionPaths;                                           // 0x0738(0x0010) Edit, BlueprintVisible, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FFGPipeHyperJunctionConnectionInfo                  DefaultConnectionInfo;                                   // 0x0748(0x0028) Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FFGPipeHyperJunctionConnectionInfo>          ConnectionInfoList;                                      // 0x0770(0x0010) Edit, Net, ZeroConstructor, EditConst, SaveGame, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             OnConnectionInfoChanged;                                 // 0x0780(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void UpdateConnectionInfo(const struct FFGPipeHyperJunctionConnectionInfo& ConnectionInfo);
		void OnRep_ConnectionInfoList();
		class UFGPipeConnectionComponentBase* GetDefaultOutputConnection(class UFGPipeConnectionComponentBase* ConnectionEnteredThrough);
		TArray<struct FFGPipeHyperJunctionConnectionInfo> GetConnectionInfoListForConnection(class UFGPipeConnectionComponentBase* Connection);
		TArray<struct FFGPipeHyperJunctionConnectionInfo> GetConnectionInfoList();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipeline
	 * Size -> 0x0110 (FullSize[0x0760] - InheritedSize[0x0650])
	 */
	class AFGBuildablePipeline : public AFGBuildablePipeBase
	{
	public:
		float                                                      mRadius;                                                 // 0x0650(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mFlowLimit;                                              // 0x0654(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mFlowIndicatorClass;                                     // 0x0658(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mFlowIndicatorMinimumPipeLength;                         // 0x0660(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WWK5[0x4];                                   // 0x0664(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildablePipelineFlowIndicator*                   mFlowIndicator;                                          // 0x0668(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGSoundSplineComponent*                             mSoundSplineComponent;                                   // 0x0670(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mSplineAudioEvent;                                       // 0x0678(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGPipeConnectionComponent*>                  mPipeConnections;                                        // 0x0680(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		struct FFluidBox                                           mFluidBox;                                               // 0x0690(0x005C) SaveGame, NoDestructor, NativeAccessSpecifierPrivate
		struct FQuantizedPipelineIndicatorData                     mIndicatorData;                                          // 0x06EC(0x0002) Net, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2802[0xA];                                   // 0x06EE(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mMaxIndicatorTurnAngle;                                  // 0x06F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CGGN[0x4];                                   // 0x06FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mCachedFluidDescriptor;                                  // 0x0700(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<TWeakObjectPtr<class AActor>>                       mIgnoreActorsForIndicator;                               // 0x0708(0x0010) ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<struct FStringPair>                                 mFluidNames;                                             // 0x0718(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class FString                                              mCurrentFluid;                                           // 0x0728(0x0010) ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mLastContentForSound;                                    // 0x0738(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mLastFlowForSound;                                       // 0x073C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mRattleLimit;                                            // 0x0740(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsRattling;                                             // 0x0744(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_51MU[0x3];                                   // 0x0745(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       mStartRattleSoundEvent;                                  // 0x0748(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       mStopRattleSoundEvent;                                   // 0x0750(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        mUpdateSoundsHandle;                                     // 0x0758(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdateSounds();
		void SmoothValues(float* flowPct, float* contentPct, float dt);
		void GetRawValues(float* flowPct, float* contentPct);
		class UFGPipeConnectionComponent* GetPipeConnection1();
		class UFGPipeConnectionComponent* GetPipeConnection0();
		float GetMaxContent();
		float GetIndicatorFlowPct();
		float GetIndicatorFlow();
		float GetIndicatorContentPct();
		float GetIndicatorContent();
		class UClass* GetFluidDescriptor();
		float GetFlowLimit();
		class UFGPipelineFlowIndicatorComponent* GetFlowIndicatorComponent();
		class AFGBuildablePipelineFlowIndicator* GetFlowIndicator();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipelineAttachment
	 * Size -> 0x008C (FullSize[0x078C] - InheritedSize[0x0700])
	 */
	class AFGBuildablePipelineAttachment : public AFGBuildableFactory
	{
	public:
		unsigned char                                              UnknownData_QSSX[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mRadius;                                                 // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFluidBoxVolume;                                         // 0x070C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFluidBox                                           mFluidBox;                                               // 0x0710(0x005C) SaveGame, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A892[0x4];                                   // 0x076C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGPipeConnectionComponent*>                  mPipeConnections;                                        // 0x0770(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mCachedFluidDescriptor;                                  // 0x0780(0x0008) ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8JS8[0x4];                                   // 0x0788(0x0004) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipelineFlowIndicator
	 * Size -> 0x0038 (FullSize[0x0610] - InheritedSize[0x05D8])
	 */
	class AFGBuildablePipelineFlowIndicator : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_G61B[0x8];                                   // 0x05D8(0x0008) Fix Super Size
		class UFGColoredInstanceMeshProxy*                         mIndicatorComponent;                                     // 0x05E0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGBuildablePipeline*                                mOwningPipeline;                                         // 0x05E8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GM40[0x8];                                   // 0x05F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGItemDescriptor*                                   mFluidDescriptorCDO;                                     // 0x05F8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LJH2[0x10];                                  // 0x0600(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipelineJunction
	 * Size -> 0x0004 (FullSize[0x0790] - InheritedSize[0x078C])
	 */
	class AFGBuildablePipelineJunction : public AFGBuildablePipelineAttachment
	{
	public:
		unsigned char                                              UnknownData_XPO3[0x4];                                   // 0x078C(0x0004) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipelinePump
	 * Size -> 0x0024 (FullSize[0x07B0] - InheritedSize[0x078C])
	 */
	class AFGBuildablePipelinePump : public AFGBuildablePipelineAttachment
	{
	public:
		float                                                      mDesignPressure;                                         // 0x078C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mDefaultFlowLimit;                                       // 0x0790(0x0004) Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mUserFlowLimit;                                          // 0x0794(0x0004) Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMinimumFlowPercentForStandby;                           // 0x0798(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FQuantizedPumpIndicatorData                         mIndicatorData;                                          // 0x079C(0x0002) Net, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_58MF[0x12];                                  // 0x079E(0x0012) MISSED OFFSET (PADDING)

	public:
		void SetUserFlowLimit(float Rate);
		void SetMaxHeadLift(float design, float Max);
		float GetUserFlowLimit();
		float GetMaxHeadLift();
		float GetIndicatorHeadLiftPct();
		float GetIndicatorHeadLift();
		float GetIndicatorFlowPct();
		float GetIndicatorFlow();
		float GetFlowLimitPct();
		float GetFlowLimit();
		float GetDesignHeadLift();
		float GetDefaultFlowLimit();
		void FluidDescriptorSetNotify(class UClass* fluidDesc);
		void BuildEffectFinishedEvent();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePoleBase
	 * Size -> 0x0010 (FullSize[0x05E8] - InheritedSize[0x05D8])
	 */
	class AFGBuildablePoleBase : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_BQPA[0x4];                                   // 0x05D8(0x0004) Fix Super Size
		float                                                      mStackHeight;                                            // 0x05DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UPoleLightweightData*                                mPoleLightweightDataCDO;                                 // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipelineSupport
	 * Size -> 0x0038 (FullSize[0x0620] - InheritedSize[0x05E8])
	 */
	class AFGBuildablePipelineSupport : public AFGBuildablePoleBase
	{
	public:
		unsigned char                                              UnknownData_U99S[0x4];                                   // 0x05E8(0x0004) Fix Super Size
		float                                                      mVerticalAngle;                                          // 0x05EC(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGColoredInstanceMeshProxy*                         mSupportComponentDefaultMesh;                            // 0x05F0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGPipeConnectionComponentBase*                      mSnapOnly0;                                              // 0x05F8(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USceneComponent*                                     mSupportLengthComponent;                                 // 0x0600(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YLO0[0x8];                                   // 0x0608(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mSupportMesh;                                            // 0x0610(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mUseStaticHeight;                                        // 0x0618(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DH5H[0x7];                                   // 0x0619(0x0007) MISSED OFFSET (PADDING)

	public:
		class UClass* GetConnectionType();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipePart
	 * Size -> 0x0030 (FullSize[0x0730] - InheritedSize[0x0700])
	 */
	class AFGBuildablePipePart : public AFGBuildableFactory
	{
	public:
		float                                                      mLength;                                                 // 0x0700(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mCanStack;                                               // 0x0704(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CLV0[0x3];                                   // 0x0705(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mStackHeight;                                            // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7ZFP[0x4];                                   // 0x070C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGColoredInstanceMeshProxy*                         mSupportComponentDefaultMesh;                            // 0x0710(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGPipeConnectionComponentBase*                      mConnection0;                                            // 0x0718(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mSupportMesh;                                            // 0x0720(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mUseStaticHeight;                                        // 0x0728(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZYJM[0x7];                                   // 0x0729(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipeHyperPart
	 * Size -> 0x000C (FullSize[0x073C] - InheritedSize[0x0730])
	 */
	class AFGBuildablePipeHyperPart : public AFGBuildablePipePart
	{
	public:
		unsigned char                                              UnknownData_3VIE[0xC];                                   // 0x0730(0x000C) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePipeReservoir
	 * Size -> 0x0090 (FullSize[0x0790] - InheritedSize[0x0700])
	 */
	class AFGBuildablePipeReservoir : public AFGBuildableFactory
	{
	public:
		unsigned char                                              UnknownData_H52S[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mStackingHeight;                                         // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFluidBox                                           mFluidBox;                                               // 0x070C(0x005C) SaveGame, NoDestructor, NativeAccessSpecifierPublic
		float                                                      mStorageCapacity;                                        // 0x0768(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9AVC[0x4];                                   // 0x076C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGPipeConnectionComponent*>                  mPipeConnections;                                        // 0x0770(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		struct FQuantizedReservoirIndicatorData                    mIndicatorData;                                          // 0x0780(0x0003) Net, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V3LH[0xD];                                   // 0x0783(0x000D) MISSED OFFSET (PADDING)

	public:
		class UClass* GetFluidDescriptor();
		float GetFluidContentMax();
		float GetFluidContent();
		float GetFlowLimit();
		float GetFlowFill();
		float GetFlowDrain();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableSignBase
	 * Size -> 0x0068 (FullSize[0x0640] - InheritedSize[0x05D8])
	 */
	class AFGBuildableSignBase : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_RKVK[0x8];                                   // 0x05D8(0x0008) Fix Super Size
		TArray<class AFGBuildableSignSupport*>                     mSignPoles;                                              // 0x05E0(0x0010) ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		class UFGColoredInstanceMeshProxy*                         mMeshComponentProxy;                                     // 0x05F0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           mWorldDimensions;                                        // 0x05F8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mPoleOffset;                                             // 0x0608(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector2D                                           mPoleScale;                                              // 0x0620(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSignToSignOffset;                                       // 0x0630(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ETDJ[0xC];                                   // 0x0634(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePixelSign
	 * Size -> 0x0040 (FullSize[0x0680] - InheritedSize[0x0640])
	 */
	class AFGBuildablePixelSign : public AFGBuildableSignBase
	{
	public:
		unsigned char                                              UnknownData_OZ0N[0x8];                                   // 0x0640(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGSignPixelInstanceManager*                         mPixelInstanceManager;                                   // 0x0648(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<unsigned char>                                      mColorArray;                                             // 0x0650(0x0010) ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           mPixelDimensions;                                        // 0x0660(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mPixelSize;                                              // 0x0670(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YZSG[0x4];                                   // 0x0674(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mPixelMesh;                                              // 0x0678(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePole
	 * Size -> 0x0028 (FullSize[0x0610] - InheritedSize[0x05E8])
	 */
	class AFGBuildablePole : public AFGBuildablePoleBase
	{
	public:
		unsigned char                                              UnknownData_17LY[0x8];                                   // 0x05E8(0x0008) Fix Super Size
		class UFGColoredInstanceMeshProxy*                         mPoleComponentProxy;                                     // 0x05F0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGFactoryConnectionComponent*                       mSnapOnly0;                                              // 0x05F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mPoleMesh;                                               // 0x0600(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int8_t                                                     mSelectedPoleVersion;                                    // 0x0608(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mUseStaticHeight;                                        // 0x0609(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_L0AU[0x6];                                   // 0x060A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePoleLightweight
	 * Size -> 0x0000 (FullSize[0x0610] - InheritedSize[0x0610])
	 */
	class AFGBuildablePoleLightweight : public AFGBuildablePole
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.PoleLightweightData
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UPoleLightweightData : public UObject
	{
	public:
		TArray<struct FPoleHeightMesh>                             mPoleVariations;                                         // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePowerPole
	 * Size -> 0x0038 (FullSize[0x0610] - InheritedSize[0x05D8])
	 */
	class AFGBuildablePowerPole : public AFGBuildable
	{
	public:
		class UWidgetComponent*                                    mConnectionsWidgetComponent;                             // 0x05D8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mConnectionWidgetClass;                                  // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGPowerConnectionComponent*>                 mPowerConnections;                                       // 0x05E8(0x0010) Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class UFGColoredInstanceMeshProxy*                         mMeshComponentProxy;                                     // 0x05F8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EPowerPoleType                                             mPowerPoleType;                                          // 0x0600(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_URVN[0x3];                                   // 0x0601(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPowerTowerWireMaxLength;                                // 0x0604(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3FY9[0x3];                                   // 0x0608(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mHasPower;                                               // 0x060B(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1Q2R[0x4];                                   // 0x060C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_HasPower();
		void OnHasPowerChanged(bool HasPower);
		bool HasPower();
		float GetPowerTowerWireMaxLength();
		EPowerPoleType GetPowerPoleType();
		TArray<class UFGPowerConnectionComponent*> GetPowerConnections();
		class UFGPowerConnectionComponent* GetPowerConnection(int32_t Index);
		class UFGPowerCircuit* GetPowerCircuit();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePowerStorage
	 * Size -> 0x0020 (FullSize[0x0720] - InheritedSize[0x0700])
	 */
	class AFGBuildablePowerStorage : public AFGBuildableFactory
	{
	public:
		class UFGBatteryInfo*                                      mBatteryInfo;                                            // 0x0700(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EBatteryStatus                                             mBatteryStatus;                                          // 0x0708(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_K0RS[0x3];                                   // 0x0709(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPowerStore;                                             // 0x070C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mPowerStoreCapacity;                                     // 0x0710(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UCAR[0x4];                                   // 0x0714(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPowerInputCapacity;                                     // 0x0718(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              mIndicatorLevelMax;                                      // 0x071C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              mIndicatorLevel;                                         // 0x071D(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PJYM[0x2];                                   // 0x071E(0x0002) MISSED OFFSET (PADDING)

	public:
		void StatusChanged(EBatteryStatus Status);
		void OnRep_Status();
		void OnRep_IndicatorLevel();
		void IndicatorLevelChanged(unsigned char indicatorLevel);
		float GetTimeUntilFull();
		float GetTimeUntilEmpty();
		float GetPowerStorePercent();
		float GetPowerStoreCapacity();
		float GetPowerStore();
		float GetPowerOutput();
		float GetPowerInput();
		unsigned char GetIndicatorLevelMax();
		EBatteryStatus GetBatteryStatus();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePowerTower
	 * Size -> 0x0008 (FullSize[0x05E0] - InheritedSize[0x05D8])
	 */
	class AFGBuildablePowerTower : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_5Z1A[0x8];                                   // 0x05D8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildablePriorityPowerSwitch
	 * Size -> 0x0030 (FullSize[0x0680] - InheritedSize[0x0650])
	 */
	class AFGBuildablePriorityPowerSwitch : public AFGBuildableCircuitSwitch
	{
	public:
		class FScriptMulticastDelegate                             mOnPriorityChanged;                                      // 0x0650(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    mPriority;                                               // 0x0660(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F3RV[0xC];                                   // 0x0664(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGPriorityPowerSwitchInfo*                          mInfo;                                                   // 0x0670(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4Y1H[0x8];                                   // 0x0678(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetPriority(int32_t Priority);
		void OnRep_Priority();
		void OnPriorityChanged__DelegateSignature(int32_t Priority);
		void OnPriorityChanged(int32_t Priority);
		int32_t GetPriority();
		class AFGPriorityPowerSwitchInfo* GetInfo();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableRadarTower
	 * Size -> 0x00F0 (FullSize[0x07F0] - InheritedSize[0x0700])
	 */
	class AFGBuildableRadarTower : public AFGBuildableFactory
	{
	public:
		unsigned char                                              UnknownData_9J4M[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mRevealRadius;                                           // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WVHF[0x4];                                   // 0x070C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mScannableDescriptors;                                   // 0x0710(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x0720(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AFGResourceNodeBase*>                         mScannedResourceNodes;                                   // 0x0728(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		class UFGRadarTowerRepresentation*                         mRadarTowerRepresentation;                               // 0x0738(0x0008) Net, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U1Z8[0xB0];                                  // 0x0740(0x00B0) MISSED OFFSET (PADDING)

	public:
		bool UpdateRepresentation();
		void SetRepresentationText(const class FText& Text);
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		void OnNewScannableObjectUnlocked(class UClass* itemDescriptor);
		bool IsActorStatic();
		float GetTowerHeight();
		class FText GetRepresentationText();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		class UFGRadarTowerRepresentation* GetRadarTowerRepresentation();
		struct FLinearColor GetDefaultRepresentationColor();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableRailroadBridge
	 * Size -> 0x0018 (FullSize[0x05F0] - InheritedSize[0x05D8])
	 */
	class AFGBuildableRailroadBridge : public AFGBuildable
	{
	public:
		class UFGSplineComponent*                                  mSplineComponent;                                        // 0x05D8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FSplinePointData>                            mSplineData;                                             // 0x05E0(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate

	public:
		float GetLength();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableRailroadSignal
	 * Size -> 0x0098 (FullSize[0x0670] - InheritedSize[0x05D8])
	 */
	class AFGBuildableRailroadSignal : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_6CDJ[0x8];                                   // 0x05D8(0x0008) Fix Super Size
		class FScriptMulticastDelegate                             mOnAspectChangedDelegate;                                // 0x05E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnBlockValidationChangedDelegate;                       // 0x05F0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UFGColoredInstanceMeshProxy*                         mSignalComponent;                                        // 0x0600(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mDrawDebugVisualState;                                   // 0x0608(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MZY2[0x7];                                   // 0x0609(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGRailroadTrackConnectionComponent*                 mOwningConnection;                                       // 0x0610(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UFGRailroadTrackConnectionComponent*>         mGuardedConnections;                                     // 0x0618(0x0010) ExportObject, ZeroConstructor, SaveGame, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UFGRailroadTrackConnectionComponent*>         mObservedConnections;                                    // 0x0628(0x0010) ExportObject, ZeroConstructor, SaveGame, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CSSP[0x10];                                  // 0x0638(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ERailroadSignalAspect                                      mAspect;                                                 // 0x0648(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ERailroadBlockValidation                                   mBlockValidation;                                        // 0x0649(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ATXJ[0xE];                                   // 0x064A(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsPathSignal;                                           // 0x0658(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsBiDirectional;                                        // 0x0659(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int16_t                                                    mVisualState;                                            // 0x065A(0x0002) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y8OC[0x4];                                   // 0x065C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSignificanceRange;                                      // 0x0660(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PUD8[0xC];                                   // 0x0664(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnVisualStateChanged();
		void OnRep_VisualState();
		void OnRep_BlockValidation();
		void OnRep_Aspect();
		void OnBlockValidationChanged__DelegateSignature(ERailroadBlockValidation blockValidation);
		void OnAspectChanged__DelegateSignature(ERailroadSignalAspect aspect);
		bool IsSignificant();
		bool IsPathSignal();
		bool IsBiDirectional();
		bool HasObservedBlock();
		int32_t GetVisualState();
		TArray<class UFGRailroadTrackConnectionComponent*> GetObservedConnections();
		TArray<class UFGRailroadTrackConnectionComponent*> GetGuardedConnections();
		ERailroadBlockValidation GetBlockValidation();
		ERailroadSignalAspect GetAspect();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableTrainPlatform
	 * Size -> 0x0058 (FullSize[0x0758] - InheritedSize[0x0700])
	 */
	class AFGBuildableTrainPlatform : public AFGBuildableFactory
	{
	public:
		class AFGBuildableRailroadTrack*                           mRailroadTrack;                                          // 0x0700(0x0008) ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGTrainPlatformConnection*>                  mPlatformConnections;                                    // 0x0708(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UFGTrainPlatformConnection*                          mPlatformConnection0;                                    // 0x0718(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGTrainPlatformConnection*                          mPlatformConnection1;                                    // 0x0720(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGRailroadVehicle*                                  mDockedRailroadVehicle;                                  // 0x0728(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGBuildableRailroadStation*                         mStationDockingMaster;                                   // 0x0730(0x0008) ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsOrientationReversed;                                  // 0x0738(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETrainPlatformDockingStatus                                mPlatformDockingStatus;                                  // 0x0739(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETrainPlatformDockingStatus                                mSavedDockingStatus;                                     // 0x073A(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9IXV[0x5];                                   // 0x073B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        mDockingSequenceTimerHandle;                             // 0x0740(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        mIdleUpdateTimerHandle;                                  // 0x0748(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mDockWasCancelled;                                       // 0x0750(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RLJY[0x7];                                   // 0x0751(0x0007) Fix size for supers

	public:
		void OnRep_UpdateDockingStatus();
		bool IsDockingCancelled();
		ETrainPlatformDockingStatus GetDockingStatus();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableRailroadStation
	 * Size -> 0x0068 (FullSize[0x07C0] - InheritedSize[0x0758])
	 */
	class AFGBuildableRailroadStation : public AFGBuildableTrainPlatform
	{
	public:
		unsigned char                                              UnknownData_ZAMZ[0x8];                                   // 0x0758(0x0008) Fix Super Size
		class AFGTrainStationIdentifier*                           mStationIdentifier;                                      // 0x0760(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AFGBuildableTrainPlatform*>                   mDockedPlatformList;                                     // 0x0768(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		struct FTrainDockingRuleSet                                mCurrentDockedWithRuleSet;                               // 0x0778(0x0030) SaveGame, NativeAccessSpecifierPrivate
		class AFGLocomotive*                                       mDockingLocomotive;                                      // 0x07A8(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mCurrentDockForDuration;                                 // 0x07B0(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_98NY[0x4];                                   // 0x07B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x07B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetRepresentationText(const class FText& Text);
		void OnRep_StationIdentifier();
		void OnNameChanged();
		class AFGTrainStationIdentifier* GetStationIdentifier();
		class FText GetRepresentationText();
		struct FTrainDockingRuleSet GetDockedTrainRuleSet();
		struct FLinearColor GetDefaultRepresentationColor();
		float GetCurrentDockForDuration();
		void ClearRuleSetTimeRequirement();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableRailroadSwitchControl
	 * Size -> 0x0020 (FullSize[0x0720] - InheritedSize[0x0700])
	 */
	class AFGBuildableRailroadSwitchControl : public AFGBuildableFactory
	{
	public:
		class UFGColoredInstanceMeshProxy*                         mSwitchComponent;                                        // 0x0700(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGRailroadTrackConnectionComponent*                 mControlledConnection;                                   // 0x0708(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSwitchData                                         mSwitchData;                                             // 0x0710(0x0002) Net, NoDestructor, NativeAccessSpecifierPrivate
		int16_t                                                    mVisualState;                                            // 0x0712(0x0002) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VFSG[0xC];                                   // 0x0714(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnSwitchPositionChanged(int32_t NewPosition, int32_t numPositions);
		void OnRep_VisualState();
		int32_t GetSwitchPosition();
		int32_t GetNumSwitchPositions();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableRailroadTrack
	 * Size -> 0x0108 (FullSize[0x06E0] - InheritedSize[0x05D8])
	 */
	class AFGBuildableRailroadTrack : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_2GCD[0x8];                                   // 0x05D8(0x0008) Fix Super Size
		class UStaticMesh*                                         mMesh;                                                   // 0x05E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMeshLength;                                             // 0x05E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6W00[0x4];                                   // 0x05EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USplineComponent*                                    mSplineComponent;                                        // 0x05F0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UInstancedSplineMeshComponent*                       mInstancedSplineMesh;                                    // 0x05F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FSplinePointData>                            mSplineData;                                             // 0x0600(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		TArray<class UFGRailroadTrackConnectionComponent*>         mConnections;                                            // 0x0610(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		bool                                                       mIsOwnedByPlatform;                                      // 0x0620(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XGXQ[0x3];                                   // 0x0621(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mTrackGraphID;                                           // 0x0624(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_T5VW[0x8];                                   // 0x0628(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGBuildableRailroadTrack*>                   mOverlappingTracks;                                      // 0x0630(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate
		unsigned char                                              mVehicles[0x50];                                         // 0x0640(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_0KNO[0x10];                                  // 0x0690(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mSignalBlockID;                                          // 0x06A0(0x0004) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NUYR[0xC];                                   // 0x06A4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mBlockVisualizationMesh;                                 // 0x06B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mBlockVisualizationMeshLength;                           // 0x06B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mBlockVisualizationNumPrimitiveDataFloats;               // 0x06BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mBlockVisualizationNumPerInstancePrimitiveDataCountOffset; // 0x06C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FSplineDataSettings                                 mBlockVisualizationSplineDataSettings;                   // 0x06C4(0x0014) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		int32_t                                                    mBlockVisualizationColorDataStartIndex;                  // 0x06D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QFL7[0x4];                                   // 0x06DC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_SignalBlockID();
		class USplineComponent* GetSplineComponent();
		float GetLength();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableRamp
	 * Size -> 0x0010 (FullSize[0x0610] - InheritedSize[0x0600])
	 */
	class AFGBuildableRamp : public AFGBuildableFoundation
	{
	public:
		bool                                                       mIsDoubleRamp;                                           // 0x0600(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsRoof;                                                 // 0x0601(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N3D9[0xE];                                   // 0x0602(0x000E) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableResourceSink
	 * Size -> 0x0060 (FullSize[0x0760] - InheritedSize[0x0700])
	 */
	class AFGBuildableResourceSink : public AFGBuildableFactory
	{
	public:
		class UFGInventoryComponent*                               mCouponInventory;                                        // 0x0700(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FReplicationDetailData                              mCouponInventoryHandler;                                 // 0x0708(0x0028) NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UFGFactoryConnectionComponent*>               mFactoryInputConnections;                                // 0x0730(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class AFGResourceSinkSubsystem*                            mResourceSinkSubsystem;                                  // 0x0740(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mCouponClass;                                            // 0x0748(0x0008) ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mProcessingTime;                                         // 0x0750(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mProducingTimer;                                         // 0x0754(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_59TU[0x8];                                   // 0x0758(0x0008) MISSED OFFSET (PADDING)

	public:
		void ReturnUnclaimedCoupons();
		class UFGInventoryComponent* GetCouponInventory();
		int32_t ClaimCoupons(int32_t numCoupons);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableResourceSinkShop
	 * Size -> 0x0020 (FullSize[0x0720] - InheritedSize[0x0700])
	 */
	class AFGBuildableResourceSinkShop : public AFGBuildableFactory
	{
	public:
		class UFGInventoryComponent*                               mShopInventory;                                          // 0x0700(0x0008) Edit, ExportObject, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mShopInventoryDefaultSize;                               // 0x0708(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0RSK[0x4];                                   // 0x070C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGResourceSinkSubsystem*                            mResourceSinkSubsystem;                                  // 0x0710(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3Q1I[0x8];                                   // 0x0718(0x0008) MISSED OFFSET (PADDING)

	public:
		bool PurchaseResourceSinkSchematics(class UFGInventoryComponent* playerInventory, TArray<class UClass*> Schematics);
		class UFGInventoryComponent* GetShopInventory();
		bool CanInventoryFitPlannedPurchase(TArray<class UClass*> Schematics);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableRoad
	 * Size -> 0x0028 (FullSize[0x0600] - InheritedSize[0x05D8])
	 */
	class AFGBuildableRoad : public AFGBuildable
	{
	public:
		class UFGRoadConnectionComponent*                          mConnection0;                                            // 0x05D8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGRoadConnectionComponent*                          mConnection1;                                            // 0x05E0(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGSplineComponent*                                  mSplineComponent;                                        // 0x05E8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FSplinePointData>                            mSplineData;                                             // 0x05F0(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignAttachmentPoint
	 * Size -> 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
	 */
	class UFGSignAttachmentPoint : public UFGAttachmentPointType
	{
	public:
		ESignAttachmentPointSnapType                               mSignSnapType;                                           // 0x0038(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1D1E[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           mMaxSignSize;                                            // 0x0040(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableSignSupport
	 * Size -> 0x0028 (FullSize[0x0610] - InheritedSize[0x05E8])
	 */
	class AFGBuildableSignSupport : public AFGBuildablePoleBase
	{
	public:
		class UFGColoredInstanceMeshProxy*                         mPoleComponentProxy;                                     // 0x05E8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mHeight;                                                 // 0x05F0(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C2J9[0x4];                                   // 0x05F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mPoleMesh;                                               // 0x05F8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector2D                                           mPoleScale;                                              // 0x0600(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableSnowDispenser
	 * Size -> 0x0008 (FullSize[0x05E0] - InheritedSize[0x05D8])
	 */
	class AFGBuildableSnowDispenser : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_VMER[0x8];                                   // 0x05D8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableSpaceElevator
	 * Size -> 0x0030 (FullSize[0x0730] - InheritedSize[0x0700])
	 */
	class AFGBuildableSpaceElevator : public AFGBuildableFactory
	{
	public:
		unsigned char                                              UnknownData_82QW[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGInventoryComponent*                               mInputInventory;                                         // 0x0708(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGGamePhaseManager*                                 mGamePhaseManager;                                       // 0x0710(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A5BD[0x10];                                  // 0x0718(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x0728(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpgradeTowTruck();
		bool UpdateRepresentation();
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		void PayOffFromInventory(class UFGInventoryComponent* inventory, int32_t inventorySlotIndex);
		void LaunchTowTruck();
		bool IsReadyToUpgrade();
		bool IsFullyUpgraded();
		bool IsActorStatic();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		void GetNextPhaseCost(TArray<struct FItemAmount>* out_cost);
		class UFGInventoryComponent* GetInputInventory();
		struct FLinearColor GetDefaultRepresentationColor();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableSpeedSign
	 * Size -> 0x0008 (FullSize[0x05E0] - InheritedSize[0x05D8])
	 */
	class AFGBuildableSpeedSign : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_ZQE4[0x8];                                   // 0x05D8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableSplitterSmart
	 * Size -> 0x0110 (FullSize[0x0720] - InheritedSize[0x0610])
	 */
	class AFGBuildableSplitterSmart : public AFGBuildableConveyorAttachment
	{
	public:
		class FScriptMulticastDelegate                             OnSortRulesChangedDelegate;                              // 0x0610(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		TArray<struct FSplitterSortRule>                           mSortRules;                                              // 0x0620(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, RepNotify, NativeAccessSpecifierPrivate
		int32_t                                                    mMaxNumSortRules;                                        // 0x0630(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NJSE[0x4];                                   // 0x0634(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FInventoryItem                                      mLastItem;                                               // 0x0638(0x0020) SaveGame, NativeAccessSpecifierPrivate
		TMap<class UClass*, unsigned char>                         mItemToLastOutputMap;                                    // 0x0658(0x0050) SaveGame, NativeAccessSpecifierPrivate
		int32_t                                                    mCurrentOutputIndex;                                     // 0x06A8(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mLastOutputIndex;                                        // 0x06AC(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RW62[0x4];                                   // 0x06B0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mCurrentInventoryIndex;                                  // 0x06B4(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FConnectionItemStruct>                       mDistributionTable;                                      // 0x06B8(0x0010) ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TMap<class UFGFactoryConnectionComponent*, struct FConveyorSpaceData> mConveyorSpaceData;                                      // 0x06C8(0x0050) Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KDGT[0x8];                                   // 0x0718(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetSortRules(TArray<struct FSplitterSortRule> newSortRules);
		void SetSortRuleAt(int32_t Index, const struct FSplitterSortRule& Rule);
		void RemoveSortRuleAt(int32_t Index);
		void OnRep_SortRules();
		bool IsValidSortRuleAt(int32_t Index);
		TArray<struct FSplitterSortRule> GetSortRules();
		struct FSplitterSortRule GetSortRuleAt(int32_t Index);
		int32_t GetNumSortRules();
		int32_t GetMaxNumSortRules();
		void AddSortRule(const struct FSplitterSortRule& Rule);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableStair
	 * Size -> 0x0018 (FullSize[0x0600] - InheritedSize[0x05E8])
	 */
	class AFGBuildableStair : public AFGBuildableFactoryBuilding
	{
	public:
		unsigned char                                              UnknownData_MIIL[0x4];                                   // 0x05E8(0x0004) Fix Super Size
		float                                                      mHeight;                                                 // 0x05EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mSize;                                                   // 0x05F0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MYYY[0xC];                                   // 0x05F4(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableStorage
	 * Size -> 0x0060 (FullSize[0x0760] - InheritedSize[0x0700])
	 */
	class AFGBuildableStorage : public AFGBuildableFactory
	{
	public:
		float                                                      mStackingHeight;                                         // 0x0700(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_73MO[0x4];                                   // 0x0704(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FItemAmount>                                 mDefaultResources;                                       // 0x0708(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    mInventorySizeX;                                         // 0x0718(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mInventorySizeY;                                         // 0x071C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGInventoryComponent*                               mStorageInventory;                                       // 0x0720(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2EX3[0x38];                                  // 0x0728(0x0038) MISSED OFFSET (PADDING)

	public:
		class UFGInventoryComponent* GetStorageInventory();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableSubsystem
	 * Size -> 0x04E8 (FullSize[0x07E0] - InheritedSize[0x02F8])
	 */
	class AFGBuildableSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_X4V9[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		float                                                      mDistanceConsideredClose;                                // 0x0300(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mNumFactoriesNeededForCloseCheck;                        // 0x0304(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             BuildableConstructedGlobalDelegate;                      // 0x0308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnBuildableLightColorSlotsUpdated;                      // 0x0318(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnOccluderBuildingAdded;                                // 0x0328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnOccluderBuildingRemoved;                              // 0x0338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnColorIndexChanged;                                    // 0x0348(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      mPreviewSkinsOnBuildablesList;                           // 0x0358(0x0010) ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I4ZO[0x8];                                   // 0x0368(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGBuildable*>                                mBuildables;                                             // 0x0370(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FGHT[0x38];                                  // 0x0380(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class AFGBuildable*, int32_t>                         mBuildableToSharedBucketIndexMap;                        // 0x03B8(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3URP[0x28];                                  // 0x0408(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGBuildableConveyorAttachment*>              mConveyorAttachments;                                    // 0x0430(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UQGQ[0x18];                                  // 0x0440(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              mBuildableInstancesActor;                                // 0x0458(0x0008) Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              mFactoryLegInstancesActor;                               // 0x0460(0x0008) Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGProductionIndicatorInstanceManager*               mProductionIndicatorInstanceManager;                     // 0x0468(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class FName, class UFGColoredInstanceManager*>        mColoredInstances;                                       // 0x0470(0x0050) Edit, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TMap<class UStaticMesh*, class UFGFactoryLegInstanceManager*> mFactoryLegInstances;                                    // 0x04C0(0x0050) Edit, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G9B8[0x4];                                   // 0x0510(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FColor                                              mColorSlotsPrimary[0x12];                                // 0x0514(0x0048) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FColor                                              mColorSlotsSecondary[0x12];                              // 0x055C(0x0048) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_I8ZM[0x4];                                   // 0x05A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLinearColor>                                mColorSlotsPrimary_Linear;                               // 0x05A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, SaveGame, NativeAccessSpecifierPrivate
		TArray<struct FLinearColor>                                mColorSlotsSecondary_Linear;                             // 0x05B8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, SaveGame, NativeAccessSpecifierPrivate
		TArray<struct FFactoryCustomizationColorSlot>              mColorSlots_Data;                                        // 0x05C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      mPreviewingCustomizationsList;                           // 0x05D8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_A6RB[0x20];                                  // 0x05E8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLinearColor>                                mBuildableLightColorSlots;                               // 0x0608(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V3HU[0x40];                                  // 0x0618(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDistanceBasedTickRate>                      mDistanceBasedTickRate;                                  // 0x0658(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		bool                                                       mFactoryOptimizationEnabled;                             // 0x0668(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KYFQ[0x3];                                   // 0x0669(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mReplayEffecTimeDilation;                                // 0x066C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mReplayEffectTimerDefault;                               // 0x0670(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UBZJ[0x14];                                  // 0x0674(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, class UMaterialInstanceDynamic*>             mConveyorTrackSpeedToMaterial;                           // 0x0688(0x0050) NativeAccessSpecifierPrivate
		struct FFactoryTickFunction                                mFactoryTickFunction;                                    // 0x06D8(0x0030) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WJUW[0x58];                                  // 0x0708(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mCustomizationCollectionClasses;                         // 0x0760(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<class AFGReplicationDetailActor*>                   mRepDetailCleanupArray;                                  // 0x0770(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		float                                                      mTimeUntilRepDetailCheck;                                // 0x0780(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mSqDistanceForDetailCleanup;                             // 0x0784(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<int32_t, class UClass*>                               mSlotToSwatchDescMigrationMap;                           // 0x0788(0x0050) UObjectWrapper, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GWUI[0x8];                                   // 0x07D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateConveyorRenderType(const class FString& cvar);
		void SetColorSlot_Data(unsigned char Index, const struct FFactoryCustomizationColorSlot& Color);
		void ReplayBuildingEffects();
		void GetTypedBuildable(class UClass* InClass, TArray<class AFGBuildable*>* out_buildables);
		int32_t GetNumFactoriesNeededForCloseCheck();
		int32_t GetNumBuildableLightColorSlots();
		float GetDistanceConsideredClose();
		struct FFactoryCustomizationColorSlot GetColorSlot_Data(unsigned char Index);
		class UClass* GetCollectionForCustomizationClass(class UClass* collectionClassType);
		TArray<struct FLinearColor> GetBuildableLightColorSlots();
		struct FLinearColor GetBuildableLightColorSlot(int32_t Index);
		class AFGBuildableSubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTradingPostIntegratedBuildable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGTradingPostIntegratedBuildable : public UInterface
	{
	public:
		void UpdateBuildableVisibility(bool IsVisible, bool isTutorialComplete);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableTradingPost
	 * Size -> 0x0100 (FullSize[0x0800] - InheritedSize[0x0700])
	 */
	class AFGBuildableTradingPost : public AFGBuildableFactory
	{
	public:
		unsigned char                                              UnknownData_20F6[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mDefaultGeneratorRecipe;                                 // 0x0708(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AFGBuildableGenerator*>                       mGenerators;                                             // 0x0710(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPublic
		class UClass*                                              mDefaultStorageRecipe;                                   // 0x0720(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mDefaultHubTerminalRecipe;                               // 0x0728(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mDefaultWorkBenchRecipe;                                 // 0x0730(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGBuildable*                                        mStorage;                                                // 0x0738(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGBuildableHubTerminal*                             mHubTerminal;                                            // 0x0740(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGBuildable*                                        mWorkBench;                                              // 0x0748(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGBuildableCalendar*                                mCalendar;                                               // 0x0750(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGBuildable*                                        mMiniGame;                                               // 0x0758(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<int32_t>                                            mGeneratorVisibilityLevels;                              // 0x0760(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    mStorageInventorySize;                                   // 0x0770(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mStorageVisibilityLevel;                                 // 0x0774(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGInventoryComponent*                               mInputInventory;                                         // 0x0778(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSpawningGroundZOffset;                                  // 0x0780(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mGroundSearchZDistance;                                  // 0x0784(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGSchematicManager*                                 mSchematicManager;                                       // 0x0788(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FItemAmount>                                 mDefaultResources;                                       // 0x0790(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class USceneComponent*                                     mGenerator1Location;                                     // 0x07A0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     mGenerator2Location;                                     // 0x07A8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     mStorageLocation;                                        // 0x07B0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     mHubTerminalLocation;                                    // 0x07B8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     mWorkBenchLocation;                                      // 0x07C0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     mCalendarLocation;                                       // 0x07C8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     mMiniGameLocation;                                       // 0x07D0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mNeedPlayingBuildEffectNotification;                     // 0x07D8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2Q64[0x7];                                   // 0x07D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x07E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FText                                                mRepresentationText;                                     // 0x07E8(0x0018) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		void UpdateTerminalAndWorkbenchVisibility();
		void UpdateStorageVisibility();
		bool UpdateRepresentation();
		void UpdateGeneratorVisibility();
		void TryAddEventSubBuildings();
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		void OnTradingPostUpgraded(int32_t Level, bool suppressBuildEffects);
		void OnRep_NeedPlayingBuildEffect();
		void OnRep_HAXX_SubbuildingReplicated();
		bool IsActorStatic();
		int32_t GetTradingPostLevel();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		struct FLinearColor GetDefaultRepresentationColor();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		bool AreChildBuildingsLoaded();
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableTrainPlatformCargo
	 * Size -> 0x0168 (FullSize[0x08C0] - InheritedSize[0x0758])
	 */
	class AFGBuildableTrainPlatformCargo : public AFGBuildableTrainPlatform
	{
	public:
		class FScriptMulticastDelegate                             mOnTransferRateUpdated;                                  // 0x0758(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		EFreightCargoType                                          mFreightCargoType;                                       // 0x0768(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int8_t                                                     mStorageSizeX;                                           // 0x0769(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int8_t                                                     mStorageSizeY;                                           // 0x076A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_64V1[0x5];                                   // 0x076B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              mMagicBoxSkelMeshComponent;                              // 0x0770(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                mCargoMeshComponent;                                     // 0x0778(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZU3R[0x28];                                  // 0x0780(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mCanUnloadAny : 1;                                       // 0x07A8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsFullUnload : 1;                                       // 0x07A8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanLoadAny : 1;                                         // 0x07A8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsFullLoad : 1;                                         // 0x07A8(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SO44[0x3];                                   // 0x07A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mTimeToCompleteLoad;                                     // 0x07AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTimeToSwapLoadVisibility;                               // 0x07B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTimeToCompleteUnload;                                   // 0x07B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTimeToSwapUnloadVisibility;                             // 0x07B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mWaitForConditionUpdatePeriod;                           // 0x07BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGFactoryConnectionComponent*>               mStorageInputConnections;                                // 0x07C0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGPipeConnectionComponent*>                  mPipeInputConnections;                                   // 0x07D0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGPipeConnectionComponent*>                  mPipeOutputConnections;                                  // 0x07E0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FTrainDockingRuleSet                                mDockingRuleSet;                                         // 0x07F0(0x0030) Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mLoadItemFilter;                                         // 0x0820(0x0010) ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mUnloadItemFilter;                                       // 0x0830(0x0010) ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S3SP[0x8];                                   // 0x0840(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mHasFullyLoadUnloadRule;                                 // 0x0848(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y5EK[0x3];                                   // 0x0849(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDockForDuration;                                        // 0x084C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mMustDockForDuration;                                    // 0x0850(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AGQC[0x3];                                   // 0x0851(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCurrentDockForDuration;                                 // 0x0854(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasAnyRelevantStacksToMove;                             // 0x0858(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAllowDepartureNoValidItemsToTransfer;                   // 0x0859(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NUE2[0x6];                                   // 0x085A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGInventoryComponent*                               mInventory;                                              // 0x0860(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasDockedActor : 1;                                     // 0x0868(0x0001) BIT_FIELD SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsInLoadMode : 1;                                       // 0x0868(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsLoadUnloading : 1;                                    // 0x0868(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mShouldExecuteLoadOrUnload : 1;                          // 0x0868(0x0001) BIT_FIELD SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mRanCompleteBeforeNone : 1;                              // 0x0868(0x0001) BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QMC0[0x7];                                   // 0x0869(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGFreightWagon*                                     mLastDockedFreight;                                      // 0x0870(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        mSwapCargoVisibilityTimerHandle;                         // 0x0878(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VATA[0x8];                                   // 0x0880(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mTimeSinceLastLoadTransferUpdate;                        // 0x0888(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTimeSinceLastUnloadTransferUpdate;                      // 0x088C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mSmoothedLoadRate;                                       // 0x0890(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mSmoothedUnloadRate;                                     // 0x0894(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YNP3[0x18];                                  // 0x0898(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mReplicatedOutflowRate;                                  // 0x08B0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mReplicatedInflowRate;                                   // 0x08B4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4ANC[0x8];                                   // 0x08B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void Undock();
		void SetIsInLoadMode(bool isInLoadMode);
		void OnTransferComplete();
		void OnRep_SmoothedUnloadRate();
		void OnRep_SmoothedLoadRate();
		void OnCargoPowerStateChanged(bool HasPower);
		void OnBeginUnloadSequence();
		void OnBeginLoadSequence();
		bool IsLoadUnloading();
		unsigned char IsFullUnload();
		unsigned char IsFullLoad();
		float GetOutflowRate();
		bool GetIsInLoadMode();
		class UFGInventoryComponent* GetInventory();
		float GetInflowRate();
		float GetDockedVehicleOffset();
		class AFGRailroadVehicle* GetDockedActor();
		float GetCurrentItemTransferRate();
		bool FilterResourceForms(class UClass* itemDesc, int32_t idx);
		bool Dock(class AFGRailroadVehicle* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableTrainPlatformEmpty
	 * Size -> 0x0008 (FullSize[0x0760] - InheritedSize[0x0758])
	 */
	class AFGBuildableTrainPlatformEmpty : public AFGBuildableTrainPlatform
	{
	public:
		unsigned char                                              UnknownData_92WM[0x8];                                   // 0x0758(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableWalkway
	 * Size -> 0x0018 (FullSize[0x0600] - InheritedSize[0x05E8])
	 */
	class AFGBuildableWalkway : public AFGBuildableFactoryBuilding
	{
	public:
		unsigned char                                              UnknownData_TYFI[0x4];                                   // 0x05E8(0x0004) Fix Super Size
		float                                                      mElevation;                                              // 0x05EC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFoundationSideSelectionFlags                       mDisableSnapOn;                                          // 0x05F0(0x0001) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ELMG[0xF];                                   // 0x05F1(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableWalkwayLightweight
	 * Size -> 0x0000 (FullSize[0x0600] - InheritedSize[0x0600])
	 */
	class AFGBuildableWalkwayLightweight : public AFGBuildableWalkway
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableWallLightweight
	 * Size -> 0x0000 (FullSize[0x0610] - InheritedSize[0x0610])
	 */
	class AFGBuildableWallLightweight : public AFGBuildableWall
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableWaterPump
	 * Size -> 0x0020 (FullSize[0x0810] - InheritedSize[0x07F0])
	 */
	class AFGBuildableWaterPump : public AFGBuildableResourceExtractor
	{
	public:
		float                                                      mMinimumDepthForPlacement;                               // 0x07F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R5S9[0x4];                                   // 0x07F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mDepthTraceOriginOffset;                                 // 0x07F8(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignClipboardSettings
	 * Size -> 0x00F0 (FullSize[0x0118] - InheritedSize[0x0028])
	 */
	class UFGSignClipboardSettings : public UFGFactoryClipboardSettings
	{
	public:
		struct FPrefabSignData                                     mPrefabSignData;                                         // 0x0028(0x00F0) BlueprintVisible, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableWidgetSign
	 * Size -> 0x0150 (FullSize[0x0790] - InheritedSize[0x0640])
	 */
	class AFGBuildableWidgetSign : public AFGBuildableSignBase
	{
	public:
		class UStaticMeshComponent*                                mSignProxyPlane;                                         // 0x0640(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mSignTypeDescriptor;                                     // 0x0648(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGSignPrefabWidget*                                 mPrefabLayout;                                           // 0x0650(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mGainSignificanceDistance;                               // 0x0658(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G2FL[0x4];                                   // 0x065C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FString, class FString>                         mTextElementToDataMap;                                   // 0x0660(0x0050) Protected, NativeAccessSpecifierProtected
		TMap<class FString, int32_t>                               mIconElementToDataMap;                                   // 0x06B0(0x0050) Protected, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  mWidgetMaterial;                                         // 0x0700(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  mEmissiveOnlySignMaterial;                               // 0x0708(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  mDefaultSignMaterial;                                    // 0x0710(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FIntPoint                                           mSignDrawSize;                                           // 0x0718(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mWidgetClass;                                            // 0x0720(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mActivePrefabLayout;                                     // 0x0728(0x0008) ZeroConstructor, SaveGame, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPrefabTextElementSaveData>                  mPrefabTextElementSaveData;                              // 0x0730(0x0010) ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		TArray<struct FPrefabIconElementSaveData>                  mPrefabIconElementSaveData;                              // 0x0740(0x0010) ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        mForegroundColor;                                        // 0x0750(0x0010) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        mBackgroundColor;                                        // 0x0760(0x0010) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        mAuxilaryColor;                                          // 0x0770(0x0010) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mEmissive;                                               // 0x0780(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mGlossiness;                                             // 0x0784(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              mDataVersion;                                            // 0x0788(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_42Q2[0x7];                                   // 0x0789(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetPrefabSignData(struct FPrefabSignData* SignData);
		void OnRep_SignDataDirty();
		void GetSignPrefabData(struct FPrefabSignData* out_signData);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableWindTurbine
	 * Size -> 0x0000 (FullSize[0x0700] - InheritedSize[0x0700])
	 */
	class AFGBuildableWindTurbine : public AFGBuildableFactory
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildableWire
	 * Size -> 0x0078 (FullSize[0x0650] - InheritedSize[0x05D8])
	 */
	class AFGBuildableWire : public AFGBuildable
	{
	public:
		unsigned char                                              UnknownData_B2ZZ[0x4];                                   // 0x05D8(0x0004) Fix Super Size
		float                                                      mMaxPowerTowerLength;                                    // 0x05DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mLengthPerCost;                                          // 0x05E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EPT1[0x4];                                   // 0x05E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mCircuitType;                                            // 0x05E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mWireMesh;                                               // 0x05F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UFGCircuitConnectionComponent>        mConnections[0x2];                                       // 0x05F8(0x0010) ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mConnectionLocations[0x2];                               // 0x0608(0x0030) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FWireInstance>                               mWireInstances;                                          // 0x0638(0x0010) ZeroConstructor, SaveGame, ContainsInstancedReference, NativeAccessSpecifierPrivate
		float                                                      mCachedLength;                                           // 0x0648(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HN3C[0x4];                                   // 0x064C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_Connections();
		TArray<class UStaticMeshComponent*> GetWireInstanceMeshes();
		float GetLength();
		struct FVector GetConnectionLocation(int32_t Index);
		class UFGCircuitConnectionComponent* GetConnection(int32_t Index);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCategory
	 * Size -> 0x00F8 (FullSize[0x0120] - InheritedSize[0x0028])
	 */
	class UFGCategory : public UObject
	{
	public:
		class FText                                                mDisplayName;                                            // 0x0028(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mMenuPriority;                                           // 0x0040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8OW8[0xC];                                   // 0x0044(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateBrush                                         mCategoryIcon;                                           // 0x0050(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void STATIC_SortInstancesByMenuPriority(TArray<class UFGCategory*>* itemCategories);
		void STATIC_SortByMenuPriority(TArray<class UClass*>* itemCategories);
		float GetMenuPriorityFromInstance();
		float STATIC_GetMenuPriority(class UClass* InClass);
		class FString GetCategoryNameFromInstanceAsString();
		class FText GetCategoryNameFromInstance();
		class FText STATIC_GetCategoryName(class UClass* InClass);
		class UTexture2D* GetCategoryIconFromInstance();
		struct FSlateBrush STATIC_GetCategoryIcon(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildCategory
	 * Size -> 0x0000 (FullSize[0x0120] - InheritedSize[0x0120])
	 */
	class UFGBuildCategory : public UFGCategory
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildDescriptor
	 * Size -> 0x0000 (FullSize[0x01A0] - InheritedSize[0x01A0])
	 */
	class UFGBuildDescriptor : public UFGItemDescriptor
	{
	public:
		class UClass* STATIC_GetHologramClass(class UClass* InClass);
		float STATIC_GetBuildMenuPriority(class UClass* InClass);
		class UClass* STATIC_GetBuildClass(class UClass* InClass);
		class UClass* STATIC_GetBuildCategory(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildEffectActor
	 * Size -> 0x03F8 (FullSize[0x06F0] - InheritedSize[0x02F8])
	 */
	class AFGBuildEffectActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_Z5CB[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_XUG5[0x18];                                  // 0x0300(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UMaterialInterface*, class UMaterialInterface*> mMaterialSwapMap;                                        // 0x0318(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mCurrentMaterializeAmount;                               // 0x0368(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaterializeAmountPerThrow;                              // 0x036C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    itemsThrown;                                             // 0x0370(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mEndStageSpeed;                                          // 0x0374(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mOffsetCurve;                                            // 0x0378(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mVolumeCurve;                                            // 0x0400(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mGlowCurve;                                              // 0x0488(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mFadeCurve;                                              // 0x0510(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       mShouldDelayBelts;                                       // 0x0598(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D9RX[0x3];                                   // 0x0599(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      splineBuildEffectSpeed;                                  // 0x059C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSplineDelayOffset;                                      // 0x05A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mThumbSoundPlayTime;                                     // 0x05A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mSplineClasses;                                          // 0x05A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FBox                                                mBounds;                                                 // 0x05B8(0x0038) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		TArray<class USplineComponent*>                            mOrganizedSplines;                                       // 0x05F0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EUTX[0x8];                                   // 0x0600(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMeshComponent*>                              mMeshComponents;                                         // 0x0608(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UMeshComponent*>                              mSplineBuildableComponents;                              // 0x0618(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class UMaterialInterface*                                  mBuildEffectMaterial;                                    // 0x0628(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInterface*                                  mBuildEffectSplineMaterial;                              // 0x0630(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UMaterialInstanceDynamic*>                    mBuildEffectMaterialInstance;                            // 0x0638(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FItemAmount>                                 mCost;                                                   // 0x0648(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PTJZ[0x20];                                  // 0x0658(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsSpline;                                               // 0x0678(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YM2A[0x3];                                   // 0x0679(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mMaxNumParts;                                            // 0x067C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DL3Q[0x10];                                  // 0x0680(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mThrowQueue;                                             // 0x0690(0x0010) ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DGNF[0x50];                                  // 0x06A0(0x0050) MISSED OFFSET (PADDING)

	public:
		void UpdateVFX(float Duration);
		void UpdateSplineVFX(float Duration);
		void SpawnCostEffectActor(const struct FTransform& SpawnLocation, const struct FVector& TargetLocation, float TargetExtent, class UClass* Item);
		void PlayThumbSound();
		void PlayBuildFinishedEffect();
		void OnCostActorReachedTarget();
		float GetVolume();
		struct FTransform GetTransformOnSplines(bool bWorldSpace);
		bool GetDidStartSplineEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildEffectSettings
	 * Size -> 0x0090 (FullSize[0x00C8] - InheritedSize[0x0038])
	 */
	class UFGBuildEffectSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              mDefaultBuildEffect[0x30];                               // 0x0038(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mDefaultDismantleEffect[0x30];                           // 0x0068(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mWireBuildEffect[0x30];                                  // 0x0098(0x0030) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildEffectSpline
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGBuildEffectSpline : public AActor
	{
	public:
		class AFGPipeBuilderTrail*                                 mAttachment;                                             // 0x02F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetupAttachment(class AFGPipeBuilderTrail* inAttachment);
		class AFGPipeBuilderTrail* GetAttachment();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildGunState
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UFGBuildGunState : public UObject
	{
	public:
		class UInputMappingContext*                                mMappingContext;                                         // 0x0028(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mActionDelay;                                            // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M4XN[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                mActionMessage;                                          // 0x0038(0x0018) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MOYC[0x8];                                   // 0x0050(0x0008) MISSED OFFSET (PADDING)

	public:
		void TickState(float DeltaTime);
		void SecondaryFire();
		void Scroll(int32_t Delta);
		void ResetBuildGunDelay();
		void PrimaryFireRelease();
		void PrimaryFire();
		void OnRecipeSampled(class UClass* recipe);
		void OnCustomizationsSampled(TArray<class UClass*>* newCustomizations);
		void OnBuildGunModeChanged(class UClass* NewMode);
		bool IsCurrentBuildGunMode(class UClass* buildMode);
		bool IsActive();
		bool HasBuildGunDelay();
		bool HasAuthority();
		void GetSupportedBuildModes(TArray<class UClass*>* out_buildmodes);
		class UClass* GetInitialBuildGunMode();
		float GetBuildGunRangeOverride();
		float GetBuildGunDelayPercentage();
		class FText GetBuildGunDelayMessage();
		class AFGBuildGun* GetBuildGun();
		void EndState();
		void BuildSampleRelease();
		void BuildSamplePressed();
		bool BuildGunDelayIsComplete();
		void BeginState();
		void BeginBuildGunDelay();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEquipment
	 * Size -> 0x0188 (FullSize[0x0480] - InheritedSize[0x02F8])
	 */
	class AFGEquipment : public AActor
	{
	public:
		unsigned char                                              UnknownData_X6VV[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_XY7P[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mAttachmentClass;                                        // 0x0308(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mSecondaryAttachmentClass;                               // 0x0310(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EEquipmentSlot                                             mEquipmentSlot;                                          // 0x0318(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SBNJ[0x7];                                   // 0x0319(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraAnimationSequence*                            mSprintHeadBobCameraAnim;                                // 0x0320(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       mEquipSound;                                             // 0x0328(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       mUnequipSound;                                           // 0x0330(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mEquipmentWidget;                                        // 0x0338(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGEquipmentChild*                                   mChildEquipment;                                         // 0x0340(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              m1PAnimClass;                                            // 0x0348(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mAttachSocket;                                           // 0x0350(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, struct FFirstPersonMaterialArray>        mComponentNameToFirstPersonMaterials;                    // 0x0358(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mChildEquipmentClass;                                    // 0x03A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mNeedsDefaultEquipmentMappingContext;                    // 0x03B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FWMQ[0x7];                                   // 0x03B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FItemAmount>                                 mCostToUse;                                              // 0x03B8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		EArmEquipment                                              mArmAnimation;                                           // 0x03C8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBackEquipment                                             mBackAnimation;                                          // 0x03C9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasPersistentOwner;                                     // 0x03CA(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mOnlyVisibleToOwner;                                     // 0x03CB(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LKAQ[0x4];                                   // 0x03CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputMappingContext*                                mMappingContext;                                         // 0x03D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              mDefaultEquipmentActions;                                // 0x03D8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NRDY[0x7];                                   // 0x03D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGEquipmentAttachment*                              mAttachment;                                             // 0x03E0(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGEquipmentAttachment*                              mSecondaryAttachment;                                    // 0x03E8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6FZ6[0x8];                                   // 0x03F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequence*                                       mIdlePoseAnimation;                                      // 0x03F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAnimSequence*                                       mIdlePoseAnimation3p;                                    // 0x0400(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAnimSequence*                                       mCrouchPoseAnimation3p;                                  // 0x0408(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAnimSequence*                                       mSlidePoseAnimation3p;                                   // 0x0410(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAimOffsetBlendSpace*                                mAttachmentIdleAO;                                       // 0x0418(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FDamageModifier>                             mReceivedDamageModifiers;                                // 0x0420(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<class FName, struct FFirstPersonMaterialArray>        mSwappedOutThirdPersonMaterials;                         // 0x0430(0x0050) Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPrivate

	public:
		void WasUnEquipped();
		void WasSlottedIn(class AFGCharacterPlayer* holder);
		void WasRemovedFromSlot();
		void WasEquipped();
		void UnEquip();
		bool ShouldShowStinger();
		void SetSelectedConsumableTypeIndex(int32_t selectedIndex);
		void Server_UpdateAttachmentUseState(int32_t newUseState);
		void Server_TriggerDefaultEquipmentActionEvent(EDefaultEquipmentAction Action, EDefaultEquipmentActionEvent actionEvent);
		void Server_ChargeForUse();
		void PlayCameraAnimation(class UCameraAnimationSequence* CameraAnimationSequence);
		void OnColorUpdate(int32_t Index);
		void OnChildEquipmentReplicated();
		void OnCameraModeChanged(ECameraMode newCameraMode);
		bool IsLocalInstigator();
		bool IsEquipped();
		void GetSupportedConsumableTypes(TArray<class UClass*>* out_itemDescriptors);
		class UAnimSequence* GetSlidePoseAnimation3p();
		int32_t GetSelectedConsumableTypeIndex();
		class AFGEquipmentAttachment* GetSecondaryAttachment();
		class AFGCharacterPlayer* GetInstigatorCharacter();
		ECameraMode GetInstigatorCameraMode();
		class UAnimSequence* GetIdlePoseAnimation3p();
		class UAnimSequence* GetIdlePoseAnimation();
		EEquipmentSlot STATIC_GetEquipmentSlot(class UClass* InClass);
		class UAnimSequence* GetCrouchPoseAnimation3p();
		float GetCharacterUseDistanceOverride();
		class UAimOffsetBlendSpace* GetAttachmentIdleAO();
		class AFGEquipmentAttachment* GetAttachment();
		void Equip(class AFGCharacterPlayer* Character);
		void DoHandleDefaultEquipmentActionEvent(EDefaultEquipmentAction Action, EDefaultEquipmentActionEvent actionEvent);
		void DisableEquipment();
		void DidNotAffordUse();
		void ChargeForUse();
		bool CanAffordUse();
		float AdjustDamage(float DamageAmount, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildGun
	 * Size -> 0x01E0 (FullSize[0x0660] - InheritedSize[0x0480])
	 */
	class AFGBuildGun : public AFGEquipment
	{
	public:
		unsigned char                                              UnknownData_VVZP[0x8];                                   // 0x0480(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnStateChanged;                                         // 0x0488(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnMenuStateChanged;                                     // 0x0498(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnRecipeChanged;                                        // 0x04A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnRecipeSampled;                                        // 0x04B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnCustomizationsSampled;                                // 0x04C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnBuildGunModeChanged;                                  // 0x04D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      mBuildDistanceMax;                                       // 0x04E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RF3K[0x4];                                   // 0x04EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mMenuStateClass;                                         // 0x04F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mBuildStateClass;                                        // 0x04F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mDismantleStateClass;                                    // 0x0500(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mPaintStateClass;                                        // 0x0508(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CV9V[0x8];                                   // 0x0510(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGBuildGunState*                                    mStates[0x5];                                            // 0x0518(0x0028) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mCurrentBuildGunMode;                                    // 0x0540(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_R5JB[0x8];                                   // 0x0548(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FHitResult                                          mHitResult;                                              // 0x0550(0x00E8) IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		EBuildGunState                                             mCurrentStateEnum;                                       // 0x0638(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y14J[0x7];                                   // 0x0639(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGBuildGunState*                                    mCurrentState;                                           // 0x0640(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FYQ8[0x2];                                   // 0x0648(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsWaitingForSelectionUI;                                // 0x064A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_E9LA[0x5];                                   // 0x064B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mBuildModeSelectHoldDownDurationForUI;                   // 0x0650(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VM8I[0xC];                                   // 0x0654(0x000C) MISSED OFFSET (PADDING)

	public:
		void TryBuildSample();
		void ShowBuildGunModeSelectUI();
		void SetMenuStateSection(EMenuStateSection desiredSection, bool broadcastUpdate);
		void SetDesiredBlueprint(const class FString& BlueprintName);
		void SetCustomizationDataForSlot(unsigned char SlotIndex, const struct FFactoryCustomizationColorSlot& slotData);
		void SetCurrentBuildGunMode(class UClass* Mode);
		void Server_SetDesiredBlueprint(const class FString& BlueprintName);
		void Server_SetCustomizationDataForSlot(unsigned char SlotIndex, const struct FFactoryCustomizationColorSlot& slotData);
		void Server_SetCurrentBuildGunMode(class UClass* Mode);
		void Server_SecondaryFire();
		void Server_Scroll(int32_t Delta);
		void Server_PrimaryFire();
		void Server_GotoState(EBuildGunState State);
		void Server_GotoPaintState(class UClass* customizationRecipe);
		void Server_GotoBuildState(class UClass* recipe);
		void OnRep_CurrentBuildGunMode();
		bool IsWaitingForBuildGunModeSelectUI();
		bool IsInState(EBuildGunState InState);
		bool IsCurrentBuildGunMode(class UClass* buildMode);
		void GotoPaintState(class UClass* customizationRecipe, bool clearCache);
		void GotoMenuState();
		void GotoDismantleState();
		void GotoBuildState(class UClass* recipe);
		EMenuStateSection GetMenuStateSection();
		class UFGInventoryComponent* GetInventory();
		float GetDefaultBuildGunRange();
		class UFGBuildGunState* GetCurrentState();
		class UClass* GetCurrentBuildGunMode();
		float GetCurrentBuildGunDelayPercentage();
		class FText GetCurrentBuildGunDelayMessage();
		TArray<struct FItemAmount> GetCostForRecipe(class UClass* recipe);
		class UFGBuildGunState* GetBuildGunStateFor(EBuildGunState gunState);
		float GetBuildGunRange();
		void GetAvailableRecipes(TArray<class UClass*>* out_recipes, TArray<class UClass*>* out_customizationRecipes);
		void CycleBuildMode(int32_t deltaIndex);
		bool CompareActiveRecipeTo(class UClass* recipe);
		void CloseBuildGunModeSelectUI();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEquipmentAttachment
	 * Size -> 0x0040 (FullSize[0x0338] - InheritedSize[0x02F8])
	 */
	class AFGEquipmentAttachment : public AActor
	{
	public:
		class UClass*                                              mEquipmentClass;                                         // 0x02F8(0x0008) Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             mUseLocation;                                            // 0x0300(0x0018) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mAttachSocket;                                           // 0x0318(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EArmEquipment                                              mArmAnimation;                                           // 0x0320(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EBackEquipment                                             mBackAnimation;                                          // 0x0321(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7Q8O[0x6];                                   // 0x0322(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGCharacterPlayer*                                  mAttachedTo;                                             // 0x0328(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EEquipmentSlot                                             mEquipmentSlot;                                          // 0x0330(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TS2O[0x3];                                   // 0x0331(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mAnimationState;                                         // 0x0334(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void PlayUseEffect(const struct FVector& UseLocation);
		void PlayDetachEffects3P();
		void PlayAttachEffects3P();
		void OnRep_UseLocationUpdated();
		void OnRep_OnAnimationStateUpdated();
		void OnDetach();
		void OnColorUpdate(int32_t Index);
		void OnCameraModeChanged(ECameraMode newCameraMode);
		void OnAttachmentUseStateUpdated(int32_t newUseState);
		void OnAttach();
		bool IsAttached();
		EEquipmentSlot GetEquippedSlot();
		class FName GetAttachSocket();
		class AFGCharacterPlayer* GetAttachedTo();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildGunAttachment
	 * Size -> 0x0008 (FullSize[0x0340] - InheritedSize[0x0338])
	 */
	class AFGBuildGunAttachment : public AFGEquipmentAttachment
	{
	public:
		unsigned char                                              UnknownData_9P6Z[0x8];                                   // 0x0338(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildGunStateBuild
	 * Size -> 0x0150 (FullSize[0x01A8] - InheritedSize[0x0058])
	 */
	class UFGBuildGunStateBuild : public UFGBuildGunState
	{
	public:
		class FScriptMulticastDelegate                             OnZoopUpdatedDelegate;                                   // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHologramLockStateChangedDelegate;                      // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHologramNudgeOffsetChangedDelegate;                    // 0x0078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnHologramNudgeFailedDelegate;                           // 0x0088(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RNF6[0x4];                                   // 0x0098(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsUsingPressAndReleaseAsBuildSteps;                     // 0x009C(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6W5O[0xB];                                   // 0x009D(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mPendingRecipe;                                          // 0x00A8(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mActiveRecipe;                                           // 0x00B0(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MJ90[0xA0];                                  // 0x00B8(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGHologram*                                         mHologram;                                               // 0x0158(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              mUpgradedActor;                                          // 0x0160(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FActorClearanceData>                         mProximateClearances;                                    // 0x0168(0x0010) ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UBoxComponent*>                               mClearanceDetectors;                                     // 0x0178(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_R2SE[0x10];                                  // 0x0188(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGBlueprintDescriptor*                              mActiveBlueprintDescriptor;                              // 0x0198(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VOV4[0x8];                                   // 0x01A0(0x0008) MISSED OFFSET (PADDING)

	public:
		void Server_UpdateNudgeOffset(const struct FVector& NewNudgeOffset);
		void Server_ToggleHologramPositionLock();
		void Server_SetUseAutomaticClearanceSnapping(bool useAutomaticSnapping);
		void Server_ConstructHologram(const struct FNetConstructionID& clientNetConstructID, const struct FConstructHologramMessage& Data);
		void Server_ChangeGuideLinesSnapMode(bool Enabled);
		void ResetHologram();
		void OnZoopUpdated(float currentZoop, float maxZoop, const struct FVector& zoopLocation);
		void OnUserSettingsUpdated();
		void OnResetHologram();
		void OnMultiStepPlacement(bool isFinalStep);
		void OnActiveDescriptorChanged();
		class UClass* GetLastBuildModeForCategory(unsigned char Category, class UClass* ActorClass);
		TArray<struct FItemAmount> GetHologramCost();
		class AFGHologram* GetHologram();
		class UClass* GetDescriptor();
		void EndClearanceDetectorOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void Client_OnRecipeBuilt(class UClass* recipe, int32_t numConstructed);
		void Client_OnBuildableFailedConstruction(const struct FNetConstructionID& NetConstructionID);
		void Client_OnBuildableConstructed(class UClass* Desc);
		void Client_OnBlueprintConstructed(const class FString& BlueprintName, int32_t numConstructed);
		void BeginClearanceDetectorOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildGunStateDismantle
	 * Size -> 0x0160 (FullSize[0x01B8] - InheritedSize[0x0058])
	 */
	class UFGBuildGunStateDismantle : public UFGBuildGunState
	{
	public:
		class FScriptMulticastDelegate                             OnPeekRefundsChanged;                                    // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnPendingDismantleActorsChanged;                         // 0x0068(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnMultiDismantleStateChanged;                            // 0x0078(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnDismantleFilterChanged;                                // 0x0088(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  mHoverProxyMaterial;                                     // 0x0098(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q0JS[0x8];                                   // 0x00A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mCurrentDismantleClassFilter;                            // 0x00A8(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGBlueprintDescriptor*                              mCurrentDismantleBlueprintFilter;                        // 0x00B0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F5YV[0x8];                                   // 0x00B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              mCurrentlySelectedActor;                                 // 0x00C0(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              mCurrentlyAimedAtActor;                                  // 0x00C8(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      mPendingDismantleActors;                                 // 0x00D0(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TMap<class UStaticMesh*, class UInstancedStaticMeshComponent*> mPendingDismantleStencilMeshes;                          // 0x00E0(0x0050) ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		struct FDismantleRefunds                                   mPeekDismantleRefund;                                    // 0x0130(0x0018) Net, Transient, RepNotify, NativeAccessSpecifierPrivate
		class UClass*                                              mDefaultDismantleMode;                                   // 0x0148(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mBlueprintDismantleMode;                                 // 0x0150(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OEGF[0x8];                                   // 0x0158(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent*                                    mBlueprintProxyDetector;                                 // 0x0160(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class AFGBlueprintProxy*, class UStaticMeshComponent*> mBlueprintProxyVisualMeshes;                             // 0x0168(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		void SetMultiDismantleState(bool IsActive);
		void SetDismantleClassFilter(class AActor* actorToFilter);
		void Server_PeekAtDismantleRefund(TArray<class AActor*> SelectedActors, bool noBuildCostEnabled);
		void Server_DismantleActors(TArray<class AActor*> SelectedActors);
		void OnStopDismantle();
		void OnStartDismantle();
		void OnRep_PeekDismantleRefund();
		bool IsMultiDismantleActive();
		bool HasReachedMaxNumPendingDismantleActors();
		class AActor* GetSelectedActor();
		TArray<struct FInventoryStack> GetPeekDismantleRefund();
		int32_t GetNumPendingDismantleActors(bool includeAimedAtActor);
		int32_t GetMaxNumPendingDismantleActors();
		TArray<struct FInventoryStack> GetDismantleRefund(bool noBuildCostEnabled);
		class UClass* GetCurrentDismantleClassFilter();
		void EndDetectorOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		bool CanDismantle();
		void BeginDetectorOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildGunModeDescriptor
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFGBuildGunModeDescriptor : public UObject
	{
	public:
		class FText                                                mDisplayName;                                            // 0x0028(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		class FText GetDisplayNameInternal();
		class FText STATIC_GetDisplayName(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildGunStatePaint
	 * Size -> 0x0108 (FullSize[0x0160] - InheritedSize[0x0058])
	 */
	class UFGBuildGunStatePaint : public UFGBuildGunState
	{
	public:
		class FScriptMulticastDelegate                             OnCustomizeFilterChanged;                                // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  mHoverProxyMaterial;                                     // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mInvisibleMaterialDescriptor;                            // 0x0070(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mConstructDisqualifiers;                                 // 0x0078(0x0010) ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate
		unsigned char                                              mActiveColorSlot;                                        // 0x0088(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UXPI[0x7];                                   // 0x0089(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mCurrentCustomizeClassFilter;                            // 0x0090(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mActiveRecipe;                                           // 0x0098(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mActiveColorSwatch;                                      // 0x00A0(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mActivePatternDesc;                                      // 0x00A8(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mActiveMaterialDesc;                                     // 0x00B0(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mActiveSkinDesc;                                         // 0x00B8(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              mPatternRotation;                                        // 0x00C0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O6SP[0x2F];                                  // 0x00C1(0x002F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              mCurrentCustomizationTarget;                             // 0x00F0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              mCurrentlyAimedAtActor;                                  // 0x00F8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              mLastAppliedActor;                                       // 0x0100(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              mPreviewActor;                                           // 0x0108(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class UStaticMesh*, class UInstancedStaticMeshComponent*> mPendingPreviewMeshes;                                   // 0x0110(0x0050) ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		void SetCustomizeClassFilter(class AActor* actorToFilter);
		void SetActiveSwatchDesc(class UClass* SwatchDesc);
		void SetActiveSkinDesc(class UClass* SkinDesc);
		void SetActiveRecipe(class UClass* customizationRecipe);
		void SetActivePatternDesc(class UClass* PatternDesc);
		void SetActiveMaterialDesc(class UClass* MaterialDesc);
		void SetActiveCustomization(class UClass* customizationDesc);
		void Server_ExecutePrimaryFire();
		void Server_ExecutePaint(unsigned char Mode, const struct FFactoryCustomizationData& customizationData, class AActor* HitActor);
		void RemoveCustomization(class UClass* Customization);
		void OnSwatchDescriptorChanged(class UClass* newColorDesc);
		void OnSkinDescriptorChanged(class UClass* newSkinDesc);
		void OnPatternRotationChanged(unsigned char patternOrientation);
		void OnPatternDescriptorChanged(class UClass* newPatternDesc);
		void OnMaterialDescriptorChanged(class UClass* newMaterialDesc);
		void OnHitStatusChanged(class UClass* hitBuildingDesc, bool validSwatch, bool validPattern, bool validMaterial);
		void OnApplyCustomizationFailed();
		void OnApplyCustomization(class UClass* customizationDesc);
		bool IsSwatchHitValid();
		bool IsRecipeActive(class UClass* InClass);
		bool IsPatternHitValid();
		bool IsMaterialHitValid();
		bool IsCustomizationActive(class UClass* Customization);
		TArray<struct FItemAmount> GetCustomizationCost();
		TArray<class UClass*> GetConstructDisqualifiers();
		class UClass* GetActiveSwatchDesc();
		class UClass* GetActiveSkinDesc();
		class UClass* GetActiveRecipe();
		class UClass* GetActivePatternDesc();
		class UClass* GetActiveMaterialDesc();
		void ClearAllCustomizations();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildingDescriptor
	 * Size -> 0x0008 (FullSize[0x01A8] - InheritedSize[0x01A0])
	 */
	class UFGBuildingDescriptor : public UFGBuildDescriptor
	{
	public:
		class UClass*                                              mBuildableClass;                                         // 0x01A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		bool STATIC_HasVariablePowerConsumption(class UClass* InClass);
		float STATIC_GetPowerProduction(class UClass* InClass);
		float STATIC_GetPowerConsumption(class UClass* InClass);
		float STATIC_GetMinimumPowerConsumption(class UClass* InClass);
		float STATIC_GetMaximumPowerConsumption(class UClass* InClass);
		class UClass* STATIC_GetBuildableClass(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildingTagInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGBuildingTagInterface : public UInterface
	{
	public:
		void SetHasBuildingTag(bool HasBuildingTag);
		void SetBuildingTag(const class FString& buildingTag);
		bool HasBuildingTag();
		class FString GetBuildingTag();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBuildSubCategory
	 * Size -> 0x0000 (FullSize[0x0120] - InheritedSize[0x0120])
	 */
	class UFGBuildSubCategory : public UFGBuildCategory
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGButtonWidget
	 * Size -> 0x0008 (FullSize[0x0288] - InheritedSize[0x0280])
	 */
	class UFGButtonWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_ZMID[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (PADDING)

	public:
		void SimulateKeyPress();
		void SetButton(class UButton* inButton);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGC4Explosive
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class AFGC4Explosive : public AActor
	{
	public:
		unsigned char                                              UnknownData_FDRT[0x4];                                   // 0x02F8(0x0004) Fix Super Size
		float                                                      mDamageRadius;                                           // 0x02FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mDamageType;                                             // 0x0300(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsDetonated;                                            // 0x0308(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C3N6[0x7];                                   // 0x0309(0x0007) MISSED OFFSET (PADDING)

	public:
		void PlayExplosionEffects();
		void OnRep_IsDetonated();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCalendarRewards
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UFGCalendarRewards : public UObject
	{
	public:
		TArray<class UFGUnlock*>                                   mSlotUnlocks;                                            // 0x0028(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGUnlock*>                                   mRandomUnlocks;                                          // 0x0038(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FItemAmount>                                 mSlotRewards;                                            // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<struct FItemAmount>                                 mRandomRewards;                                          // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCameraModifierLimitLook
	 * Size -> 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
	 */
	class UFGCameraModifierLimitLook : public UCameraModifier
	{
	public:
		unsigned char                                              UnknownData_1VCC[0x18];                                  // 0x0048(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mMaxPitch;                                               // 0x0060(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMaxYaw;                                                 // 0x0064(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetDefaultLookRotator(const struct FRotator& InRotator);
		struct FRotator GetDefaultLookRotator();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCameraModifierSlide
	 * Size -> 0x0020 (FullSize[0x0068] - InheritedSize[0x0048])
	 */
	class UFGCameraModifierSlide : public UCameraModifier
	{
	public:
		unsigned char                                              UnknownData_YNS9[0x18];                                  // 0x0048(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mMinPitch;                                               // 0x0060(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_44UD[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (PADDING)

	public:
		void SetDefaultLookRotator(const struct FRotator& InRotator);
		struct FRotator GetDefaultLookRotator();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCeilingLightHologram
	 * Size -> 0x0008 (FullSize[0x0690] - InheritedSize[0x0688])
	 */
	class AFGCeilingLightHologram : public AFGBuildableHologram
	{
	public:
		unsigned char                                              UnknownData_RJ8D[0x8];                                   // 0x0688(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCentralStorageContainer
	 * Size -> 0x0010 (FullSize[0x0770] - InheritedSize[0x0760])
	 */
	class AFGCentralStorageContainer : public AFGBuildableStorage
	{
	public:
		unsigned char                                              UnknownData_R188[0x10];                                  // 0x0760(0x0010) MISSED OFFSET (PADDING)

	public:
		bool UpdateRepresentation();
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		bool IsActorStatic();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		void AddToCentralStorageSubsystem();
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCentralStorageSubsystem
	 * Size -> 0x0028 (FullSize[0x0320] - InheritedSize[0x02F8])
	 */
	class AFGCentralStorageSubsystem : public AFGSubsystem
	{
	public:
		class FScriptMulticastDelegate                             CentralStorageAddedOrRemoved;                            // 0x02F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class AFGCentralStorageContainer*>                  mCentralStorages;                                        // 0x0308(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Q3JK[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (PADDING)

	public:
		void RemoveItemsFromCentralStorage(class UClass* ItemClass, int32_t Num);
		bool IsCentralStorageBuilt();
		int32_t GetNumItemsFromCentralStorage(class UClass* ItemClass);
		TArray<class AFGCentralStorageContainer*> GetCentralStorageContainers();
		class AFGCentralStorageSubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGChainsaw
	 * Size -> 0x0040 (FullSize[0x04C0] - InheritedSize[0x0480])
	 */
	class AFGChainsaw : public AFGEquipment
	{
	public:
		class UClass*                                              mFuelClass;                                              // 0x0480(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mEnergyConsumption;                                      // 0x0488(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSawDownTreeTime;                                        // 0x048C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCollateralPickupRadius;                                 // 0x0490(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mExcludeChainsawableFoliage;                             // 0x0494(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XIC2[0x3];                                   // 0x0495(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mChainsawNoise;                                          // 0x0498(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mEnergyStored;                                           // 0x04A0(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSawingProgress;                                         // 0x04A4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HNUI[0x8];                                   // 0x04A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     mSawingComponent;                                        // 0x04B0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EFGChainsawState                                           mChainsawState;                                          // 0x04B8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8UGF[0x7];                                   // 0x04B9(0x0007) MISSED OFFSET (PADDING)

	public:
		void Server_TransitionToNewState(EFGChainsawState NewState);
		void Server_StopSawing();
		void Server_StartSawing();
		void Server_RemoveFoliageInstance(const struct FFoliageInstanceStableId& stableId, const struct FVector& effectLocation, const struct FTransform& InstanceTransform);
		void Server_RemoveChainsawableObject();
		float SawProgress();
		void OnRep_ChainsawState(EFGChainsawState oldState);
		void OnChainsawStateTransition(EFGChainsawState oldState);
		bool IsSpinningUpTransitionFinished();
		bool IsSpinningUp();
		bool IsSawing();
		bool IsSawEngaged();
		bool HasAnyFuel();
		class UClass* GetFuelClass();
		EFGChainsawState GetChainsawState();
		void CreatePhysicsFromFoliage(class UStaticMesh* InMesh, const struct FTransform& InTransform);
		void BroadcastPickup(TArray<struct FPickedUpInstance> pickups, class AFGFoliagePickup* instigatorPlayer);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGChainsawableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGChainsawableInterface : public UInterface
	{
	public:
		bool IsChainsawable();
		class UStaticMeshComponent* GetMeshComponent();
		struct FInventoryStack GetActorChainsawReturn();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGChaosWheel
	 * Size -> 0x0000 (FullSize[0x02E0] - InheritedSize[0x02E0])
	 */
	class UFGChaosWheel : public UChaosVehicleWheel
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGChaosWheeledVehicle
	 * Size -> 0x0000 (FullSize[0x0390] - InheritedSize[0x0390])
	 */
	class AFGChaosWheeledVehicle : public AWheeledVehiclePawn
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCharacterBase
	 * Size -> 0x0218 (FullSize[0x08B0] - InheritedSize[0x0698])
	 */
	class AFGCharacterBase : public ACharacter
	{
	public:
		unsigned char                                              UnknownData_UIOF[0x8];                                   // 0x0698(0x0008) Fix Super Size
		TArray<class FName>                                        mFeetNames;                                              // 0x06A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FFootstepEffect                                     mDefaultFootstepEffect;                                  // 0x06B0(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FFootstepEffectSurface>                      mFootstepEffect;                                         // 0x06C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UAkAudioEvent*>                               mFootstepAudioEvents;                                    // 0x06D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mMaxFootstepParticleSpawnDistance;                       // 0x06E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxFootstepDecalSpawnDistance;                          // 0x06EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     mFootstepDecalSize;                                      // 0x06F0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mFootstepDecalLifetime;                                  // 0x0700(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AB5K[0x4];                                   // 0x0704(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mFootstepWalkingNoiseClass;                              // 0x0708(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mFootstepSprintingNoiseClass;                            // 0x0710(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mFootstepLandingNoiseClass;                              // 0x0718(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGHealthComponent*                                  mHealthComponent;                                        // 0x0720(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, EditConst, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGDotReceiverComponent*                             mDOTReceiverComponent;                                   // 0x0728(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsInGas;                                                // 0x0730(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UZND[0x7];                                   // 0x0731(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCurveFloat*                                         mFallDamageCurve;                                        // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         mFallDamageCurveOverride;                                // 0x0740(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mFallDamageDamageType;                                   // 0x0748(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mVehicleDamageMultiplier;                                // 0x0750(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ELA3[0xC];                                   // 0x0754(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mMaxDeathStayTime;                                       // 0x0760(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDeathRemoveCheckTime;                                   // 0x0764(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7H6C[0x8];                                   // 0x0768(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       mTakeDamageSound;                                        // 0x0770(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mDeathSound;                                             // 0x0778(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mLandEvent;                                              // 0x0780(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     mTakeDamageParticle;                                     // 0x0788(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMinVehiclePushVelocityForRagdoll;                       // 0x0790(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTimeToGetUpFromRagdoll;                                 // 0x0794(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxDistanceMovedToGetUp;                                // 0x0798(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WB58[0xC];                                   // 0x079C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsRagdolled;                                            // 0x07A8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3M3U[0x1F];                                  // 0x07A9(0x001F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mRagdollMeshLoc;                                         // 0x07C8(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mRagdollMeshVelocity;                                    // 0x07E0(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mRagdollMeshAngularVelocity;                             // 0x07F8(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mRagdollMeshLocBoneName;                                 // 0x0810(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mRagdollMeshPhysicsBoneName;                             // 0x0818(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RC9V[0x66];                                  // 0x0820(0x0066) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mApplyDamageMomentum;                                    // 0x0886(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_09G6[0x1];                                   // 0x0887(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mIgnoredDamageTypes;                                     // 0x0888(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<struct FBoneDamageModifier>                         mBoneDamageModifiers;                                    // 0x0898(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mNormalDamageMultiplier;                                 // 0x08A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2SXU[0x1];                                   // 0x08AC(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsPossessed;                                            // 0x08AD(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5NOI[0x2];                                   // 0x08AE(0x0002) MISSED OFFSET (PADDING)

	public:
		bool TraceForGround(const struct FVector& TraceStart, const struct FVector& TraceEnd, struct FHitResult* out_hitResult, float* out_waterDepth);
		void SetFallDamageOverride(class UCurveFloat* fallDamageCurveOverride);
		void ReceiveDied();
		int32_t ReceivedAdjustDamage(float DamageAmount, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void RagdollCharacter(bool newRagdoll);
		void PlayFootstepEffect(int32_t footDown, bool PlaySound);
		void OnTakeRadialDamage(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
		void OnTakePointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, const class FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser);
		void OnTakeDamage(class AActor* DamagedActor, float DamageAmount, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void OnRep_IsRagdolled();
		void OnRep_IsPossessed();
		void OnLocallyPossessedChanged(bool isLocallyPossessed);
		void NotifyOnWeakspotHit(const struct FVector& HitLocation);
		void NotifyOnTakeRadialDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class UDamageType* DamageType, class AActor* DamageCauser);
		void NotifyOnTakePointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, const class FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser);
		void NotifyOnTakeDamage(class AActor* DamagedActor, float DamageAmount, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void NotifyOnNormalHit(const struct FVector& HitLocation);
		void NotifyOnArmorHit(const struct FVector& HitLocation);
		bool IsRagdolled();
		bool IsPossessed();
		bool IsAliveAndWell();
		class UAkAudioEvent* GetTakeDamageSound();
		class UParticleSystem* GetTakeDamageParticle();
		class USkeletalMeshComponent* GetMesh3P();
		class USkeletalMeshComponent* GetMainMesh();
		class UFGHealthComponent* GetHealthComponent();
		class UClass* GetFallDamageDamageType();
		class UAkAudioEvent* GetDeathSound();
		void Died(class AActor* thisActor);
		void CheckIfShouldDestroy();
		int32_t CalculateFallDamage(float zSpeed);
		float AdjustDamage(class AActor* DamagedActor, float DamageAmount, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCharacterMovementComponent
	 * Size -> 0x0398 (FullSize[0x12A0] - InheritedSize[0x0F08])
	 */
	class UFGCharacterMovementComponent : public UCharacterMovementComponent
	{
	public:
		unsigned char                                              UnknownData_1X4T[0x4];                                   // 0x0F08(0x0004) Fix Super Size
		float                                                      mClimbSpeed;                                             // 0x0F0C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMaxSprintSpeed;                                         // 0x0F10(0x0004) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IRER[0x8];                                   // 0x0F14(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSprintMinDotResult;                                     // 0x0F1C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mJumpOffLadderVelocity;                                  // 0x0F20(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_AE3B[0x4];                                   // 0x0F24(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGCharacterPlayer*                                  mFGCharacterOwner;                                       // 0x0F28(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGParachuteSettings*                                mParachuteSettings;                                      // 0x0F30(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D1J0[0x8];                                   // 0x0F38(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGJetPack*                                          mCachedJetPack;                                          // 0x0F40(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGHookshot*                                         mCachedHookshot;                                         // 0x0F48(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGJumpingStilts*                                    mCachedJumpingStilts;                                    // 0x0F50(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGHoverPack*                                        mCachedHoverPack;                                        // 0x0F58(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableRailroadTrack*                           mCachedSurfedRailroadTrack;                              // 0x0F60(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BGX1[0x18];                                  // 0x0F68(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGLadderComponent*                                  mOnLadder;                                               // 0x0F80(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FPlayerPipeHyperData                                mPipeData;                                               // 0x0F88(0x0190) Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate
		struct FFGPendingHyperJunctionInfo                         mPendingHyperJunction;                                   // 0x1118(0x0028) ContainsInstancedReference, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         mSlideCurve;                                             // 0x1140(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         mSlopeCurve;                                             // 0x1148(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YD0X[0x4];                                   // 0x1150(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mMaxSlideAngle;                                          // 0x1154(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_430Z[0x18];                                  // 0x1158(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mBaseVelocity;                                           // 0x1170(0x0018) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mBoostJumpZMultiplier;                                   // 0x1188(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mBoostJumpVelocityMultiplier;                            // 0x118C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OHHM[0x4];                                   // 0x1190(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mBoostJumpTimeWindow;                                    // 0x1194(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mEnableVaultPrototype;                                   // 0x1198(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L650[0x3];                                   // 0x1199(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mVaultSweepDistance;                                     // 0x119C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mVaultHeightThreshold;                                   // 0x11A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mVaultForwardVelocity;                                   // 0x11A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mVaultVerticalVelocity;                                  // 0x11A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mLedgeClimbHeightThreshold;                              // 0x11AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JKKU[0x10];                                  // 0x11B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPlayerZiplineData                                  mZiplineData;                                            // 0x11C0(0x00A0) Edit, NoDestructor, NativeAccessSpecifierPrivate
		float                                                      mZiplineSpeed;                                           // 0x1260(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mZiplineSprintSpeed;                                     // 0x1264(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mZiplineCorrectionSpeedMultiplier;                       // 0x1268(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mZiplineVelocityInterpolationSpeed;                      // 0x126C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mZiplineVelocityInterpolationSprintSpeed;                // 0x1270(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mZiplineSpeedMultiplierUp;                               // 0x1274(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mZiplineSpeedMultiplierDown;                             // 0x1278(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mZiplineSprintSettingsCutoff;                            // 0x127C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mZiplineContinuousTravelMaxAngle;                        // 0x1280(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mVerticalFlyingSpeed;                                    // 0x1284(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mVerticalFlyingSprintSpeed;                              // 0x1288(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaxFlySprintSpeed;                                      // 0x128C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8V3S[0x10];                                  // 0x1290(0x0010) MISSED OFFSET (PADDING)

	public:
		void ServerSetHookLocation(const struct FVector& hookLocation);
		void Server_LandSafelyFromFlyingState(class AFGCharacterPlayer* characterPlayer);
		void OnLedgeClimbFinished();
		bool IsParachuting();
		bool IsOnZipline();
		bool IsInHyperPipe();
		float GetZipLineSpeedMultiplier();
		float GetZiplineSpeed();
		struct FVector GetZipLineDirection();
		struct FPlayerZiplineData GetZiplineDataRef();
		bool GetWantsToSprint();
		float GetTotalTravelDistanceReal();
		float GetPipeVelocity();
		struct FVector GetPipeTravelDirectionWorld();
		float GetPipeMinSpeed();
		struct FPlayerPipeHyperData GetPipeHyperDataRef();
		struct FRotator GetPipeCharacterTransform(const struct FVector& cameraForwardAxis);
		struct FFGPendingHyperJunctionInfo GetPendingHyperJunction();
		class UFGLadderComponent* GetOnLadder();
		bool GetIsSprinting();
		struct FVector GetBaseVelocity();
		bool EnterPipeHyper(class AFGPipeHyperStart* Pipe);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_ReviveInvalid_PlayerNotDead
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_ReviveInvalid_PlayerNotDead : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_ReviveValid
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_ReviveValid : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCharacterPlayer
	 * Size -> 0x0640 (FullSize[0x0EF0] - InheritedSize[0x08B0])
	 */
	class AFGCharacterPlayer : public AFGCharacterBase
	{
	public:
		unsigned char                                              UnknownData_1NO2[0x18];                                  // 0x08B0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnBestUseableActorUpdated;                              // 0x08C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnReviveStarted;                                        // 0x08D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnReviveEnded;                                          // 0x08E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnPickupToCollectStateUpdated;                          // 0x08F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnActiveEquipmentChangedInSlot;                         // 0x0908(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LN5X[0x4];                                   // 0x0918(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mFlyToggleTime;                                          // 0x091C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnActorPerceptionInfoAdded;                             // 0x0920(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnActorPerceptionInfoRemoved;                           // 0x0930(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnCreaturePerceptionStateChanged;                       // 0x0940(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnPendingJunctionStateChanged;                          // 0x0950(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnPendingJunctionOutputChanged;                         // 0x0960(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnPlayerCameraModeChanged;                              // 0x0970(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnDeathCrateSpawned;                                    // 0x0980(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4HBZ[0x10];                                  // 0x0990(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mBaseTurnRate;                                           // 0x09A0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mBaseLookUpRate;                                         // 0x09A4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mMesh1PAnimClass;                                        // 0x09A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              mMesh3P;                                                 // 0x09B0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UWidgetComponent*                                    mPlayerNameWidgetComponent;                              // 0x09B8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mFoliagePickupProxyClass;                                // 0x09C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGFoliagePickup*                                    mFoliagePickupProxy;                                     // 0x09C8(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGBuildGun*                                         mBuildGun;                                               // 0x09D0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGResourceScanner*                                  mResourceScanner;                                        // 0x09D8(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGResourceMiner*                                    mResourceMiner;                                          // 0x09E0(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGDriveablePawn*                                    mWaitingClientAttachDrivable;                            // 0x09E8(0x0008) Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              mBestUsableActor;                                        // 0x09F0(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FUseState                                           mCachedUseState;                                         // 0x09F8(0x0030) BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FUseState                                           mPreviousCachedUseState;                                 // 0x0A28(0x0030) BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FUseState                                           mOldCachedUseState;                                      // 0x0A58(0x0030) BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mAnimInstanceClass;                                      // 0x0A88(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mAnimInstanceClass1P;                                    // 0x0A90(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mReviveDuration;                                         // 0x0A98(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T4J7[0x4];                                   // 0x0A9C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGDamageType*>                               mDrownDamageTypes;                                       // 0x0AA0(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      mDrownDamageInterval;                                    // 0x0AB0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UJR1[0x4];                                   // 0x0AB4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mGodModeDamageTypes[0x10];                               // 0x0AB8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		TArray<class UClass*>                                      mCachedGodModeDamageTypes;                               // 0x0AC8(0x0010) ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mCachedDamageTypesToPreventDuringRespawn;                // 0x0AD8(0x0010) ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class AFGCharacterPlayer*                                  mPlayerToRevive;                                         // 0x0AE8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGItemPickup*                                       mPickupToCollect;                                        // 0x0AF0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFootstepEffect                                     m1PDefaultFootstepEffect;                                // 0x0AF8(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FFootstepEffectSurface>                      m1PFootstepEffect;                                       // 0x0B10(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UAkAudioEvent*>                               m1PFootstepEvent;                                        // 0x0B20(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FFGActorPlayerPerceptionInfo>                mActorPerceptionInfo;                                    // 0x0B30(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KXZ1[0x8];                                   // 0x0B40(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mLastSafeGroundPositions[0x3];                           // 0x0B48(0x0048) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mLastSafeGroundPositionLoopHead;                         // 0x0B90(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PBAV[0x4];                                   // 0x0B94(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mHazmatSuitClass;                                        // 0x0B98(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPlayerMappingContext>                       mMappingContexts;                                        // 0x0BA0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UCameraComponent*                                    mCameraComponent;                                        // 0x0BB0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZW63[0x1];                                   // 0x0BB8(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsCheatFlyingSaved;                                     // 0x0BB9(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TMCH[0x6];                                   // 0x0BBA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGCineCameraComponent*                              mCinematicCameraComponent;                               // 0x0BC0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USpringArmComponent*                                 mSpringArmComponent;                                     // 0x0BC8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AFGEquipment*>                                mActiveEquipments;                                       // 0x0BD0(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
		TArray<class AFGEquipment*>                                mClientActiveEquipments;                                 // 0x0BE0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class AFGEquipmentAttachment*>                      mAllAttachments;                                         // 0x0BF0(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class AFGEquipmentAttachment*>                      mActiveAttachments;                                      // 0x0C00(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
		ECameraMode                                                mCurrentCameraMode;                                      // 0x0C10(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ECameraMode                                                mPlayerPreferredCameraMode;                              // 0x0C11(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LSD1[0x6];                                   // 0x0C12(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGInventoryComponent*                               mInventory;                                              // 0x0C18(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5BKY[0x8];                                   // 0x0C20(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGInventoryComponentEquipment*                      mArmsEquipmentSlot;                                      // 0x0C28(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInventoryComponentEquipment*                      mBackEquipmentSlot;                                      // 0x0C30(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInventoryComponentEquipment*                      mLegsEquipmentSlot;                                      // 0x0C38(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInventoryComponentEquipment*                      mHeadEquipmentSlot;                                      // 0x0C40(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInventoryComponentEquipment*                      mBodyEquipmentSlot;                                      // 0x0C48(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<EResourceForm>                                      mAllowedResourceFormsInInventory;                        // 0x0C50(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class UFGInventoryComponent*                               mTrashSlot;                                              // 0x0C60(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mAllowCameraToggling;                                    // 0x0C68(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_K7BX[0x3];                                   // 0x0C69(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mUseDistance;                                            // 0x0C6C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_B37H[0x4];                                   // 0x0C70(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int8_t                                                     mPickupCounter;                                          // 0x0C74(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VOYB[0x3];                                   // 0x0C75(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGCharacterPlayer*                                  mReviver;                                                // 0x0C78(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8J5S[0x8];                                   // 0x0C80(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UCameraAnimationSequence*                            mDefaultWalkHeadBobCameraAnim;                           // 0x0C88(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCameraAnimationSequence*                            mDefaultSprintHeadBobCameraAnim;                         // 0x0C90(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_REQO[0x18];                                  // 0x0C98(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGDriveablePawn*                                    mDrivenVehicle;                                          // 0x0CB0(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGDriveablePawn*                                    mSavedDrivenVehicle;                                     // 0x0CB8(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGOutlineComponent*                                 mOutlineComponent;                                       // 0x0CC0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mHealthGenerationWaitTime;                               // 0x0CC8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LZ7E[0x4];                                   // 0x0CCC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  mHealthGenerationRateOverHealthAmount;                   // 0x0CD0(0x0088) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YAMF[0x20];                                  // 0x0D58(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mRadiationIntensity;                                     // 0x0D78(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mRadiationDamageAngle;                                   // 0x0D7C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mRadiationImmunity;                                      // 0x0D80(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mInRadioactiveZone;                                      // 0x0D84(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DVO5[0x17];                                  // 0x0D85(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCameraOffsetBlendSpeed;                                 // 0x0D9C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mReplicatedIsSliding;                                    // 0x0DA0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JPCF[0x7];                                   // 0x0DA1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mSlideNoise;                                             // 0x0DA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mSlideNoiseFrequency;                                    // 0x0DB0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L6W3[0x20];                                  // 0x0DB4(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCrouchSpeed;                                            // 0x0DD4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mStandSpeed;                                             // 0x0DD8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mSlideToCrouchSpeed;                                     // 0x0DDC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_29A8[0x8];                                   // 0x0DE0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mIncomingAttackers;                                      // 0x0DE8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0KRU[0x4];                                   // 0x0DEC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     mZiplineParticle;                                        // 0x0DF0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HS66[0x18];                                  // 0x0DF8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGEmote*                                            mCurrentEmote;                                           // 0x0E10(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkComponent*                                        mCurrentEmoteSFX;                                        // 0x0E18(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInteractWidget*                                   mEmoteMenuWidget;                                        // 0x0E20(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USkeletalMeshComponent*                              mEmoteSkelMeshComp;                                      // 0x0E28(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_H5F1[0x10];                                  // 0x0E30(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x0E40(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTexture2D*                                          mActorRepresentationTextureDead;                         // 0x0E48(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGActorRepresentation*                              mCachedActorRepresentation;                              // 0x0E50(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mHolsteredEquipmentIndex;                                // 0x0E58(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JH9U[0x54];                                  // 0x0E5C(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              mCachedPlayerName;                                       // 0x0EB0(0x0010) Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_37K0[0x8];                                   // 0x0EC0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FFGPipeHyperConnectionHistoryEntry                  mPendingHyperJunctionOutputConnection;                   // 0x0EC8(0x0010) Edit, Net, EditConst, RepNotify, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<struct FFGPipeHyperConnectionHistoryEntry>          mPendingHyperJunctionOutputConnectionHistory;            // 0x0ED8(0x0010) ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TG0J[0x8];                                   // 0x0EE8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UsePreferredCameraMode();
		bool UpdateRepresentation();
		void UpdatePlayerNameWidget();
		void UpdatePlayerNameTagLocation();
		void UnregisterPerceivingActor(class AActor* Actor);
		void UnequipEquipment(class AFGEquipment* equipment);
		bool UnequipBuildGun();
		void TriggerBestUsableActorDelegate();
		void ToggleEquipment();
		void ToggleCameraMode(bool Force);
		void ToggleBuildGunPaint();
		void ToggleBuildGun();
		void TickVisuals(float dt);
		void StopZiplineEffects();
		void StopReceivingRadiation();
		void StopFreeRotate3P();
		void StopFocusAim();
		void StartZiplineEffects();
		void StartReceivingRadiation();
		void StartFreeRotate3P();
		void StartFocusAim();
		void SpawnInitialGear();
		void SnapSpringArmToDesiredLocation();
		void SetWantSprintBobbing(bool wantBobbing);
		void SetThirdPersonMode();
		void SetRadiationImmunity(float newImmunity);
		void SetMeshVisibility(bool IsFirstPerson);
		void SetMappingContextEnabled(EPlayerMappingContextCategory contextMask, bool Enabled);
		void SetMappingContextBound(class UInputMappingContext* Context, bool bind, int32_t Priority);
		void SetFirstPersonMode();
		void SetCameraMode(ECameraMode newCameraMode);
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		void Server_UpdateHyperJunctionOutputConnection(class UFGPipeConnectionComponentBase* ConnectionEnteredThrough, class UFGPipeConnectionComponentBase* newOutputConnection);
		void Server_UnequipEquipment(class AFGEquipment* newEquipment);
		void Server_ToggleSwitchControl(class AFGBuildableRailroadSwitchControl* switchControl);
		void Server_ToggleLightsInRadius(float InRadius, float inDelay);
		void Server_ToggleEquipment();
		void Server_SetOverrideEquipment(class AFGEquipment* equipment);
		void Server_RevivePlayer(class AFGCharacterPlayer* playerToRevive);
		void Server_PlayEmote(class UClass* emote, int32_t RandomInteger);
		void Server_PickUpItem(class AFGItemPickup* itemPickup);
		void Server_PickUpBoomBoxPlayer(class AFGBoomBoxPlayer* boomBox);
		void Server_OnUseReleased();
		void Server_OnUse();
		void Server_EquipEquipment(class AFGEquipment* newEquipment);
		void Server_CycleHandEquipmentPressed(int32_t dir);
		void Server_ClearOverrideEquipment(class AFGEquipment* equipment);
		void Server_CheatWalk();
		void Server_CheatTeleport(const struct FTransform& NewTransform);
		void Server_CheatSetGhostFly(bool ghostModeActive);
		void Server_CheatFly();
		void RevivePlayerWithFullHealth();
		bool RemoveAsRepresentation();
		void RegisterPerceivingActor(class AActor* Actor);
		void PlayPickupEffects();
		void PlayJumpEffects(bool boostJump);
		void PlayEmoteSFX(class UAkAudioEvent* Event);
		void PlayEmote(class UClass* emote);
		void PickUpBoomBox(class AFGBoomBoxPlayer* boomBox);
		void Photo_SetAdvancedPhotoMode(bool Enabled);
		void OnUserSettingsUpdated();
		void OnSpawnDeathMarker();
		void OnSlideStartSimulated();
		void OnSlideStartLocal();
		void OnSlideEndSimulated();
		void OnSlideEndLocal();
		void OnReviveComplete();
		void OnRep_RadiationIntensity();
		void OnRep_PlayerInventory();
		void OnRep_PickupCounter();
		void OnRep_PendingHyperJunctionOutputConnection();
		void OnRep_LegsEquipmentSlot();
		void OnRep_IsSliding();
		void OnRep_InRadioactiveZone();
		void OnRep_HeadEquipmentSlot();
		void OnRep_DrivenVehicle();
		void OnRep_BodyEquipmentSlot();
		void OnRep_BackEquipmentSlot();
		void OnRep_ArmsEquipmentSlot();
		void OnRep_ActorPerceptionInfo(TArray<struct FFGActorPlayerPerceptionInfo> OldValues);
		void OnRep_ActiveEquipments();
		void OnRep_ActiveAttachments();
		void OnReceiveRadiationStop();
		void OnReceiveRadiationStart();
		void OnRadiationIntensityUpdated(float radiationIntensity, float radiationImmunity);
		void OnPerceivingCreatureStateChange(class AFGCreatureController* creatureController, ECreatureState PreviousState, ECreatureState NewState);
		void OnNewTravelPipeSection();
		void OnItemAddedToInventory(class UClass* ItemClass, int32_t numAdded);
		void OnInventorySlotUpdated(int32_t Index);
		void OnInventorySlotsUnlocked(int32_t newUnlockedSlots);
		void OnDisabledInputGateChanged(const struct FDisabledInputGate& NewValue);
		void OnArmsSlotsUnlocked(int32_t newUnlockedSlots);
		void OnActiveEquipmentChangedInSlot(EEquipmentSlot Slot);
		void NotifyOnToggleQuickSearch();
		void NotifyOnToggleInventory();
		void NotifyOnToggleFlashlight();
		void NotifyOnToggleCodex();
		void Multicast_ZiplineStart(class AActor* ziplineActor, const struct FVector& Point1, const struct FVector& Point2, const struct FVector& actorForward);
		void Multicast_ZiplineEnd(const struct FVector& exitForce);
		void Multicast_SetOverrideEquipment(class AFGEquipment* equipment);
		void Multicast_PlayJumpEffects(bool boostJump);
		void Multicast_PlayEmote(class UClass* emote, int32_t RandomInteger);
		void Multicast_ClearOverrideEquipment(class AFGEquipment* equipment);
		void MakeSlidingNoise();
		bool IsSliding();
		bool IsPlayerOnline();
		bool IsInteractWidgetOpen();
		bool IsInStartingPod();
		bool IsInRadioActiveZone();
		bool IsFirstPerson();
		bool IsDrivingVehicle();
		bool IsBuildGunEquipped();
		bool IsActorStatic();
		void HotKeyRecipe(class UClass* recipe);
		void HotKeyPaint(class UClass* Customization);
		void HotKeyDismantle();
		void HotKeyBlueprint(const class FString& BlueprintName);
		bool HasHolsteredEquipment();
		bool GetWantSprintBobbing();
		float GetUseDistance();
		class UFGInventoryComponent* GetTrashSlot();
		int32_t GetTotalPlayerInventorySlots();
		int32_t GetTotalPlayerArmEquipmentSlots();
		float GetTotalHyperTubeTravelDistance();
		class USpringArmComponent* GetSpringArmComponent();
		float GetReviveProgress();
		class AFGResourceScanner* GetResourceScanner();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		float GetRadiationIntensity();
		float GetRadiationImmunity();
		float GetRadiationDamageAngle();
		float GetPickupProgress();
		struct FFGPipeHyperConnectionHistoryEntry GetPendingHyperJunctionOutputConnection();
		struct FFGPendingHyperJunctionInfo GetPendingHyperJunctionInfo();
		class UFGOutlineComponent* GetOutline();
		class USkeletalMeshComponent* GetMesh1P();
		int32_t GetMappingContextPriority();
		class UFGInventoryComponent* GetInventory();
		class UFGPipeConnectionComponentBase* GetHyperTubeJunctionOutputConnectionFromHistory(class UFGPipeConnectionComponentBase* ConnectionEnteredThrough);
		int32_t GetHolsteredEquipmentIndex();
		class AFGPlayerController* GetFGPlayerController();
		class UFGCharacterMovementComponent* GetFGMovementComponent();
		class UFGInventoryComponentEquipment* GetEquipmentSlot(EEquipmentSlot Slot);
		class AFGEquipment* GetEquipmentInSlot(EEquipmentSlot Slot);
		class USkeletalMeshComponent* GetEmoteSkelMeshComp();
		class UFGInteractWidget* GetEmoteMenu();
		class AFGDriveablePawn* GetDrivenVehicle();
		class UCameraAnimationSequence* GetDesiredWalkHeadBobShake();
		class UCameraAnimationSequence* GetDesiredSprintHeadBobShake();
		struct FLinearColor GetDefaultRepresentationColor();
		class UFGLadderComponent* GetCurrentLadderComponent();
		class AFGPlayerState* GetControllingPlayerState();
		class UFGCineCameraComponent* GetCinematicCameraComponent();
		ECameraMode GetCameraMode();
		class UCameraComponent* GetCameraComponent();
		class AFGBuildGun* GetBuildGun();
		class AActor* GetBestUsableActor();
		float GetArmBoneLocation();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		TArray<struct FFGActorPlayerPerceptionInfo> GetActorPerceptionInfoArray();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		class AFGResourceMiner* GetActiveResourceMiner();
		TArray<class AFGEquipment*> GetActiveEquipments();
		struct FInventoryItem GetActiveEquipmentItem(EEquipmentSlot Slot);
		ECrosshairState GetActiveCrosshairState();
		TArray<class AFGEquipmentAttachment*> GetActiveAttachments();
		class USkeletalMeshComponent* Get3PMesh();
		bool FilterInventoryClasses(class UClass* Object, int32_t idx);
		void EquipEquipment(class AFGEquipment* equipment);
		void Client_ReviveStarted();
		void Client_ReviveEnded();
		void Client_Revived();
		void Client_OnPerceivingCreatureStateChange(class AFGCreature* creature, ECreatureState NewState);
		void Client_HyperTubeStart(class UFGPipeConnectionComponentBase* ConnectionEnteredThrough, float StartTime, float pipeVelocity, float pipeProgress, float pipeAccumulatedTime);
		void Client_HyperTubeEnd(const struct FVector& Point, const struct FVector& Velocity, float StartTime);
		void ClearEmoteSkelMeshComp(float Delay);
		void CameraZoomOut();
		void CameraZoomIn();
		void AddRadiationImmunity(float toAdd);
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWeapon
	 * Size -> 0x00F8 (FullSize[0x0578] - InheritedSize[0x0480])
	 */
	class AFGWeapon : public AFGEquipment
	{
	public:
		class FScriptMulticastDelegate                             mOnWeaponStateChanged;                                   // 0x0480(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AFGHUD*                                              mAssociatedHud;                                          // 0x0490(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GK4Y[0x18];                                  // 0x0498(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EWeaponState                                               mWeaponState;                                            // 0x04B0(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAutomaticallyReload;                                    // 0x04B1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S51Y[0x2];                                   // 0x04B2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mAutoReloadDelay;                                        // 0x04B4(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        mAutoReloadTimerHandle;                                  // 0x04B8(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mCurrentAmmoCount;                                       // 0x04C0(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4C2D[0x4];                                   // 0x04C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mAllowedAmmoClasses;                                     // 0x04C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UClass*                                              mDesiredAmmoClass;                                       // 0x04D8(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mCurrentAmmunitionClass;                                 // 0x04E0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAttachMagazineToPlayer;                                 // 0x04E8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QVQM[0x3];                                   // 0x04E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                mMuzzleSocketName;                                       // 0x04EC(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mCurrentMagazineBoneName;                                // 0x04F4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P9GL[0x4];                                   // 0x04FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USkeletalMeshComponent*                              mWeaponMesh;                                             // 0x0500(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              mCurrentMagazineMesh;                                    // 0x0508(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mEjectMagazineBoneName;                                  // 0x0510(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              mEjectMagazineMesh;                                      // 0x0518(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDispersionOnNoMagazine;                                 // 0x0520(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mWeaponDamageMultiplier;                                 // 0x0524(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mFiringBlocksDispersionReduction;                        // 0x0528(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VTOH[0x3];                                   // 0x0529(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCurrentDispersion;                                      // 0x052C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mReloadTime;                                             // 0x0530(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A68Z[0x4];                                   // 0x0534(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       mReloadSound;                                            // 0x0538(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGAmmoType*                                         mCurrentMagazineObject;                                  // 0x0540(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAmmoSwitchUsedRadialMenu;                               // 0x0548(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7M19[0x7];                                   // 0x0549(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnAmmoCyclingPressed;                                   // 0x0550(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnAmmoCyclingReleased;                                  // 0x0560(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		bool                                                       mBlockSprintWhenFiring;                                  // 0x0570(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JP4N[0x7];                                   // 0x0571(0x0007) Fix size for supers

	public:
		void TryAutoReload();
		void TriggerRefireTimer();
		void SetDesiredAmmoClass(class UClass* newDesiredAmmoClass);
		void Server_SetDesiredAmmoClass(class UClass* newDesiredAmmoClass);
		void Server_Reload();
		void Server_CycleDesiredAmmunitionType();
		void PlayReloadEffects(bool hadAmmoLeft);
		void PlayFireReleasedEffects();
		void PlayFireEffect(class UFGAmmoType* AmmoTypeObject);
		void PlayFailedToFireEffects();
		void OnRep_WeaponState(EWeaponState oldState);
		void OnRep_CurrentMagazineObject(class UFGAmmoType* oldMagazineObject);
		void OnRep_CurrentAmmoCount();
		void OnCurrentAmmoTypeChanged(class UFGAmmoType* ammoType);
		void OnAmmoFired(class AActor* SpawnedActor);
		void Multicast_Reload();
		void Multicast_PlayFireEffect(class UFGAmmoType* AmmoTypeObject);
		void Multicast_EndPrimaryFire();
		void Multicast_BeginPrimaryFire();
		bool HasAmmunition();
		EWeaponState GetWeaponState();
		struct FVector GetWeaponMeshSocketLocation(const class FName& SocketName);
		float GetWeaponDamageMultiplier();
		float GetWeaponCurrentDispersion();
		int32_t GetSpareAmmunition(class UClass* AmmunitionType);
		float GetReloadTimeLeft();
		float GetNormalizedDispersionValue();
		int32_t GetMagSize();
		bool GetIsReloading();
		bool GetIsFiring();
		bool GetIsAutomaticallyReloading();
		bool GetFireRate(float* fireRate);
		class UFGAmmoType* STATIC_GetDefaultObjectForAmmoType(class UClass* ammoType);
		int32_t GetCurrentAmmo();
		float GetAutoReloadDelay();
		class AFGHUD* GetAssociatedHud();
		class UFGAmmoType* GetAmmoTypeDescriptor();
		bool CanReload();
		void ActualReload();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGChargedWeapon
	 * Size -> 0x0038 (FullSize[0x05B0] - InheritedSize[0x0578])
	 */
	class AFGChargedWeapon : public AFGWeapon
	{
	public:
		TArray<class AFGProjectile*>                               mDispensedProjectiles;                                   // 0x0578(0x0010) ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		bool                                                       mIsPendingExecuteFire;                                   // 0x0588(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S1GJ[0x3];                                   // 0x0589(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mMaxChargeTime;                                          // 0x058C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mMaxThrowForce;                                          // 0x0590(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mMinThrowForce;                                          // 0x0594(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7TA2[0x4];                                   // 0x0598(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDelayBetweenSecondaryTriggers;                          // 0x059C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R7E1[0x10];                                  // 0x05A0(0x0010) MISSED OFFSET (PADDING)

	public:
		void Server_StartChargedProjectileSecondary();
		void Server_SpawnChargedProjectile(const struct FTransform& SpawnTransform, int32_t throwForce);
		void Server_ExecuteSecondaryFire();
		void Server_ExecutePrimaryFire(const struct FVector& SpawnLocation);
		void OnSecondaryFirePressed();
		void OnPrimaryFireStarted();
		void OnPrimaryFireEnded();
		void Multicast_SecondaryFirePressed();
		void Multicast_ResetPressTimestamp();
		float GetChargePct();
		void ExecuteSecondaryFire();
		void ExecutePrimaryFire(const struct FVector& SpawnLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGChatManager
	 * Size -> 0x0028 (FullSize[0x0320] - InheritedSize[0x02F8])
	 */
	class AFGChatManager : public AFGSubsystem
	{
	public:
		class FScriptMulticastDelegate                             OnChatMessageAdded;                                      // 0x02F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		int32_t                                                    mMaxNumMessagesInHistory;                                // 0x0308(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMessageVisibleDuration;                                 // 0x030C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FChatMessageStruct>                          mReceivedMessages;                                       // 0x0310(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void Multicast_BroadcastChatMessage(const struct FChatMessageStruct& newMessage);
		void GetReceivedChatMessages(TArray<struct FChatMessageStruct>* out_messages);
		float GetMessageVisibleDuration();
		int32_t GetMaxNumMessagesInHistory();
		class FString STATIC_GetChatMessageName(const struct FChatMessageStruct& InMessage);
		struct FLinearColor STATIC_GetChatMessageColor(const struct FChatMessageStruct& InMessage);
		class AFGChatManager* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCheatManager
	 * Size -> 0x0078 (FullSize[0x0100] - InheritedSize[0x0088])
	 */
	class UFGCheatManager : public UCheatManager
	{
	public:
		TArray<class UClass*>                                      mPopularUClassChoices;                                   // 0x0088(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPublic
		TMap<class FString, class FString>                         mFunctionCategories;                                     // 0x0098(0x0050) Edit, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OVH5[0x8];                                   // 0x00E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mHighlightedPickupClasses;                               // 0x00F0(0x0010) ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		void Vehicle_ResetTheChosenVehicle();
		void Vehicle_ResetDeadlocks();
		void Vehicle_FlipDrivenVehicle();
		void Vehicle_DumpInfoAboutLookedAtVehicle();
		void UpdatePlayerNametags();
		void UnlockSpecificTape(class UClass* tapeData);
		void UnlockSpecificRecipe(class UClass* recipe);
		void UnlockSpecificEmote(class UClass* emote);
		void UnlockScannableResource(class UClass* ResourceDescriptor);
		void UnlockInventorySlots(int32_t numSlots);
		void UnlockArmSlots(int32_t numSlots);
		bool TurboProductionMode_Get();
		void TurboProductionMode(bool Enabled);
		bool TurboBuildMode_Get();
		void TurboBuildMode(bool Enabled);
		void Trains_ToggleSelfDriving();
		void Trains_RerailAll();
		void Trains_MarkTrackGraphsForRebuild();
		void Trains_MarkTrackGraphsAsChanged();
		void Trains_FillAllFreightCars(float pct);
		void Trains_EmptyAllFreightCars();
		void ToggleCameraMode();
		void TestSharedInventoryPtr();
		void SplitAllConveyors();
		void ShowSequenceList();
		bool ShowFactoryOnly_Get();
		void ShowFactoryOnly(bool environmentHidden);
		void SetTradingPostLevel(int32_t inLevel);
		void SetTimeSpeedMultiplierResetTime(int32_t resetHour);
		void SetTimeSpeedMultiplier(float Speed);
		int32_t SetTimeOfDay_minute_Get();
		int32_t SetTimeOfDay_hour_Get();
		void SetTimeOfDay(int32_t Hour, int32_t Minute);
		void SetSlomo(float Slomo);
		void SetServerPlayerPassword(const class FString& inNewPlayerPassword);
		void SetServerAdminPassword(const class FString& inNewAdminPassword);
		void SetRandomDebugStartingPoint();
		void SetPlanetSpeedMultiplier(float Multiplier);
		void SetPlanetPositionDeg(int32_t Value);
		void SetPlanetPosition(float Value);
		void SetPlanetMovementEnabled(bool Enabled);
		void SetNextGamePhase();
		void SetMaxHealth(float newMaxHealth);
		void SetGamePhase(EGamePhase Phase);
		bool SetFactoryDetailReplication_Get();
		void SetFactoryDetailReplication(bool Enable);
		void SetDebugStartingPoint(const class FName& startingPoint);
		void SetCreatureHostility(EPlayerHostilityMode hostility);
		void Server_Vehicle_ResetTheChosenVehicle();
		void Server_Vehicle_ResetDeadlocks();
		void Server_Vehicle_FlipDrivenVehicle(class AFGWheeledVehicle* Vehicle);
		void Server_UnlockSpecificTape(class UClass* tapeData);
		void Server_UnlockSpecificRecipe(class UClass* recipe);
		void Server_UnlockSpecificEmote(class UClass* emote);
		void Server_UnlockScannableResource(class UClass* ResourceDescriptor);
		void Server_UnlockInventorySlots(int32_t numSlots);
		void Server_UnlockArmSlots(int32_t numSlots);
		void Server_Trains_RerailAll();
		void Server_Trains_MarkTrackGraphsForRebuild();
		void Server_Trains_MarkTrackGraphsAsChanged();
		void Server_Trains_FillAllFreightCars(float pct);
		void Server_Trains_EmptyAllFreightCars();
		void Server_ShowFactoryOnly(bool environmentHidden);
		void Server_SetTradingPostLevel(int32_t inLevel);
		void Server_SetTimeSpeedMultiplierResetTime(int32_t resetHour);
		void Server_SetTimeSpeedMultiplier(float Speed);
		void Server_SetTimeOfDay(int32_t Hour, int32_t Minute);
		void Server_SetSlomo(float Slomo);
		void Server_SetPlayerPassword(const class FString& inNewPlayerPassword);
		void Server_SetPlanetSpeedMultiplier(float Multiplier);
		void Server_SetPlanetPositionDeg(int32_t Value);
		void Server_SetPlanetPosition(float Value);
		void Server_SetPlanetMovementEnabled(bool Enabled);
		void Server_SetNextGamePhase();
		void Server_SetMaxHealth(float newMaxHealth);
		void Server_SetGamePhase(EGamePhase Phase);
		void Server_SetAdminPassword(const class FString& inNewAdminPassword);
		void Server_ReviveSelf();
		void Server_ResetSchematics();
		void Server_ResetRecipes();
		void Server_ResetHubTutorial();
		void Server_ResetGamePhases();
		void Server_RagdollSelf();
		void Server_PurgeInactiveClientsFromSave(class AFGCharacterPlayer* characterToReceiveInventories, bool fetchInventories);
		void Server_PurgeDeathMarkersFromSave();
		void Server_PurgeAllTrainState();
		void Server_PurgeAllBeaconsFromSave();
		void Server_PromoteToServerAdmin(bool isAdminNow);
		void Server_PlayerAllFly(bool flyModeEnabled);
		void Server_Pipe_ResetAll();
		void Server_Pipe_FillFirstInEachNetwork();
		void Server_Pipe_EmptyAll();
		void Server_NoPower(bool Enabled);
		void Server_NoFuel(bool Enabled);
		void Server_NoCost(bool Enabled);
		void Server_Map_Reveal();
		void Server_Map_Hide();
		void Server_HideFactoryOnly(bool factoryHidden);
		void Server_HideAllBuildings(bool InVisibility);
		void Server_Heal();
		void Server_GodMode(bool Enabled);
		void Server_GiveStorySchematics();
		void Server_GiveSchematicsOfTier(int32_t tier);
		void Server_GiveResourceSinkCoupons(int32_t numCoupons);
		void Server_GivePrototypeSchematics();
		void Server_GiveItemStacks(class AFGCharacterPlayer* Character, class UClass* Resource, int32_t numberOfStacks);
		void Server_GiveItemsSingle(class AFGCharacterPlayer* Character, class UClass* Resource, int32_t numberOfItems);
		void Server_GiveCheatSchematics();
		void Server_GiveAvailableSchematics();
		void Server_GiveAllSchematicsAndPhases();
		void Server_GiveAllSchematics();
		void Server_GiveAllResearchTrees();
		void Server_GiveActiveMilestoneSchematic();
		void Server_Foliage_RemoveOneByOne(int32_t maxNumInstances);
		void Server_Foliage_RemoveInBulk(int32_t maxNumInstances);
		void Server_Foliage_RemoveByTarget(float Radius);
		void Server_EnableBuildableTick(bool Enable);
		void Server_DamageSelf(float Damage);
		void Server_Creature_SpawnNew(class UClass* CreatureClass, int32_t NumToSpawn);
		void Server_Creature_SetArachnidCreaturesDisabled(bool Disabled);
		void Server_Creature_KillAllCreaturesInRadius(float Radius);
		void Server_Creature_KillAllCreatures();
		void Server_Creature_ForceSpawnCreatures();
		void Server_Creature_CanAttackEachother(bool canAttack);
		void Server_Creature_AddCreatureOverride(class UClass* CreatureClassToReplace, class UClass* CreatureClassOverride);
		void Server_CompleteResearch();
		void Server_CollectAllCrates();
		void Server_ClearInventory();
		void Server_Circuit_ResetFuses();
		void Server_Circuit_RebuildAll();
		void Server_BringAllUnpossessedPawnsHere();
		void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier);
		void ReviveSelf();
		void ResetSchematics();
		void ResetRecipes();
		void ResetHubTutorial();
		void ResetGamePhases();
		void ResetAllFactoryLegsToZero(bool repopulateEmptyLegs);
		void ReplayBuildingEffects();
		void RebuildFactoryLegsOneTileAroundPlayer();
		void RandomizeBuildingsColorSlot(unsigned char SlotIndex);
		void RagdollSelf();
		void PurgeInactiveClientsFromSave(bool fetchInventories);
		void PurgeDeathMarkersFromSave();
		void PurgeAllTrainState();
		void PurgeAllBeaconsFromSave();
		bool PumpiMode_Get();
		void PumpiMode(bool Enable);
		void PromoteToServerAdmin();
		bool PlayerNoClipModeOnFly_Get();
		void PlayerNoClipModeOnFly(bool ghostMode);
		bool PlayerFly_Get();
		void PlayerFly(bool flyModeEnabled);
		bool PlayerAllFly_Get();
		void PlayerAllFly(bool flyModeEnabled);
		void Pipe_TweakPressureLoss(float pressureLoss);
		void Pipe_TweakOverfill(float maxOverfillPct, float maxOverfillForPressure);
		void Pipe_TweakMinimumMaxContent(float minimumMaxContent, bool keepRelativeContent);
		void Pipe_TweakMaximumFlow(float Rate);
		void Pipe_TweakGravity(float Gravity);
		void Pipe_TweakFluidViscosity(float fluidViscosity);
		void Pipe_TweakFluidFriction(float FluidFriction);
		void Pipe_TweakFluidDensity(float FluidDensity);
		void Pipe_SetVerboseLoggingOnAimedFluidBox(bool Enabled);
		void Pipe_ResetAll();
		void Pipe_PrintTweakables();
		void Pipe_PrintMinSizes();
		void Pipe_FillFirstInEachNetwork();
		void Pipe_EnableProbingOnAimedIntegrant();
		void Pipe_EmptyAll();
		void Pipe_DisableProbingOnAimedIntegrant();
		void Pipe_ClearProbingOnAllPipe();
		void Pipe_ClearDisplayDebugList();
		void Pipe_AddSelectedNetworkToDisplayDebugList();
		void Photo_ToggleSequencer();
		void Photo_ToggleDebug();
		void Photo_ToggleAdvancedPhotoMode();
		void Photo_SetManualFocusDistance(float ManualFocusDistance);
		void Photo_SetAperture(float aperture);
		void Photo_ResetToDefault();
		void Photo_PlaySequence();
		void Photo_FocusTrackLookedAtObject();
		void Photo_AddCurrentPlayerPosAndRot();
		void Online_UpdatePresenceString(const class FString& String);
		void Online_UpdatePresence(const class FString& Key, const class FString& Value);
		void Online_UpdateGameSession();
		void Online_TriggerPresenceUpdate();
		void Online_SendInviteToFriend(const class FString& friendName);
		void Online_LogPresence();
		void Online_GetOnlineStatus(int32_t localPlayerNum);
		void Online_GetFriends();
		void Online_EpicLogout();
		void Online_EpicLogin(const class FString& UserName, const class FString& Password);
		void Online_DumpConnectionString();
		bool NoUnlockCost_Get();
		void NoUnlockCost(bool Enabled);
		bool NoPower_Get();
		void NoPower(bool Enabled);
		bool NoMessages_Get();
		void NoMessages(bool Enabled);
		bool NoFuel_Get();
		void NoFuel(bool Enabled);
		bool NoCost_Get();
		void NoCost(bool Enabled);
		void NetMulticast_Map_Reveal();
		void NetMulticast_Map_Hide();
		void MergeAllConveyors();
		void Map_Reveal();
		void Map_RemoveMarker(int32_t Index);
		void Map_Hide();
		void LockWeather(bool bState);
		void ListDebugStartingPoint();
		void Internal_HighlightPickupables();
		void HighlightPickupable(class UClass* pickupClass);
		bool HideFactoryOnly_Get();
		void HideFactoryOnly(bool factoryHidden);
		bool HideAllBuildings_Get();
		void HideAllBuildings(bool InVisibility);
		bool HiddenHUDMode_Get();
		void HiddenHUDMode(bool Enable);
		void Heal();
		bool GodMode_Get();
		void GodMode(bool Enabled);
		void GiveStorySchematics();
		void GiveSchematicsOfTier(int32_t tier);
		void GiveResourceSinkCoupons(int32_t numCoupons);
		void GivePrototypeSchematics();
		void GiveItemStacks(class UClass* Resource, int32_t numberOfStacks);
		void GiveItemsSingle(class UClass* Resource, int32_t numberOfItems);
		void GiveCheatSchematics();
		void GiveAvailableSchematics();
		void GiveAllSchematicsAndPhases();
		void GiveAllSchematics();
		void GiveAllResearchTrees();
		void GiveActiveMilestoneSchematic();
		void ForceSetWeatherType(class UClass* Reaction);
		void Foliage_RemoveOneByOne(int32_t maxNumInstances);
		void Foliage_RemoveInBulk(int32_t maxNumInstances);
		void Foliage_RemoveByTarget(float Radius);
		bool EnablePlayerFOV_Get();
		void EnablePlayerFOV(bool Enable);
		void EnableCreativeMode();
		bool EnableBuildableTick_Get();
		void EnableBuildableTick(bool Enable);
		void DumpUnlockedRecipesAndSchematics();
		void DumpSignificanceManagedObjects();
		void DumpSchematics();
		void DumpPlayerStates();
		void DumpNonDormantActors();
		void DumpItemPickups();
		void DumpHotbarShortcuts();
		void DumpGamePhases();
		void DumpComponentCounts();
		void DumpAllAvailableRecipes();
		void DumpActorRepresentations();
		void DumpActiveGPUParticles();
		void DestroyPawn();
		void DemoteToServerPlayer();
		void DamageSelf(float Damage);
		void Creature_SpawnNew(class UClass* CreatureClass, int32_t NumToSpawn);
		void Creature_SetStressEnabled(bool Enable);
		void Creature_SetArachnidCreaturesDisabled(bool Disabled);
		void Creature_KillAllCreaturesInRadius(float Radius);
		void Creature_KillAllCreatures();
		void Creature_ForceSpawnCreatures();
		void Creature_CanAttackEachother(bool canAttack);
		void Creature_AddCreatureOverride(class UClass* CreatureClassToReplace, class UClass* CreatureClassOverride);
		void CompleteResearch();
		void CollectAllCrates();
		void ClearInventory();
		void ClearGiveItemPopularList();
		void Circuit_ResetFuses();
		void Circuit_RebuildAll();
		void Circuit_DumpCircuitsToLog();
		void Circuit_Bug_InsertDupeComponentIntoCircuit(int32_t Target);
		void Circuit_Bug_InsertDupeComponentIntoAnotherCircuit(int32_t Source, int32_t Target);
		void Cheats();
		void BringAllUnpossessedPawnsHere();
		void Audio_ToggleLandingDebug();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCineCameraComponent
	 * Size -> 0x0000 (FullSize[0x0B50] - InheritedSize[0x0B50])
	 */
	class UFGCineCameraComponent : public UCineCameraComponent
	{
	public:
		void ShowDebug();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCircuit
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UFGCircuit : public UObject
	{
	public:
		unsigned char                                              UnknownData_9ZJE[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mCircuitID;                                              // 0x0030(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W5ZE[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGCircuitConnectionComponent*>               mComponents;                                             // 0x0038(0x0010) ExportObject, ZeroConstructor, SaveGame, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       mNeedFullRebuild : 1;                                    // 0x0048(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasChanged : 1;                                         // 0x0048(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LD7Q[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGCharacterPlayer*>                          mInteractingPlayers;                                     // 0x0050(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		int32_t GetCircuitID();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCircuitGroup
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGCircuitGroup : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConnectionComponent
	 * Size -> 0x0008 (FullSize[0x02A8] - InheritedSize[0x02A0])
	 */
	class UFGConnectionComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_51B6[0x8];                                   // 0x02A0(0x0008) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCircuitConnectionComponent
	 * Size -> 0x0078 (FullSize[0x0320] - InheritedSize[0x02A8])
	 */
	class UFGCircuitConnectionComponent : public UFGConnectionComponent
	{
	public:
		unsigned char                                              UnknownData_66BR[0x8];                                   // 0x02A8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_T5DL[0x10];                                  // 0x02B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mCircuitType;                                            // 0x02C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mMaxNumConnectionLinks;                                  // 0x02C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsHiddenConnection;                                     // 0x02CC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4DTJ[0x3];                                   // 0x02CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mConnectionDistanceBias;                                 // 0x02D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SDPO[0x4];                                   // 0x02D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGBuildableWire*>                            mWires;                                                  // 0x02D8(0x0010) Edit, Net, ZeroConstructor, EditConst, SaveGame, NativeAccessSpecifierPrivate
		unsigned char                                              mNumWiresConnected;                                      // 0x02E8(0x0001) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZTQ8[0x7];                                   // 0x02E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGCircuitConnectionComponent*>               mHiddenConnections;                                      // 0x02F0(0x0010) Edit, ExportObject, ZeroConstructor, EditConst, SaveGame, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<struct FVector>                                     mWireConnectionLocations;                                // 0x0300(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		int32_t                                                    mCircuitID;                                              // 0x0310(0x0004) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7SO5[0xC];                                   // 0x0314(0x000C) MISSED OFFSET (PADDING)

	public:
		void RemoveHiddenConnection(class UFGCircuitConnectionComponent* Other);
		void ReceiveOnCircuitIDChanged();
		void OnRep_CircuitIDChanged();
		bool IsHidden();
		int32_t IsConnected();
		bool HasHiddenConnection(class UFGCircuitConnectionComponent* Other);
		TArray<struct FVector> GetWireConnectionLocations();
		int32_t GetNumHiddenConnections();
		int32_t GetNumFreeConnections();
		int32_t GetNumConnections();
		int32_t GetMaxNumConnections();
		float GetConnectionDistanceBias();
		int32_t GetCircuitID();
		void AddHiddenConnection(class UFGCircuitConnectionComponent* Other);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCriticalBatteryDepletionMessage
	 * Size -> 0x0008 (FullSize[0x02E0] - InheritedSize[0x02D8])
	 */
	class UFGCriticalBatteryDepletionMessage : public UFGMessageBase
	{
	public:
		unsigned char                                              UnknownData_ZDFW[0x8];                                   // 0x02D8(0x0008) MISSED OFFSET (PADDING)

	public:
		float GetCriticalBatteryDepletionPercent();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCircuitSubsystem
	 * Size -> 0x0128 (FullSize[0x0420] - InheritedSize[0x02F8])
	 */
	class AFGCircuitSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_3WQK[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		float                                                      mCriticalBatteryDepletionPercent;                        // 0x0300(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMinimumBatteryWarningInterval;                          // 0x0304(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnPowerPrioritySwitchAddedDelegate;                     // 0x0308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnCircuitsRebuiltDelegate;                              // 0x0318(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnCircuitGroupsRebuiltDelegate;                         // 0x0328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<int32_t, class UFGCircuit*>                           mCircuits;                                               // 0x0338(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_49JB[0x8];                                   // 0x0388(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGCircuit*>                                  mReplicatedCircuits;                                     // 0x0390(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YVYW[0x58];                                  // 0x03A0(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGCircuitGroup*>                             mCircuitGroups;                                          // 0x03F8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VJ91[0x8];                                   // 0x0408(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGPriorityPowerSwitchInfo*>                  mPriorityPowerSwitchInfos;                               // 0x0410(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate

	public:
		void PowerCircuit_SortPriorityPowerSwitchInfos(TArray<class AFGPriorityPowerSwitchInfo*>* infos);
		void PowerCircuit_SetPrioritySwitchGroupOn(int32_t Priority, bool On);
		void PowerCircuit_OnPrioritySwitchesTurnedOff(int32_t Priority);
		void PowerCircuit_OnFuseSet();
		void PowerCircuit_OnFuseReset();
		void PowerCircuit_OnCriticalBatteryDepletion(float depletionPercent);
		TArray<class AFGPriorityPowerSwitchInfo*> PowerCircuit_GetPriorityPowerSwitchInfos();
		void OnStructuralChange__DelegateSignature();
		void OnRep_ReplicatedCircuits();
		void OnPowerPrioritySwitchAdded__DelegateSignature(class AFGPriorityPowerSwitchInfo* Info);
		class AFGCircuitSubsystem* STATIC_GetCircuitSubsystem(class UObject* WorldContext);
		class UFGCircuit* FindCircuit(int32_t circuitID);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGClearanceComponent
	 * Size -> 0x0000 (FullSize[0x05B0] - InheritedSize[0x05B0])
	 */
	class UFGClearanceComponent : public UBoxComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGComplexClearanceComponent
	 * Size -> 0x0000 (FullSize[0x0620] - InheritedSize[0x0620])
	 */
	class UFGComplexClearanceComponent : public UStaticMeshComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCliffActorManager
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class AFGCliffActorManager : public AActor
	{
	public:
		unsigned char                                              UnknownData_5AQM[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_FRRM[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCliffActor
	 * Size -> 0x0098 (FullSize[0x0390] - InheritedSize[0x02F8])
	 */
	class AFGCliffActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_PTVD[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class UStaticMeshComponent*                                mMeshComponent;                                          // 0x0300(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PTJL[0x8];                                   // 0x0308(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UHierarchicalInstancedStaticMeshComponent*>   mGeneratedMeshComponent;                                 // 0x0310(0x0010) Edit, ExportObject, ZeroConstructor, Transient, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mStaticMesh;                                             // 0x0320(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UFoliageType*>                                mFoliageTypes;                                           // 0x0328(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic
		TMap<class UFoliageType*, float>                           mFoliageTypesDensityMultiplier;                          // 0x0338(0x0050) Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic
		float                                                      mSignificanceRangeMultiplier;                            // 0x0388(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_9DOQ[0x4];                                   // 0x038C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCollectionParamUniformFloat
	 * Size -> 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
	 */
	class UFGCollectionParamUniformFloat : public UDistributionVector
	{
	public:
		class UMaterialParameterCollection*                        Collection;                                              // 0x0038(0x0008) Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                WindDirectionParamName;                                  // 0x0040(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                WindIntensityParamName;                                  // 0x0048(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IntensityMin;                                            // 0x0050(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      IntensityMax;                                            // 0x0054(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGColoredInstanceManager
	 * Size -> 0x0020 (FullSize[0x02C0] - InheritedSize[0x02A0])
	 */
	class UFGColoredInstanceManager : public USceneComponent
	{
	public:
		class UHierarchicalInstancedStaticMeshComponent*           mInstanceComponent;                                      // 0x02A0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UB0Y[0x18];                                  // 0x02A8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGColoredInstanceMeshProxy
	 * Size -> 0x0038 (FullSize[0x0658] - InheritedSize[0x0620])
	 */
	class UFGColoredInstanceMeshProxy : public UStaticMeshComponent
	{
	public:
		bool                                                       mBlockInstancing;                                        // 0x0620(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mBlockInstancingWithLumen;                               // 0x0621(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mBlockColoring;                                          // 0x0622(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mHasScalabilityMaterial;                                 // 0x0623(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JKBR[0x2C];                                  // 0x0624(0x002C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EDistanceCullCategory                                      mOptimizationCategory;                                   // 0x0650(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              mNumCustomDataFloats;                                    // 0x0651(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VY0N[0x6];                                   // 0x0652(0x0006) Fix size for supers

	public:
		unsigned char GetNumCustomDataFloats();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGColorInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGColorInterface : public UInterface
	{
	public:
		void StopIsAimedAtForColor(class AFGCharacterPlayer* byCharacter);
		void StartIsAimedAtForColor(class AFGCharacterPlayer* byCharacter, bool IsValid);
		void SetCustomizationData(const struct FFactoryCustomizationData& customizationData);
		class UClass* GetFactorySkinClass();
		struct FFactoryCustomizationData GetCustomizationData();
		bool GetCanBePatterned();
		bool GetCanBeColored();
		class UClass* GetActiveSkin();
		void ApplyCustomizationData(const struct FFactoryCustomizationData& customizationData);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCombatFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGCombatFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		class AFGCharacterBase* STATIC_TryGetCharacterFromDamageCauser(class AActor* DamageCauser);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGComboBoxSearch
	 * Size -> 0x14E0 (FullSize[0x1630] - InheritedSize[0x0150])
	 */
	class UFGComboBoxSearch : public UWidget
	{
	public:
		TArray<class FString>                                      DefaultOptions;                                          // 0x0150(0x0010) Edit, ZeroConstructor, NativeAccessSpecifierPrivate
		class FString                                              SelectedOption;                                          // 0x0160(0x0010) Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FComboBoxStyle                                      WidgetStyle;                                             // 0x0170(0x0660) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		struct FTableRowStyle                                      ItemStyle;                                               // 0x07D0(0x0D50) Edit, BlueprintVisible, NativeAccessSpecifierPublic
		struct FMargin                                             ContentPadding;                                          // 0x1520(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
		float                                                      MaxListHeight;                                           // 0x1530(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       HasDownArrow;                                            // 0x1534(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       EnableGamepadNavigationMode;                             // 0x1535(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_N463[0x2];                                   // 0x1536(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateFontInfo                                      Font;                                                    // 0x1538(0x0058) Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FSlateColor                                         ForegroundColor;                                         // 0x1590(0x0014) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       bIsFocusable;                                            // 0x15A4(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BM3P[0x3];                                   // 0x15A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      OnGenerateWidgetEvent;                                   // 0x15A8(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnSelectionChanged;                                      // 0x15B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnOpening;                                               // 0x15C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6RNK[0x58];                                  // 0x15D8(0x0058) MISSED OFFSET (PADDING)

	public:
		void SetSelectedOption(const class FString& Option);
		void SetSelectedIndex(int32_t Index);
		bool RemoveOption(const class FString& Option);
		void RefreshOptions();
		void OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
		void OnOpeningEvent__DelegateSignature();
		bool IsOpen();
		class FString GetSelectedOption();
		int32_t GetSelectedIndex();
		int32_t GetOptionCount();
		class FString GetOptionAtIndex(int32_t Index);
		int32_t FindOptionIndex(const class FString& Option);
		void ClearSelection();
		void ClearOptions();
		void AddOption(const class FString& Option);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCompassObjectWidget
	 * Size -> 0x0098 (FullSize[0x0318] - InheritedSize[0x0280])
	 */
	class UFGCompassObjectWidget : public UUserWidget
	{
	public:
		class UTexture2D*                                          mTexture;                                                // 0x0280(0x0008) BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                mText;                                                   // 0x0288(0x0018) BlueprintVisible, NativeAccessSpecifierPublic
		struct FVector2D                                           mPositionOffset;                                         // 0x02A0(0x0010) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mClampPosition;                                          // 0x02B0(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mShouldFadeInEdges;                                      // 0x02B1(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QSEV[0x6];                                   // 0x02B2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UImage*                                              mImage;                                                  // 0x02B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCheckForBlockingInCompass;                              // 0x02C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_S764[0x7];                                   // 0x02C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGActorRepresentation*                              mActorRepresentation;                                    // 0x02C8(0x0008) BlueprintVisible, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mStaticDirection;                                        // 0x02D0(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsBlocking;                                             // 0x02E8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XS4V[0x2F];                                  // 0x02E9(0x002F) MISSED OFFSET (PADDING)

	public:
		void SetCompassObjectVisbility(bool visibile);
		void SetAsStaticDirection(const struct FVector& Direction);
		void SetActorRepresentation(class UFGActorRepresentation* actorRepresentation);
		void OnObjectCentered(bool centered);
		void OnMarkerHighlightUpdated(class UFGActorRepresentation* actorRepresentation, bool highlighted, class AFGPlayerState* PlayerState);
		void OnHighlightedUpdated(bool highlighted, bool IsHighlightedByLocalPlayer, const struct FLinearColor& Color);
		void OnCompassObjectUpdated();
		void OnCompassObjectAddedToPanel(class UCanvasPanelSlot* parentSlot);
		struct FLinearColor IsHighlighted(bool* out_IsHighlighted, bool* out_HighlightedByLocalPlayer);
		ERepresentationType GetRepresentationType();
		struct FVector GetDirectionFromLocation(const struct FVector& Location);
		float GetBlockingAmount();
		float GetAngleFromDirection(const struct FVector& Direction);
		float GetAlphaAmount();
		class UFGActorRepresentation* GetActorRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCompassWidget
	 * Size -> 0x0070 (FullSize[0x02F0] - InheritedSize[0x0280])
	 */
	class UFGCompassWidget : public UUserWidget
	{
	public:
		class UCanvasPanel*                                        mCompassPanel;                                           // 0x0280(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCanvasPanel*                                        mContentPanel;                                           // 0x0288(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UImage*                                              mCompassLine;                                            // 0x0290(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGCompassObjectWidget*>                      mCompassObjects;                                         // 0x0298(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGCompassObjectWidget*>                      mCenterableCompassObjects;                               // 0x02A8(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGCompassObjectWidget*>                      mCenterableResourceCompassObjects;                       // 0x02B8(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class AFGActorRepresentationManager*                       mActorRepresentationManager;                             // 0x02C8(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGCompassObjectWidget*>                      mCurrentCenteredResourceObjects;                         // 0x02D0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UFGCompassObjectWidget*                              mCurrentCenteredObject;                                  // 0x02E0(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mThresholdForCenteredObjects;                            // 0x02E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mThresholdForCenteredResourceObjects;                    // 0x02EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void RemoveCompassObjectForRepresentation(class UFGActorRepresentation* actorRepresentation);
		void RemoveAllCompassRepresentations();
		void OnActorRepresentationUpdated(class UFGActorRepresentation* actorRepresentation);
		void OnActorRepresentationRemoved(class UFGActorRepresentation* actorRepresentation);
		void OnActorRepresentationFiltered(ERepresentationType Type, bool Visible);
		void OnActorRepresentationAdded(class UFGActorRepresentation* actorRepresentation);
		class UClass* GetCompassObjectWidgetClass(class UFGActorRepresentation* actorRepresentation);
		struct FVector2D GetCompassLineOffset();
		class UFGCompassObjectWidget* CreatePrimitiveCompassObject(class UClass* compassObjectTemplate, class UTexture2D* Texture);
		class UFGCompassObjectWidget* CreateCompassObject(class UClass* compassObjectTemplate, class UFGActorRepresentation* actorRepresentation);
		void BindActorRepresentationManager(class AFGActorRepresentationManager* representationManager);
		class UFGCompassObjectWidget* AddCompassObjectForRepresentation(class UClass* compassObjectTemplate, class UFGActorRepresentation* actorRepresentation);
		void AddAllCompassRepresentations(class AFGActorRepresentationManager* representationManager);
		void AddAllCardinalDirections(class UClass* compassObjectTemplate, class UTexture2D* northTex, class UTexture2D* eastTex, class UTexture2D* southTex, class UTexture2D* westTex, class UTexture2D* northWestTex, class UTexture2D* southEastTex, class UTexture2D* southWestText, class UTexture2D* northEastTex);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPlayerControllerBase
	 * Size -> 0x0030 (FullSize[0x08E8] - InheritedSize[0x08B8])
	 */
	class AFGPlayerControllerBase : public APlayerController
	{
	public:
		class FScriptMulticastDelegate                             OnInputChanged;                                          // 0x08B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UFGServerObject*                                     mCurrentServer;                                          // 0x08C8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGAdminInterface*                                   mAdminInterface;                                         // 0x08D0(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGCheatManager*                                     mReplicatedCheatManager;                                 // 0x08D8(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4ZTB[0x8];                                   // 0x08E0(0x0008) Fix size for supers

	public:
		void SetMouseSensitivity(float newSense);
		void SetIsUsingGamepad(bool newIsUsingGamepad);
		void Server_UpdateCappedBandwidth(int32_t Cap);
		void Server_Admin(const class FString& Command);
		void OnRep_ReplicatedCheatManager();
		void OnMouseSensitivityUpdated(const class FString& updatedCvar);
		class FString GetPresenceString();
		float GetMouseSensitivityY();
		float GetMouseSensitivityX();
		float GetMouseSensitivity();
		void GetMostRelevantSaveManager();
		void GetLocalSaveManager();
		class FText GetKeyNameForAction(const class FName& InAction, bool getGamepadKey);
		bool GetIsUsingGamepad();
		float GetDefaultMouseSensitivityY();
		float GetDefaultMouseSensitivityX();
		float GetDefaultMouseSensitivity();
		class AFGAdminInterface* GetAdminInterface();
		void FlushPressedKeys();
		void FlushMouseKeys();
		void DiscardInput();
		void Client_UpdateCappedBandwidth(int32_t Cap);
		void Admin(const class FString& Command);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPlayerController
	 * Size -> 0x01C8 (FullSize[0x0AB0] - InheritedSize[0x08E8])
	 */
	class AFGPlayerController : public AFGPlayerControllerBase
	{
	public:
		class FScriptMulticastDelegate                             OnFinishRespawn;                                         // 0x08E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnRespawnWithInventory;                                  // 0x08F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleInventory;                                       // 0x0908(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnToggleInteractionUI;                                   // 0x0918(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             MapAreaEntered;                                          // 0x0928(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PawnChanged;                                             // 0x0938(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnRespawnUIVisibilityChanged;                           // 0x0948(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YF5L[0x18];                                  // 0x0958(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mDisabledInputGateChanged;                               // 0x0970(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ER0U[0x20];                                  // 0x0980(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mCanAffectAudioVolumes;                                  // 0x09A0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DLQP[0x7];                                   // 0x09A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGFoliageStateRepProxy*                             mFoliageStateRepProxy;                                   // 0x09A8(0x0008) Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGConsoleCommandManager*                            mConsoleCommandManager;                                  // 0x09B0(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGRemoteCallObject*>                         mRemoteCallObjects;                                      // 0x09B8(0x0010) Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UInputMappingContext*                                mMappingContextChords;                                   // 0x09C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputMappingContext*                                mMappingContext;                                         // 0x09D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputMappingContext*                                mMappingContextDead;                                     // 0x09D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputMappingContext*                                mMappingContextPhotoMode;                                // 0x09E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInputMappingContext*                                mMappingContextMapMarkerMode;                            // 0x09E8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mAttentionPingActorClass;                                // 0x09F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMapAreaCheckInterval;                                   // 0x09F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8PVH[0x4];                                   // 0x09FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mCurrentMapArea;                                         // 0x0A00(0x0008) ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCurrentAreaWasPreviouslyVisited;                        // 0x0A08(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DKVU[0x7];                                   // 0x0A09(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent*                                        mMovementWindComp;                                       // 0x0A10(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0RHZ[0x28];                                  // 0x0A18(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsRespawning;                                           // 0x0A40(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J9TR[0xF];                                   // 0x0A41(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGMapAreaTexture*                                   mCachedMapAreaTexture;                                   // 0x0A50(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mInTutorialMode;                                         // 0x0A58(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mRespawnFromDeath;                                       // 0x0A59(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mRespawnFromJoin;                                        // 0x0A5A(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1E25[0x11];                                  // 0x0A5B(0x0011) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mMinPhotoModeFOV;                                        // 0x0A6C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mMaxPhotoModeFOV;                                        // 0x0A70(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FG4Y[0x4];                                   // 0x0A74(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGProximitySubsystem*                               mProximitySubsystem;                                     // 0x0A78(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMusicPlayerTickIntervalStart;                           // 0x0A80(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ATQM[0xC];                                   // 0x0A84(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     mMusicPlayerList;                                        // 0x0A90(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VP6O[0x10];                                  // 0x0AA0(0x0010) MISSED OFFSET (PADDING)

	public:
		void TogglePhotoModeInstructionsWidgetVisibility();
		void TogglePhotoModeInstructionsWidget();
		void TogglePhotoMode();
		void ToggleMap();
		void ToggleHiResPhotoMode();
		void TakePhoto();
		void Suicide();
		void StartRespawn();
		void SpawnAttentionPingFrom2DLoc(const struct FVector2D& normalizedLocation);
		void SetTutorialMode(bool Active);
		void SetRecipeShortcutOnIndex(class UClass* recipe, int32_t onIndex, int32_t onHotbarIndex);
		void SetMappingContextBound(class UInputMappingContext* Context, bool bind, int32_t Priority);
		void SetEmoteShortcutOnIndex(class UClass* emote, int32_t onIndex);
		void SetDisabledInputGate(const struct FDisabledInputGate& newDisabledInputGate);
		void SetDefaultSwatchForBuildableGroup(class UClass* SwatchGroup, class UClass* newSwatch);
		void SetCustomizationShortcutOnIndex(class UClass* customizationRecipe, int32_t onIndex);
		void SetBlueprintShortcutOnIndex(const class FString& BlueprintName, int32_t onIndex);
		void Server_Suicide();
		void Server_StartRespawn();
		void Server_SpawnAttentionPingActor(const struct FVector& pingLocation, const struct FVector& pingNormal);
		void Server_SetRecipeShortcutOnIndex(class UClass* recipe, int32_t onIndex, int32_t onHotbarIndex);
		void Server_SetHotbarIndex(int32_t Index);
		void Server_SetHighlightRepresentation(class AFGPlayerState* FGPlayerState, class UFGActorRepresentation* actorRepresentation);
		void Server_SetHighlighMarker(class AFGPlayerState* FGPlayerState, int32_t MarkerID);
		void Server_SetEmoteShortcutOnIndex(class UClass* emote, int32_t onIndex);
		void Server_SetDefaultSwatchForBuildableGroup(class UClass* SwatchGroup, class UClass* newSwatch);
		void Server_SetCustomizationShortcutOnIndex(class UClass* customizationRecipe, int32_t onIndex);
		void Server_SetBlueprintShortcutOnIndex(const class FString& BlueprintName, int32_t onIndex);
		void Server_SendChatMessage(const struct FChatMessageStruct& newMessage);
		void Server_Respawn();
		void Server_RequestMapMarkerData();
		void Server_RequestFogOfWarData();
		void Server_RemoveShortcutOnIndex(int32_t onIndex, int32_t onHotbarIndex);
		void Server_RemovePlayerColorPresetAtIndex(int32_t Index);
		void Server_RemoveMapMarker(int32_t Index);
		void Server_GiveItemStacks(class UClass* itemDescriptor, int32_t numberOfStacks);
		void Server_GiveItemSingle(class UClass* itemDescriptor, int32_t numberOfItems);
		void Server_FinishRespawn();
		void Server_AddPlayerColorPreset(const class FText& PresetName, const struct FLinearColor& Color);
		void Server_AddMapMarker(const struct FMapMarker& MapMarker);
		void RemoveShortcutAtIndex(int32_t onIndex, int32_t onHotbarIndex);
		void RemovePlayerColorPresetAtIndex(int32_t Index);
		class UFGRemoteCallObject* RegisterRemoteCallObjectClass(class UClass* InClass);
		void OnStartRespawn(bool isJoining);
		class UAkComponent* OnSetupMovementWind();
		void OnRep_IsRespawning();
		void OnFOVUpdated(const class FString& cvar);
		void OnDismantlePortableMiner(class AFGPortableMiner* PortableMiner);
		void OnDismantleGolfCart(class AFGWheeledVehicle* inGolfCart);
		void OnDisabledInputGateChanged();
		void OnChat();
		void OnAreaEnteredServer(class UClass* NewArea);
		bool NeedRespawn();
		bool IsRespawning();
		bool IsInTutorialMode();
		bool HasCurrentAreaBeenPreviouslyVisited();
		bool GiveItemStacks(class UClass* itemDescriptor, int32_t numberOfStacks);
		bool GiveItemSingle(class UClass* itemDescriptor, int32_t numberOfItems);
		int32_t GetShortcutIndexFromKey(const struct FKeyEvent& Key);
		class FString GetScreenshotPath(bool isHighRes);
		float GetScreenBasedObjectRadius(class AActor* Actor, float screenRadius);
		class UFGRemoteCallObject* GetRemoteCallObjectOfClass(class UClass* InClass);
		int32_t GetRecipeShortcutIndex(class UClass* recipe);
		class AFGProximitySubsystem* GetProximitySubsystem();
		bool GetPlayerHasMessage(class UClass* newMessage);
		class UFGPhotoModeWidget* GetPhotoModeWidget();
		int32_t GetPhotoModeFOVMin();
		int32_t GetPhotoModeFOVMax();
		int32_t GetPhotoModeFOV();
		float GetObjectScreenRadius(class AActor* Actor, float boundingRadius);
		int32_t GetNumHotbars();
		int32_t GetMappingContextPriority();
		bool GetIsPhotoMode();
		class UFGPlayerHotbar* GetHotbarAtIndex(int32_t hotbarIndex);
		bool GetHiResPhotoModeEnabled();
		struct FDisabledInputGate GetDisabledInputGate();
		void GetCurrentShortcuts(TArray<class UFGHotbarShortcut*>* out_shortcuts);
		class UClass* GetCurrentMapArea();
		int32_t GetCurrentHotbarIndex();
		class AFGCharacterBase* GetControlledCharacter();
		void GetAllHotbars(TArray<class UFGPlayerHotbar*>* out_hotbars);
		class UFGPlayerHotbar* GetActiveHotbar();
		void ExitMapMarkerMode();
		void ExecuteShortcut(int32_t shortcutIndex);
		void EnterChatMessage(const class FString& InMessage);
		void EnablePhotoMode(bool IsEnabled);
		bool DoesHotbarContainMaterialCustomization();
		void CycleToPreviousHotbar();
		void CycleToNextHotbar();
		void CreateSequenceList();
		void ClientPlayCameraAnimationSequence(class UCameraAnimationSequence* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, ECameraShakePlaySpace Space, const struct FRotator& CustomPlaySpace);
		void Client_WaitForLevelStreaming();
		void Client_TransferMapMarkerData(TArray<struct FMapMarker> MapMarkers);
		void Client_TransferFogOfWarData(TArray<unsigned char> fogOfWarRawData, int32_t finalIndex);
		void Client_SendChatMessage(const struct FChatMessageStruct& chatMessage);
		void Client_OnRepresentationHighlighted(class AFGPlayerState* FGPlayerState, class UFGActorRepresentation* actorRepresentation);
		void Client_OnMarkerHighlighted(class AFGPlayerState* FGPlayerState, int32_t MarkerID);
		void Client_OnMapMarkerRemoved(int32_t Index);
		void Client_OnMapMarkerAdded(const struct FMapMarker& MapMarker);
		void Client_NotifyHitFeedback(EHitFeedbackType feedbackType, class AActor* DamageCauser, class AFGCharacterBase* hitCharacter);
		void Client_AddMessage(class UClass* newMessage);
		void CheckPawnMapArea();
		void AddPlayerColorPreset(const class FText& PresetName, const struct FLinearColor& Color);
		bool AddMapMarkerFrom2DLoc(const struct FMapMarker& MapMarker, const struct FVector2D& normalizedLocation, struct FMapMarker* out_NewMapMarker);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConsoleCommandManager
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGConsoleCommandManager : public UObject
	{
	public:
		void TrackAllAkStats();
		void TrackAkComponentsWithNoPositionOrOwner();
		void TrackAkComponents(bool byClass);
		void ToggleRailroadBlockVisualization(bool Enabled);
		void SetSessionName(const class FString& newSessionName);
		void SaveWithNewSessionName(const class FString& saveName, const class FString& SessionName);
		void MaterialLookup(const class FString& ItemName);
		void MaterialFlowAnalysis(const class FString& recipeNames);
		void FixupBuiltByRecipeInOldSave(bool reapplyRecipeIfBetterMatchFound);
		void DumpPlayerCoordinates(const class FString& Label, bool copyToClipboard);
		void DumpFactoryStatsToLog();
		void DumpDynamicOptionsSettings();
		void DumpCrashContext();
		void DismantleVehiclesUnderWorld();
		void CrashTheGame();
		void CopyPlayerCoordinates();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConstructDisqualifier
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGConstructDisqualifier : public UObject
	{
	public:
		class FText                                                mDisqfualifyingText;                                     // 0x0028(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       mIsSoftDisqualifier;                                     // 0x0040(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JRWL[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		bool STATIC_GetIsSoftDisqualifier(class UClass* InClass);
		class FText STATIC_GetDisqualifyingText(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDInitializing
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDInitializing : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDInvalidAimLocation
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDInvalidAimLocation : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDUnaffordable
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDUnaffordable : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDInvalidPlacement
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDInvalidPlacement : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDEncroachingClearance
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDEncroachingClearance : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDEncroachingSoftClearance
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDEncroachingSoftClearance : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDEncroachingPlayer
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDEncroachingPlayer : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDEncroachingCreature
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDEncroachingCreature : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDEncroachingVehicle
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDEncroachingVehicle : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDInvalidFloor
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDInvalidFloor : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDUniqueBuilding
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDUniqueBuilding : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDMustSnap
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDMustSnap : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDMustSnapWall
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDMustSnapWall : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDMustSnapToCeiling
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDMustSnapToCeiling : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDShouldntSnap
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDShouldntSnap : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDNeedsResourceNode
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDNeedsResourceNode : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDMustSnapStation
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDMustSnapStation : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDOccupiedStation
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDOccupiedStation : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDDroneStationHasDrone
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDDroneStationHasDrone : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDNeedsFrackingCoreNode
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDNeedsFrackingCoreNode : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDNeedsFrackingSatelliteNode
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDNeedsFrackingSatelliteNode : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDResourceNodeIsOccuped
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDResourceNodeIsOccuped : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDResourceIsTooShallow
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDResourceIsTooShallow : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDNeedsWaterVolume
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDNeedsWaterVolume : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDResourceDeposit
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDResourceDeposit : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDWireSnap
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDWireSnap : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDWireTooLong
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDWireTooLong : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDWireConnectionAlreadyExists
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDWireConnectionAlreadyExists : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDInvalidSignSize
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDInvalidSignSize : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDWireTooManyConnections
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDWireTooManyConnections : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDBeltMustSnap
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDBeltMustSnap : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDConveyorTooLong
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDConveyorTooLong : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDConveyorTooShort
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDConveyorTooShort : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDConveyorTooSteep
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDConveyorTooSteep : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDConveyorInvalidShape
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDConveyorInvalidShape : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDConveyorAttachmentTooSharpTurn
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDConveyorAttachmentTooSharpTurn : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDMustHaveRailRoadTrack
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDMustHaveRailRoadTrack : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDNotEnoughSpaceOnTrack
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDNotEnoughSpaceOnTrack : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDSignalAlreadyPlaced
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDSignalAlreadyPlaced : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDSignalCannotBePlaceAtTheEndOfATrack
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDSignalCannotBePlaceAtTheEndOfATrack : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDInvalidDoubleSwitch
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDInvalidDoubleSwitch : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDTooManySwitchPositions
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDTooManySwitchPositions : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDMustAttachToTrainPlatform
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDMustAttachToTrainPlatform : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDTrackTooLong
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDTrackTooLong : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDTrackTooShort
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDTrackTooShort : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDTrackTooSteep
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDTrackTooSteep : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDTrackTrunToSharp
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDTrackTrunToSharp : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDPipeTooShort
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDPipeTooShort : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDPipeTooLong
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDPipeTooLong : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDPipeAttachmentTooSharpTurn
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDPipeAttachmentTooSharpTurn : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDPipeMustSnap
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDPipeMustSnap : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDPipeFluidTypeMismatch
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDPipeFluidTypeMismatch : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDPipeInvalidShape
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDPipeInvalidShape : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDPipeNoPathFound
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDPipeNoPathFound : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDIdenticalOverlappingBuildable
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDIdenticalOverlappingBuildable : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDNotAllowedInBlueprint
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDNotAllowedInBlueprint : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDIntersectingBlueprintDesigner
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDIntersectingBlueprintDesigner : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDDesignerWorldCommingling
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDDesignerWorldCommingling : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDInvalidUpgradeConnections
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDInvalidUpgradeConnections : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDInvalidCustomizationTarget
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDInvalidCustomizationTarget : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCDCustomizationAlreadyApplied
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGCDCustomizationAlreadyApplied : public UFGConstructDisqualifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConstructionMessageInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGConstructionMessageInterface : public UInterface
	{
	public:
		void OnConstructMessagedDeserialized();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEquipmentDescriptor
	 * Size -> 0x0008 (FullSize[0x01A8] - InheritedSize[0x01A0])
	 */
	class UFGEquipmentDescriptor : public UFGItemDescriptor
	{
	public:
		class UClass*                                              mEquipmentClass;                                         // 0x01A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class UClass* STATIC_GetEquipmentClass(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConsumableDescriptor
	 * Size -> 0x0050 (FullSize[0x01F8] - InheritedSize[0x01A8])
	 */
	class UFGConsumableDescriptor : public UFGEquipmentDescriptor
	{
	public:
		class UAkAudioEvent*                                       mConsumeEvent;                                           // 0x01A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mCustomHandsMeshScale;                                   // 0x01B0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VHLF[0x4];                                   // 0x01B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRotator                                            mCustomRotation;                                         // 0x01B8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             mCustomLocation;                                         // 0x01D0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMesh*                                       mFPOverrideMesh;                                         // 0x01E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mTPOverrideMesh;                                         // 0x01F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UStaticMesh* STATIC_GetTPOverrideMesh(class UClass* InClass);
		class USkeletalMesh* STATIC_GetFPOverrideMesh(class UClass* InClass);
		void ConsumedBy(class AFGCharacterPlayer* Player);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConsumableEquipment
	 * Size -> 0x0000 (FullSize[0x0480] - InheritedSize[0x0480])
	 */
	class AFGConsumableEquipment : public AFGEquipment
	{
	public:
		void Server_Consume();
		void PlayConsumeEffects(class UFGConsumableDescriptor* consumable);
		void GetConsumeable(class UClass** out_consumeable, int32_t* out_numConsumeable);
		void Consume();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConsumablesConsumedDependency
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UFGConsumablesConsumedDependency : public UFGAvailabilityDependency
	{
	public:
		TMap<class UClass*, int32_t>                               mConsumablesConsumedCount;                               // 0x0028(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorAttachmentHologram
	 * Size -> 0x0038 (FullSize[0x06C0] - InheritedSize[0x0688])
	 */
	class AFGConveyorAttachmentHologram : public AFGFactoryHologram
	{
	public:
		unsigned char                                              UnknownData_SPA5[0x4];                                   // 0x0688(0x0004) Fix Super Size
		float                                                      mMaxValidTurnAngle;                                      // 0x068C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableConveyorBelt*                            mSnappedConveyor;                                        // 0x0690(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableConveyorAttachment*                      mUpgradedConveyorAttachment;                             // 0x0698(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGFactoryConnectionComponent*                       mSnappedConection;                                       // 0x06A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZKN9[0x18];                                  // 0x06A8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSplineHologram
	 * Size -> 0x0020 (FullSize[0x06A8] - InheritedSize[0x0688])
	 */
	class AFGSplineHologram : public AFGBuildableHologram
	{
	public:
		class USplineComponent*                                    mSplineComponent;                                        // 0x0688(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSplinePointData>                            mSplineData;                                             // 0x0690(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              mIsConnectionSnappedOnConstruction;                      // 0x06A0(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESplineHologramBuildStep                                   mBuildStep;                                              // 0x06A1(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SKB0[0x6];                                   // 0x06A2(0x0006) Fix size for supers

	public:
		void OnRep_SplineData();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorBeltHologram
	 * Size -> 0x0148 (FullSize[0x07F0] - InheritedSize[0x06A8])
	 */
	class AFGConveyorBeltHologram : public AFGSplineHologram
	{
	public:
		unsigned char                                              UnknownData_UHN8[0x8];                                   // 0x06A8(0x0008) Fix Super Size
		class AFGConveyorPoleHologram*                             mChildPoleHologram[0x2];                                 // 0x06B0(0x0010) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGWallAttachmentHologram*                           mChildWallPoleHologram[0x2];                             // 0x06C0(0x0010) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGWallAttachmentHologram*                           mChildCeilingPoleHologram[0x2];                          // 0x06D0(0x0010) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGFactoryConnectionComponent*                       mChildWallPoleSnapConnection[0x2];                       // 0x06E0(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGFactoryConnectionComponent*                       mChildCeilingPoleSnapConnection[0x2];                    // 0x06F0(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YHR3[0x8];                                   // 0x0700(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGFactoryConnectionComponent*                       mConnectionComponents[0x2];                              // 0x0708(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGFactoryConnectionComponent*                       mSnappedConnectionComponents[0x2];                       // 0x0718(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableConveyorBelt*                            mUpgradedConveyorBelt;                                   // 0x0728(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mDefaultConveyorPoleRecipe;                              // 0x0730(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mDefaultConveyorWallPoleRecipe;                          // 0x0738(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mDefaultConveyorCeilingPoleRecipe;                       // 0x0740(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mBendRadius;                                             // 0x0748(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaxSplineLength;                                        // 0x074C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaxIncline;                                             // 0x0750(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EFactoryConnectionDirection                                mConnectionArrowComponentDirection;                      // 0x0754(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SWEN[0x3];                                   // 0x0755(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                mConnectionArrowComponent;                               // 0x0758(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mConstructionPoleLocations[0x2];                         // 0x0760(0x0030) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRotator                                            mConstructionPoleRotations[0x2];                         // 0x0790(0x0030) ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
		TArray<class USplineMeshComponent*>                        mSplineMeshes;                                           // 0x07C0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UShapeComponent*>                             mCollisionMeshes;                                        // 0x07D0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class UStaticMesh*                                         mMesh;                                                   // 0x07E0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QDWH[0x8];                                   // 0x07E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_ConnectionArrowComponentDirection();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorInstanceMeshBucket
	 * Size -> 0x0094 (FullSize[0x0800] - InheritedSize[0x076C])
	 */
	class UFGConveyorInstanceMeshBucket : public UInstancedStaticMeshComponent
	{
	public:
		int32_t                                                    mNumInstances;                                           // 0x076C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KO1D[0x90];                                  // 0x0770(0x0090) MISSED OFFSET (PADDING)

	public:
		void SetNumInstances(int32_t Count);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorInstancedSplineMeshComponent
	 * Size -> 0x0010 (FullSize[0x07D0] - InheritedSize[0x07C0])
	 */
	class UFGConveyorInstancedSplineMeshComponent : public UInstancedSplineMeshComponent
	{
	public:
		class AFGBuildableConveyorBelt*                            mOwnerBelt;                                              // 0x07C0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UURT[0x8];                                   // 0x07C8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorLiftVisibilityMesh
	 * Size -> 0x0010 (FullSize[0x0630] - InheritedSize[0x0620])
	 */
	class UFGConveyorLiftVisibilityMesh : public UStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_XG4B[0x8];                                   // 0x0620(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableConveyorLift*                            mOwnerLift;                                              // 0x0628(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorItemInstanceComponent
	 * Size -> 0x0044 (FullSize[0x07B0] - InheritedSize[0x076C])
	 */
	class UFGConveyorItemInstanceComponent : public UInstancedStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_FZ9K[0x4];                                   // 0x076C(0x0004) Fix Super Size
		unsigned char                                              UnknownData_X5M5[0x40];                                  // 0x0770(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorItemUserData
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFGConveyorItemUserData : public UAssetUserData
	{
	public:
		class UMaterialInterface*                                  mConveyorInstance;                                       // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInterface*                                  mMidConveyorInstance;                                    // 0x0030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInterface*                                  mFarConveyorInstance;                                    // 0x0038(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorItemSubsystem
	 * Size -> 0x0CA8 (FullSize[0x0FA0] - InheritedSize[0x02F8])
	 */
	class AFGConveyorItemSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_WI94[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_OIZP[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class FName, struct FConveyorItemArray>               mItemType;                                               // 0x0308(0x0050) Edit, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_17YX[0x78];                                  // 0x0358(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGConveyorInstancedSplineMeshComponent*>     mActiveConveyorBelts;                                    // 0x03D0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UFGConveyorLiftVisibilityMesh*>               mActiveConveyorLifts;                                    // 0x03E0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<struct FConveyorBucketData>                         ItemRenderMeshData;                                      // 0x03F0(0x0010) ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UHierarchicalInstancedStaticMeshComponent*>   ItemIdleRenderMeshData;                                  // 0x0400(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3TJJ[0x18];                                  // 0x0410(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLODDataEntry>                               mLodData;                                                // 0x0428(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mLiftHandleItemDesc;                                     // 0x0438(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FConveyorBeltItem                                   mHandleDummy;                                            // 0x0440(0x0048) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AJB5[0xB00];                                 // 0x0488(0x0B00) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mKnownItems;                                             // 0x0F88(0x0010) ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_D1T9[0x8];                                   // 0x0F98(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorLiftHologram
	 * Size -> 0x0148 (FullSize[0x07F0] - InheritedSize[0x06A8])
	 */
	class AFGConveyorLiftHologram : public AFGSplineHologram
	{
	public:
		unsigned char                                              UnknownData_JJBM[0x8];                                   // 0x06A8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_S4WD[0x10];                                  // 0x06B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGFactoryConnectionComponent*                       mConnectionComponents[0x2];                              // 0x06C0(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGFactoryConnectionComponent*                       mSnappedConnectionComponents[0x2];                       // 0x06D0(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableConveyorLift*                            mUpgradedConveyorLift;                                   // 0x06E0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OR5E[0x8];                                   // 0x06E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          mTopTransform;                                           // 0x06F0(0x0060) Net, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KZ39[0x18];                                  // 0x0750(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mBottomMesh;                                             // 0x0768(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh*                                         mMidMesh;                                                // 0x0770(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh*                                         mHalfMidMesh;                                            // 0x0778(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh*                                         mTopMesh;                                                // 0x0780(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh*                                         mJointMesh;                                              // 0x0788(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh*                                         mPassthroughBottomMesh;                                  // 0x0790(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh*                                         mPassthroughTopMesh;                                     // 0x0798(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_01WI[0x20];                                  // 0x07A0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGBuildablePassthrough*>                     mSnappedPassthroughs;                                    // 0x07C0(0x0010) Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate
		EFactoryConnectionDirection                                mArrowDirection;                                         // 0x07D0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QK07[0x7];                                   // 0x07D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                mArrowComponent;                                         // 0x07D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mBuildModeReverse;                                       // 0x07E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mFirstStepYaw;                                           // 0x07E8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EK0K[0x4];                                   // 0x07EC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_TopTransform();
		void OnRep_SnappedPassthroughs();
		void OnRep_ArrowDirection();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorMultiPoleHologram
	 * Size -> 0x0008 (FullSize[0x0690] - InheritedSize[0x0688])
	 */
	class AFGConveyorMultiPoleHologram : public AFGBuildableHologram
	{
	public:
		unsigned char                                              UnknownData_AXTX[0x8];                                   // 0x0688(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPoleHologram
	 * Size -> 0x0060 (FullSize[0x06E8] - InheritedSize[0x0688])
	 */
	class AFGPoleHologram : public AFGFactoryHologram
	{
	public:
		struct FPoleHeightMesh                                     mPoleMesh;                                               // 0x0688(0x0010) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N2KX[0x10];                                  // 0x0698(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                mPoleMeshComponent;                                      // 0x06A8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USceneComponent*                                     mPoleHeightComponent;                                    // 0x06B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UInstancedStaticMeshComponent*                       mInstancedMeshComponent;                                 // 0x06B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mPoleHeight;                                             // 0x06C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mMaxZoopAmount;                                          // 0x06C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mBuildModeZoop;                                          // 0x06C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mClearanceExtent;                                        // 0x06D0(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnRep_PoleMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorPoleHologram
	 * Size -> 0x0008 (FullSize[0x06F0] - InheritedSize[0x06E8])
	 */
	class AFGConveyorPoleHologram : public AFGPoleHologram
	{
	public:
		class UFGFactoryConnectionComponent*                       mSnapConnection;                                         // 0x06E8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGConveyorPoleStackable
	 * Size -> 0x0000 (FullSize[0x0610] - InheritedSize[0x0610])
	 */
	class AFGConveyorPoleStackable : public AFGBuildablePole
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryBuildingHologram
	 * Size -> 0x0078 (FullSize[0x0700] - InheritedSize[0x0688])
	 */
	class AFGFactoryBuildingHologram : public AFGBuildableHologram
	{
	public:
		TMap<class UStaticMeshComponent*, class UInstancedStaticMeshComponent*> mInstancedMeshComponents;                                // 0x0688(0x0050) ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		EFactoryBuildingPlacementRequirements                      mPlacementRequirements;                                  // 0x06D8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4Y1A[0x3];                                   // 0x06D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FIntVector                                          mDesiredZoop;                                            // 0x06DC(0x000C) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mMaxZoopAmount;                                          // 0x06E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              mDefaultBlockedZoopDirections;                           // 0x06EC(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HDRZ[0x1];                                   // 0x06ED(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EFactoryBuildingHologramBuildStep                          mBuildStep;                                              // 0x06EE(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DSA5[0x1];                                   // 0x06EF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mBuildModeZoop;                                          // 0x06F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z691[0x8];                                   // 0x06F8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_DesiredZoop();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCornerWallHologram
	 * Size -> 0x0000 (FullSize[0x0700] - InheritedSize[0x0700])
	 */
	class AFGCornerWallHologram : public AFGFactoryBuildingHologram
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCrabHatcher
	 * Size -> 0x0078 (FullSize[0x0370] - InheritedSize[0x02F8])
	 */
	class AFGCrabHatcher : public AFGStaticReplicatedActor
	{
	public:
		unsigned char                                              UnknownData_E8ZE[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class UClass*                                              mBabyClass;                                              // 0x0300(0x0008) Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             mBabySpawnCenterOffset;                                  // 0x0308(0x0018) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             mBabySpawnExtent;                                        // 0x0320(0x0018) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFloatInterval                                      mBabySpawnImpulse;                                       // 0x0338(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mCurrentHealth;                                          // 0x0340(0x0004) BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZDUP[0x2C];                                  // 0x0344(0x002C) MISSED OFFSET (PADDING)

	public:
		class AFGFlyingBabyCrab* SpawnBabyCrab();
		void RegisterHostilePlayer(class AFGCharacterPlayer* Player);
		void OnBabyCrabDestroyed(class AActor* babyCrabActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCrashSiteDebris
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGCrashSiteDebris : public AActor
	{
	public:
		unsigned char                                              UnknownData_OBF2[0x8];                                   // 0x02F8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCrashSiteDebrisActor
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class AFGCrashSiteDebrisActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_F3XB[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class UStaticMeshComponent*                                mMesh;                                                   // 0x0300(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LLUM[0x8];                                   // 0x0308(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInteractActor
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGInteractActor : public AFGStaticReplicatedActor
	{
	public:
		unsigned char                                              UnknownData_4DET[0x8];                                   // 0x02F8(0x0008) Fix Super Size

	public:
		void OnInteract(class AFGCharacterPlayer* byCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCrate
	 * Size -> 0x0050 (FullSize[0x0350] - InheritedSize[0x0300])
	 */
	class AFGCrate : public AFGInteractActor
	{
	public:
		unsigned char                                              UnknownData_KXLM[0x11];                                  // 0x0300(0x0011) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EFGCrateIconType                                           mIconType;                                               // 0x0311(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HIU4[0x6];                                   // 0x0312(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGInventoryComponent*                               mInventory;                                              // 0x0318(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AFGCharacterPlayer*>                          mInteractingPlayers;                                     // 0x0320(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x0330(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FText                                                mMapText;                                                // 0x0338(0x0018) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		bool UpdateRepresentation();
		void SetIconType(EFGCrateIconType Type);
		void SetAllowAddingItems(bool newAllowAddingItems);
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		void OnInventoryItemRemoved(class UClass* ItemClass, int32_t numRemoved);
		bool IsActorStatic();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		class UFGInventoryComponent* GetInventory();
		struct FLinearColor GetDefaultRepresentationColor();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		bool FilterInventoryClasses(class UClass* Object, int32_t idx);
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPopupWidgetContent
	 * Size -> 0x0010 (FullSize[0x0290] - InheritedSize[0x0280])
	 */
	class UFGPopupWidgetContent : public UUserWidget
	{
	public:
		class UObject*                                             mInstigator;                                             // 0x0280(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGPopupWidget*                                      mPopupWidget;                                            // 0x0288(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void SetOptionalTextElements(const class FText& Title, const class FText& Desc);
		void SetInstigatorAndInitialize(class UObject* Instigator);
		void NotifyPopupConfirmed();
		void NotifyPopupCanceled();
		bool GetShouldOkayBeEnabled();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreateOfflineSessionPrompt
	 * Size -> 0x0010 (FullSize[0x02A0] - InheritedSize[0x0290])
	 */
	class UFGCreateOfflineSessionPrompt : public UFGPopupWidgetContent
	{
	public:
		unsigned char                                              UnknownData_9C5F[0x10];                                  // 0x0290(0x0010) MISSED OFFSET (PADDING)

	public:
		void CreateOfflineSession();
		void CancelSessionCreation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureInterruptTest
	 * Size -> 0x0010 (FullSize[0x0058] - InheritedSize[0x0048])
	 */
	class UFGCreatureInterruptTest : public UFGActionTest
	{
	public:
		class AFGCreature*                                         mCreature;                                               // 0x0048(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGCreatureController*                               mCreatureController;                                     // 0x0050(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		class AFGCreatureController* GetCreatureController();
		class AFGCreature* GetCreature();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreature
	 * Size -> 0x01D0 (FullSize[0x0A80] - InheritedSize[0x08B0])
	 */
	class AFGCreature : public AFGCharacterBase
	{
	public:
		class AFGSplinePath*                                       mSpline;                                                 // 0x08B0(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mShouldOptimizeMeshWhenVisible;                          // 0x08B8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_J19E[0x7];                                   // 0x08B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnCreatureStunnedChanged;                               // 0x08C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnCreaturePersistenceChanged;                           // 0x08D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FName                                                mNavAgentName;                                           // 0x08E0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mNavBoundsScale;                                         // 0x08E8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mUseCapsuleRadiusInsteadOfBoundsForNavRadius;            // 0x08EC(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_JCGH[0x3];                                   // 0x08ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mNavigationGenerationRadius;                             // 0x08F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mNavigationRemovalRadius;                                // 0x08F4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mRoamingDistance;                                        // 0x08F8(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mRoamingWaitTime;                                        // 0x0900(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBehaviorTree*                                       mBehaviorTree;                                           // 0x0908(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FNoiseToInvestigate>                         mNoiseTypesToInvestigate;                                // 0x0910(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FCreatureBehaviorOverride>                   mOverrideBehaviorTrees;                                  // 0x0920(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FFGCreaturePerceptionSettings                       mPerceptionSettings;                                     // 0x0930(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      mFleeStressThreshold;                                    // 0x0948(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mStressReductionRate;                                    // 0x094C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mUnreachableTargetDamageStressMultiplier;                // 0x0950(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              mDisabledBehaviorStates;                                 // 0x0954(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ECreatureState                                             mCurrentBehaviorState;                                   // 0x0955(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9Q5N[0x2];                                   // 0x0956(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCreatureAction>                             mCreatureActionsSetup;                                   // 0x0958(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FCreatureActionInterrupt>                    mCreatureActionInterrupts;                               // 0x0968(0x0010) Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGStimulusAccumulator*>                      mStimuliStressAccumulators;                              // 0x0978(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      mMaximumAggroLevel;                                      // 0x0988(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mAggroFightThreshold;                                    // 0x098C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGDamageTypeAccumulator*>                    mDamageTypeStressAccumulators;                           // 0x0990(0x0010) Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UCurveFloat*                                         mAggroGainRateCurve;                                     // 0x09A0(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCurveFloat*                                         mVisibilityGainRateCurve;                                // 0x09A8(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mAggroGainRate;                                          // 0x09B0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mAggroReductionRate;                                     // 0x09B4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mCreatureFamily;                                         // 0x09B8(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMaterialInstance*>                           mArachnophobiaModeMaterials;                             // 0x09C0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       mIsArachnid;                                             // 0x09D0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EEnabled                                                   mIsEnabled;                                              // 0x09D1(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7TM6[0x6];                                   // 0x09D2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mItemToDrop;                                             // 0x09D8(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FMoveSpeedPair>                              mMoveSpeedData;                                          // 0x09E0(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mCreatureFood;                                           // 0x09F0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class AFGCreatureController*                               mCreatureController;                                     // 0x0A00(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsPersistent;                                           // 0x0A08(0x0001) Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsPassiveCreature;                                      // 0x0A09(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IKTA[0x6];                                   // 0x0A0A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        mKillOrphanHandle;                                       // 0x0A10(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mPassiveHealthRegen;                                     // 0x0A18(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3BH3[0x4];                                   // 0x0A1C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneComponent*                                     mEyeLocationComponent;                                   // 0x0A20(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UBillboardComponent*                                 mArachnophobia_Sprite;                                   // 0x0A28(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialBillboardComponent*                         mArachnophobia_Material;                                 // 0x0A30(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent*                            mArachnophobia_Particle;                                 // 0x0A38(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mDayTimePctCountAsNight;                                 // 0x0A40(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mSpawnDistance;                                          // 0x0A44(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mDespawnDistance;                                        // 0x0A48(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HSM6[0x4];                                   // 0x0A4C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGCreatureSpawner*                                  mOwningSpawner;                                          // 0x0A50(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mCanBeStunned;                                           // 0x0A58(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mCanBeStunnedByDamage;                                   // 0x0A59(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MORI[0x2];                                   // 0x0A5A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mStunDamageThreshold;                                    // 0x0A5C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mStunDamageDuration;                                     // 0x0A60(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mStunDamageCooldownDuration;                             // 0x0A64(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mStunDamageReductionRate;                                // 0x0A68(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsStunned;                                              // 0x0A6C(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FGT4[0x13];                                  // 0x0A6D(0x0013) MISSED OFFSET (PADDING)

	public:
		void SpawnDeathItem();
		void SetSplinePath(class AFGSplinePath* Spline);
		void SetMoveSpeed(EMoveSpeed newMoveSpeedType);
		void SetIsPersistent(bool persistent);
		void PlayConsumeItemEffect(class UClass* itemDescriptor, int32_t Amount);
		void OnRep_IsStunned();
		void OnRep_IsEnabled();
		void OnCreatureStateChanged(class AFGCreatureController* creatureController, ECreatureState PreviousState, ECreatureState NewState);
		void OnArachnophobiaModeChanged(bool isArachnophobiaMode);
		void Multicast_ConsumeItem(class UClass* itemDescriptor, int32_t Amount);
		bool IsTamed();
		bool IsStunned();
		bool IsPersistent();
		bool IsPassiveCreature();
		bool IsCreatureStateEnabled(ECreatureState State);
		bool HasOverriddenBehaviorState(ECreatureState State);
		class UCurveFloat* GetVisibilityGainCurve();
		float GetUnreachableTargetDamageStressMultiplier();
		float GetStunDamageThreshold();
		float GetStunDamageReductionRate();
		float GetStunDamageDuration();
		float GetStunDamageCooldownDuration();
		float GetStressReductionRate();
		TArray<class UFGStimulusAccumulator*> GetStimuliAccumulatorsStress();
		class AFGSplinePath* GetSplinePath();
		class AFGCreatureSpawner* GetSpawner();
		float GetSpawnDistance();
		float GetRandomRoamingWaitTime();
		float GetPassiveHealthRegenAmount();
		class UBehaviorTree* GetOverrideBehaviorTreeForState(ECreatureState State);
		float GetNavigationRemovalRadius();
		float GetNavigationGenerationRadius();
		class FName GetNavAgentName();
		float GetMaximumAggroLevel();
		bool GetIsEnabled();
		bool GetIsArachnid();
		float GetFleeStressThreshold();
		float GetDespawnDistance();
		float GetDayTimePctAsNight();
		TArray<class UFGDamageTypeAccumulator*> GetDamageTypeAccumulatorsStress();
		TArray<class UClass*> GetCreatureFood();
		class UClass* GetCreatureFamily();
		class AFGCreatureController* GetCreatureController();
		class UFGCreatureMovementComponent* GetCreatureCharacterMovement();
		TArray<struct FCreatureAction> GetCreatureActionsSetup();
		TArray<struct FCreatureActionInterrupt> GetCreatureActionInterrupts();
		class UBehaviorTree* GetBehaviorTreeAsset();
		TArray<class UFGAction*> GetAvailableActionsForState(ECreatureState State);
		TArray<class UMaterialInstance*> GetArachnophobiaModeMaterials();
		TArray<class UFGAction*> GetAllCreatureActions();
		float GetAggroReductionRate();
		class UCurveFloat* GetAggroGainRateCurve();
		float GetAggroGainRate();
		float GetAggroFightThreshold();
		void EndStun();
		void ConfigureArachnophobiaMode(bool isArachnophobiaMode);
		bool CanBeStunnedByDamage();
		bool CanBeStunned();
		void BeginStun(float stunDuration);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureAction
	 * Size -> 0x0030 (FullSize[0x0120] - InheritedSize[0x00F0])
	 */
	class UFGCreatureAction : public UFGAction
	{
	public:
		TWeakObjectPtr<class AFGCreatureController>                mCreatureController;                                     // 0x00F0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AFGCreature>                          mCreature;                                               // 0x00F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class UCharacterMovementComponent>          mCharacterMovement;                                      // 0x0100(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TWeakObjectPtr<class AActor>                               mCurrentTarget;                                          // 0x0108(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FCreatureActionTargetParams                         mTargetRequirements;                                     // 0x0110(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       mShouldInheritTarget;                                    // 0x0118(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCancelsOnStateChange;                                   // 0x0119(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mReceivedStateChange;                                    // 0x011A(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mMustBeGrounded;                                         // 0x011B(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCancelIfSubmerged;                                      // 0x011C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5OO2[0x3];                                   // 0x011D(0x0003) MISSED OFFSET (PADDING)

	public:
		void OnMovementModeChanged(class ACharacter* Character, EMovementMode previousMode, unsigned char PrevCustomMode);
		void OnCreatureStunUpdate(bool IsStunned);
		void OnCreatureStateChanged(class AFGCreatureController* creatureController, ECreatureState PreviousState, ECreatureState NewState);
		void NetMulticast_SetTarget(class AActor* Target);
		bool IsValidTarget(class AActor* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionAnimatedBase
	 * Size -> 0x0080 (FullSize[0x01A0] - InheritedSize[0x0120])
	 */
	class UFGCreatureActionAnimatedBase : public UFGCreatureAction
	{
	public:
		unsigned char                                              UnknownData_TOGK[0x20];                                  // 0x0120(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mAnimNotifyTriggers;                                     // 0x0140(0x0010) Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TMap<class UAnimMontage*, int32_t>                         mActiveMontages;                                         // 0x0150(0x0050) NativeAccessSpecifierPrivate

	public:
		bool StopActionAnimation(class UAnimMontage* Montage, bool broadcastToClients);
		bool StartActionAnimation(class UAnimMontage* Montage, bool stopOtherMontages, bool broadcastToClients);
		void OnMontageEnded(class UAnimMontage* Montage, bool Interrupted);
		void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool Interrupted);
		void OnAnimNotify_Internal(class UFGAnimNotify* Notify, class AActor* Owner);
		void OnAnimNotify(class UFGAnimNotify* Notify);
		void OnAnimationFinished(class UAnimMontage* Montage, bool WasInterrupted);
		void OnAnimationBlendingOut(class UAnimMontage* Montage, bool WasInterrupted);
		void NetMulticast_StopActionAnimation(class UAnimMontage* Montage);
		void NetMulticast_StartActionAnimation(class UAnimMontage* Montage, bool stopOtherMontages);
		void NetMulticast_CancelActionAnimation();
		bool IsCurrentlyAnimating();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionAnimated
	 * Size -> 0x0010 (FullSize[0x01B0] - InheritedSize[0x01A0])
	 */
	class UFGCreatureActionAnimated : public UFGCreatureActionAnimatedBase
	{
	public:
		class UAnimMontage*                                        mActionMontage;                                          // 0x01A0(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAutoStartAnimation;                                     // 0x01A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9GOD[0x7];                                   // 0x01A9(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionAmmoAttack
	 * Size -> 0x0070 (FullSize[0x0220] - InheritedSize[0x01B0])
	 */
	class UFGCreatureActionAmmoAttack : public UFGCreatureActionAnimated
	{
	public:
		class UClass*                                              mAmmoType;                                               // 0x01B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mPredictTargetLocation;                                  // 0x01B8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YTND[0x3];                                   // 0x01B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPredictionDistanceMultiplier;                           // 0x01BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFiringDispersionMultiplier;                             // 0x01C0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mProjectileFiringSocketName;                             // 0x01C4(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y3OZ[0x4];                                   // 0x01CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mLocalFiringOffsetLocation;                              // 0x01D0(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            mLaunchAngleOffset;                                      // 0x01E8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FLinearColor                                        mProjectileColor;                                        // 0x0200(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mProjectileScale;                                        // 0x0210(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0LL7[0x4];                                   // 0x0214(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGAmmoType*                                         mMagazineObject;                                         // 0x0218(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnProjectileFired(class AActor* spawnedProjectile);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionCharge
	 * Size -> 0x0130 (FullSize[0x02D0] - InheritedSize[0x01A0])
	 */
	class UFGCreatureActionCharge : public UFGCreatureActionAnimatedBase
	{
	public:
		bool                                                       mStopOnImpact;                                           // 0x01A0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_THRO[0x3];                                   // 0x01A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mKnockbackAmount;                                        // 0x01A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mVerticalKnockbackAmount;                                // 0x01A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mChargeSphereTriggerRadius;                              // 0x01AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mChargeMovementSpeed;                                    // 0x01B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTargetHitCooldown;                                      // 0x01B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGDamageType*>                               mDamageTypes;                                            // 0x01B8(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mDistanceTurnrateCurve;                                  // 0x01C8(0x0088) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UAnimMontage*                                        mChargeStartMontage;                                     // 0x0250(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        mChargeMontage;                                          // 0x0258(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        mChargeHitMontage;                                       // 0x0260(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class AActor*, float>                                 mRecentlyHitActors;                                      // 0x0268(0x0050) Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7RCT[0x18];                                  // 0x02B8(0x0018) MISSED OFFSET (PADDING)

	public:
		void ProcessHit(class AFGCharacterBase* hitCharacter, const struct FHitResult& HitResult);
		void NetMulticast_EndCharge();
		void NetMulticast_BeginCharge();
		bool IsCharging();
		void EndCharge();
		void BeginCharge();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionForwardJump
	 * Size -> 0x0018 (FullSize[0x01B8] - InheritedSize[0x01A0])
	 */
	class UFGCreatureActionForwardJump : public UFGCreatureActionAnimatedBase
	{
	public:
		float                                                      mForwardVelocity;                                        // 0x01A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mUpwardVelocity;                                         // 0x01A4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAnimMontage*                                        mJumpStartMontage;                                       // 0x01A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ESJ1[0x8];                                   // 0x01B0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnLanded();
		void OnCreatureLandedCallback(const struct FHitResult& HitResult);
		void Jump();
		struct FVector GetLaunchVelocity();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionLeapAttack
	 * Size -> 0x0080 (FullSize[0x0220] - InheritedSize[0x01A0])
	 */
	class UFGCreatureActionLeapAttack : public UFGCreatureActionAnimatedBase
	{
	public:
		class UAnimMontage*                                        mLeapStartMontage;                                       // 0x01A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        mLeapLoopMontage;                                        // 0x01A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAnimMontage*                                        mLeapLandMontage;                                        // 0x01B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLeapAttackRadius;                                       // 0x01B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLeapAttackKnockbackAmount;                              // 0x01BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLeapAttackVerticalKnockbackAmount;                      // 0x01C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLeapAttackGravityScale;                                 // 0x01C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLeapAttackArcParam;                                     // 0x01C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLeapAttackPredictionParam;                              // 0x01CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLeapAttackMaxVelocity;                                  // 0x01D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I4Q8[0x4];                                   // 0x01D4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGCharacterBase*>                            mHitCharacters;                                          // 0x01D8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class UFGDamageType*>                               mLeapAttackDamageTypes;                                  // 0x01E8(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       mLeapAttackSlamCanHitPreviousTargets;                    // 0x01F8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8WCF[0x3];                                   // 0x01F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mLeapAttackSlamRadius;                                   // 0x01FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLeapAttackSlamKnockbackAmount;                          // 0x0200(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D68F[0x4];                                   // 0x0204(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGDamageType*>                               mLeapAttackSlamDamageTypes;                              // 0x0208(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AF3Z[0x8];                                   // 0x0218(0x0008) MISSED OFFSET (PADDING)

	public:
		void ProcessSlamHit(class AFGCharacterBase* Character, const struct FHitResult& HitResult);
		void ProcessHit(class AFGCharacterBase* Character, const struct FHitResult& HitResult);
		void OnLeapStarted();
		void OnHitCharacterCleared(class AFGCharacterBase* Character);
		void OnCreatureLandedCallback(const struct FHitResult& HitResult);
		void OnCreatureLanded(const struct FHitResult& HitResult);
		void NetMulticast_OnLeapStarted();
		void NetMulticast_OnCreatureLanded(const struct FHitResult& HitResult);
		bool LaunchToTarget(class AActor* Target);
		bool LaunchToLocation(const struct FVector& Destination);
		bool IsLeapAttackActive();
		void ClearHitCharacter(class AFGCharacterBase* Character);
		void ClearAllHitCharacters();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionLeapGrabAttack
	 * Size -> 0x0018 (FullSize[0x0238] - InheritedSize[0x0220])
	 */
	class UFGCreatureActionLeapGrabAttack : public UFGCreatureActionLeapAttack
	{
	public:
		TArray<class AFGCharacterBase*>                            mGrabbedCharacters;                                      // 0x0220(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    mMaxGrabTargets;                                         // 0x0230(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3QEA[0x4];                                   // 0x0234(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnGrabbedCharacterDied(class AActor* characterActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionMeleeAttack
	 * Size -> 0x0038 (FullSize[0x01E8] - InheritedSize[0x01B0])
	 */
	class UFGCreatureActionMeleeAttack : public UFGCreatureActionAnimated
	{
	public:
		bool                                                       mProcessHitsOnClient;                                    // 0x01B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DRAN[0x3];                                   // 0x01B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mAttackRange;                                            // 0x01B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMinRange;                                               // 0x01B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mAttackAngle;                                            // 0x01BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRotationRate;                                           // 0x01C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mKnockbackAmount;                                        // 0x01C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mVerticalKnockbackAmount;                                // 0x01C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W6YK[0x4];                                   // 0x01CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGDamageType*>                               mDamageTypes;                                            // 0x01D0(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8WVB[0x8];                                   // 0x01E0(0x0008) MISSED OFFSET (PADDING)

	public:
		void StartMeleeAttack();
		void ProcessHit(class AFGCharacterBase* hitCharacter, const struct FHitResult& HitResult);
		void OnTargetReached(const struct FAIRequestID& RequestID, EPathFollowingResult Result);
		void NetMulticast_ProcessHits(TArray<struct FFGMeleeAttackHit> hits);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionProjectileCharge
	 * Size -> 0x0058 (FullSize[0x0328] - InheritedSize[0x02D0])
	 */
	class UFGCreatureActionProjectileCharge : public UFGCreatureActionCharge
	{
	public:
		class UClass*                                              mAmmoType;                                               // 0x02D0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class FName>                                        mProjectileFiringSocketNames;                            // 0x02D8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FVector                                             mLocalFiringOffsetLocation;                              // 0x02E8(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mProjectileSpawnLocationOffsetRadius;                    // 0x0300(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mProjectileVerticalAngle;                                // 0x0304(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mProjectileSpreadAngle;                                  // 0x030C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mActiveChargeFiringRate;                                 // 0x0310(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_30A1[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGAmmoType*                                         mMagazineObject;                                         // 0x0318(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DN8O[0x8];                                   // 0x0320(0x0008) MISSED OFFSET (PADDING)

	public:
		void FireProjectile();
		void FireActiveChargeProjectile();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionPull
	 * Size -> 0x0000 (FullSize[0x01B0] - InheritedSize[0x01B0])
	 */
	class UFGCreatureActionPull : public UFGCreatureActionAnimated
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionRoar
	 * Size -> 0x0018 (FullSize[0x01C8] - InheritedSize[0x01B0])
	 */
	class UFGCreatureActionRoar : public UFGCreatureActionAnimated
	{
	public:
		class UClass*                                              mNoiseClass;                                             // 0x01B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsRoaring;                                              // 0x01B8(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WIC2[0x3];                                   // 0x01B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mRoarNoiseTickrate;                                      // 0x01BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1N78[0x8];                                   // 0x01C0(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnEndRoar();
		void OnBeginRoar();
		void MakeRoarNoise();
		void EndRoar();
		void BeginRoar();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureActionSpawnActor
	 * Size -> 0x0010 (FullSize[0x01C0] - InheritedSize[0x01B0])
	 */
	class UFGCreatureActionSpawnActor : public UFGCreatureActionAnimated
	{
	public:
		TArray<struct FFGCreatureActionSpawnData>                  mSpawnData;                                              // 0x01B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureAnimInstance
	 * Size -> 0x0018 (FullSize[0x0510] - InheritedSize[0x04F8])
	 */
	class UFGCreatureAnimInstance : public UFGCharacterAnimInstance
	{
	public:
		class AFGCreature*                                         mCachedCreature;                                         // 0x04F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsThreatened;                                           // 0x0500(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1VIS[0xF];                                   // 0x0501(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureController
	 * Size -> 0x0150 (FullSize[0x0570] - InheritedSize[0x0420])
	 */
	class AFGCreatureController : public AAIController
	{
	public:
		class FScriptMulticastDelegate                             mOnCreatureStateChanged;                                 // 0x0420(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnCreatureTargetChanged;                                // 0x0430(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnCreatureTargetVisibilityChanged;                      // 0x0440(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnCreatureCurrentActionChanged;                         // 0x0450(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnNoisePerceived;                                       // 0x0460(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnActionSelectionComplete;                              // 0x0470(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UFGCreatureAction*                                   mCurrentAction;                                          // 0x0480(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mNoiseAlertDistance;                                     // 0x0488(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AVQN[0x4];                                   // 0x048C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FFGCreatureAggroData>                        mAggroTargets;                                           // 0x0490(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<class AController*>                                 mAggressors;                                             // 0x04A0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FFGCreatureVisibilityData>                   mVisibleTargets;                                         // 0x04B0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class AActor*                                              mCurrentTarget;                                          // 0x04C0(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FFGCreaturePathToTarget>                     mCachedPathToTargets;                                    // 0x04C8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FFGRecentDamageTaken>                        mRecentDamageTaken;                                      // 0x04D8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      mRecentDamageMaxAge;                                     // 0x04E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZILG[0x4];                                   // 0x04EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        mClearRecentDamageTimerHandle;                           // 0x04F0(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mStressLevel;                                            // 0x04F8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OC37[0xC];                                   // 0x04FC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCreatureActionInterrupt                            mRunningInterrupt;                                       // 0x0508(0x0030) ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6GT1[0x8];                                   // 0x0538(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGCreature*                                         mControlledCreature;                                     // 0x0540(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        mHealthRegenHandle;                                      // 0x0548(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ECreatureState                                             mCurrentBehaviorState;                                   // 0x0550(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RQ2J[0x1F];                                  // 0x0551(0x001F) MISSED OFFSET (PADDING)

	public:
		bool TryUnstuckCreature();
		void TickCreatureHealthRegen();
		void SetStressLevelToMax(bool bImmediateStateUpdate);
		void SetStressLevel(float newStress, bool bImmediateStateUpdate);
		void SetEnabled(bool Enabled);
		void SetCurrentTarget(class AActor* newTarget);
		bool SetCurrentCreatureState(ECreatureState NewState);
		void SetAggroForTarget(class AActor* Target, float newAggro, bool bImmediateStateUpdate);
		void OnTargetVisibilityChanged(class AActor* Target, bool IsVisible);
		void OnTargetPerceptionUpdated(class AActor* InActor, const struct FAIStimulus& Stimulus);
		void OnStunDamageCooldownFinished();
		void OnPawnTakeDamage(class AActor* DamagedActor, float DamageAmount, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void OnNoisePerceived(class AActor* Actor, const struct FAIStimulus& Stimulus, class UClass* NoiseType);
		void OnInterruptActionFinished(bool Success);
		void OnCreatureTakeAnyDamage(float DamageAmount, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void OnCreatureStunChanged(bool IsStunned);
		void OnCreatureStateChanged(ECreatureState PreviousState, ECreatureState NewState);
		void OnCreatureMovementModeChanged(EMovementMode PrevMovementMode, unsigned char PreviousCustomMode);
		void OnActionSelectionComplete(class UFGAction* selectedAction);
		void NullifyAllAggro(bool bImmediateStateUpdate);
		void ModifyStressLevel(float stressModification, bool bImmediateStateUpdate);
		void ModifyAggroForTarget(class AActor* Target, float aggroModification, bool bImmediateStateUpdate);
		bool IsValidTarget(class AActor* Actor);
		bool IsTargetFullyVisible(class AActor* Target);
		bool IsStuck();
		bool IsReadyToDespawn();
		bool IsFleeing();
		bool IsAggroTargetVisible(const struct FFGCreatureAggroData& AggroData, ETargetVisibilityRequirement VisibilityRequirement);
		bool IsActorConsideredThreat(class AActor* Actor);
		TArray<struct FFGCreatureVisibilityData> GetVisibleTargets();
		float GetVisibilityLevelForTarget(class AActor* Target);
		float GetStressLevel();
		float GetStressAccumulationFromStimulus(class AActor* InActor, const struct FAIStimulus& Stimulus);
		float GetStressAccumulationFromDamage(class AActor* InActor, float DamageAmount, class UFGDamageType* DamageType);
		bool GetStimulusLocationToInvestigate(struct FVector* OutLocation);
		class AActor* GetRandomWeightedTarget(ETargetVisibilityRequirement VisibilityRequirement, float MinimumAggro);
		class AActor* GetRandomTarget(ETargetVisibilityRequirement VisibilityRequirement, float MinimumAggro);
		class AActor* GetNearestAlertTarget();
		bool GetNearestAlertLocation(struct FVector* out_location);
		TArray<struct FVector> GetKnownThreatLocations();
		class AActor* GetHighestAggroTarget(ETargetVisibilityRequirement VisibilityRequirement, float MinimumAggro);
		ECreatureState GetDesiredCreatureState();
		class AActor* GetCurrentTarget();
		ECreatureState GetCurrentCreatureState();
		class UFGCreatureAction* GetCurrentAction();
		class AFGCreature* GetControlledCreature();
		class AActor* GetClosestTarget(ETargetVisibilityRequirement VisibilityRequirement, float MinimumAggro);
		class UNavigationPath* GetCachedPathToTarget(class AActor* Target, float cacheLifetime, class UClass* QueryFilter);
		TArray<class AActor*> GetAllTargets(ETargetVisibilityRequirement VisibilityRequirement, float MinimumAggro);
		TArray<struct FFGCreatureAggroData> GetAggroTargets();
		float GetAggroForTarget(class AActor* Target);
		void ClearOutdatedRecentDamageTaken();
		bool CheckCurrentState(int32_t stateMask);
		bool CanBeHostileTowards(class AActor* Actor);
		bool CanBeAlertedByTarget(class AActor* Target);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureDescriptor
	 * Size -> 0x0018 (FullSize[0x01B8] - InheritedSize[0x01A0])
	 */
	class UFGCreatureDescriptor : public UFGItemDescriptor
	{
	public:
		class UClass*                                              mCreatureClass;                                          // 0x01A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTexture2D*                                          mSmallIconArachnophobiaMode;                             // 0x01A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mBigIconArachnophobiaMode;                               // 0x01B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureFamily
	 * Size -> 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
	 */
	class UFGCreatureFamily : public UObject
	{
	public:
		TMap<class UClass*, ECreatureFamilyHostility>              mFamilyHostility;                                        // 0x0028(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		ECreatureFamilyHostility                                   mDefaultResponse;                                        // 0x0078(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I7P1[0x7];                                   // 0x0079(0x0007) MISSED OFFSET (PADDING)

	public:
		ECreatureFamilyHostility GetHostilityTowards(class UClass* otherFamily);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureMovementComponent
	 * Size -> 0x0008 (FullSize[0x0F10] - InheritedSize[0x0F08])
	 */
	class UFGCreatureMovementComponent : public UCharacterMovementComponent
	{
	public:
		class AFGCreature*                                         mCreature;                                               // 0x0F08(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreaturesKilledDependency
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UFGCreaturesKilledDependency : public UFGAvailabilityDependency
	{
	public:
		TMap<class UClass*, int32_t>                               mCreaturesKilledCount;                                   // 0x0028(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureSpawner
	 * Size -> 0x0098 (FullSize[0x0390] - InheritedSize[0x02F8])
	 */
	class AFGCreatureSpawner : public AActor
	{
	public:
		unsigned char                                              UnknownData_8M3J[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class UFGCreatureSpawnerDebugComponent*                    mDebugComponent;                                         // 0x0300(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBillboardComponent*                                 mEditorSprite;                                           // 0x0308(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UCapsuleComponent*                                   mCapsuleComponent;                                       // 0x0310(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mCreatureClass;                                          // 0x0318(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mCreatureClassArachnidOverride;                          // 0x0320(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FInt32Interval                                      mNumberOfCreatures;                                      // 0x0328(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanSpawnDuringDay;                                      // 0x0330(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanSpawnDuringNight;                                    // 0x0331(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X8X2[0x2];                                   // 0x0332(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSpawnRadius;                                            // 0x0334(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsActive;                                               // 0x0338(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_61HJ[0x7];                                   // 0x0339(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSpawnData>                                  mSpawnData;                                              // 0x0340(0x0010) ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		TArray<class AFGSplinePath*>                               mSplines;                                                // 0x0350(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FInventoryStack>                             mAttachedItemLootTable;                                  // 0x0360(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		bool                                                       mCachedIsNearBase;                                       // 0x0370(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QF5E[0x3];                                   // 0x0371(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSpawnDistanceOverride;                                  // 0x0374(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDespawnDistanceOverride;                                // 0x0378(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XJ4C[0xA];                                   // 0x037C(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mVisualizeSpawnDistance;                                 // 0x0386(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_7QHG[0x1];                                   // 0x0387(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mRespawnTimeIndays;                                      // 0x0388(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TENQ[0x4];                                   // 0x038C(0x0004) MISSED OFFSET (PADDING)

	public:
		bool VisualizeSpawnDistance();
		bool IsSpawnerActive();
		bool IsReadyToSpawn();
		bool IsNearBase();
		int32_t GetTotalNumCreatures();
		TArray<class AFGSplinePath*> GetSplines();
		float GetSpawnDistance();
		int32_t GetNumUnspawnedCreatures();
		class UClass* GetCreatureToSpawn();
		TArray<class AFGCreature*> GetCreatures();
		class UClass* GetCreatureClassArachnidOverride();
		class UClass* GetCreatureClass();
		void CreatureDied(class AActor* thisActor);
		TArray<class AFGCreature*> AppendCreatures(TArray<class AFGCreature*>* out_creatures);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureSpawnerDebugComponent
	 * Size -> 0x0000 (FullSize[0x00A0] - InheritedSize[0x00A0])
	 */
	class UFGCreatureSpawnerDebugComponent : public UActorComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCreatureSubsystem
	 * Size -> 0x00D8 (FullSize[0x03D0] - InheritedSize[0x02F8])
	 */
	class AFGCreatureSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_Y3YG[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_IQDG[0x28];                                  // 0x0300(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FAgentGenerationProperties>                  mNavAgentGenerationProperties;                           // 0x0328(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		int32_t                                                    mMaxNumCreatures;                                        // 0x0338(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCreaturesCanAttackEachother;                            // 0x033C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RWUG[0x3];                                   // 0x033D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mProtectedCreatures;                                     // 0x0340(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<struct FSpawnerInfo>                                mAllSpawners;                                            // 0x0350(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class AFGCreature*>                                 mAllCreatures;                                           // 0x0360(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class AFGFlyingBabyCrab*>                           mAllFlyingBabyCrabs;                                     // 0x0370(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class AFGCreature*>                                 mAllPersistentCreatures;                                 // 0x0380(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mAllNoiseClasses;                                        // 0x0390(0x0010) Edit, ZeroConstructor, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<struct FCreatureClassOverride>                      mDefaultCreatureClassOverrides;                          // 0x03A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FCreatureClassOverride>                      mCreatureClassOverrides;                                 // 0x03B0(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		bool                                                       mArachnidCreaturesDisabled;                              // 0x03C0(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TCLG[0xF];                                   // 0x03C1(0x000F) MISSED OFFSET (PADDING)

	public:
		void SetCreaturesCanAttackEachother(bool canAttack);
		void SetArachnidCreaturesDisabled(bool Disabled, ECreatureReplaceAction replaceAction);
		void RemoveCreatureClassOverride(class UClass* CreatureClass, bool updateScannableState);
		class UClass* OverrideSpawnedCreatureClass(class UClass* creatureClassToSpawn);
		void OnPreLevelRemovedFromWorld(class ULevel* inLevel, class UWorld* InWorld);
		void OnCreaturePersistenceUpdated(class AFGCreature* creature, bool IsPersistent);
		bool IsProtectedCreature(class UClass* CreatureClass);
		bool IsCreatureStressEnabled();
		class UClass* GetOverriddenCreatureClass(class UClass* CreatureClass);
		bool GetArachnidCreaturesDisabled();
		class AFGCreatureSubsystem* STATIC_Get(class UObject* WorldContext);
		bool CanCreaturesAttackEachother();
		void AddCreatureClassOverride(class UClass* classToReplace, class UClass* overrideClass, ECreatureReplaceAction replaceAction);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCurrentTutorialStepDependency
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGCurrentTutorialStepDependency : public UFGAvailabilityDependency
	{
	public:
		EIntroTutorialSteps                                        mIntroTutorialStep;                                      // 0x0028(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2IP7[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		EIntroTutorialSteps GetIntroTutorialStep();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRecipe
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UFGRecipe : public UObject
	{
	public:
		bool                                                       mDisplayNameOverride;                                    // 0x0028(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9ZZ3[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                mDisplayName;                                            // 0x0030(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FItemAmount>                                 mIngredients;                                            // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FItemAmount>                                 mProduct;                                                // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mOverriddenCategory;                                     // 0x0068(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mManufacturingMenuPriority;                              // 0x0070(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mManufactoringDuration;                                  // 0x0074(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mManualManufacturingMultiplier;                          // 0x0078(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZQ35[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mProducedIn[0x10];                                       // 0x0080(0x0010) UNKNOWN PROPERTY: ArrayProperty
		class UClass*                                              mMaterialCustomizationRecipe;                            // 0x0090(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<EEvents>                                            mRelevantEvents;                                         // 0x0098(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mVariablePowerConsumptionConstant;                       // 0x00A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mVariablePowerConsumptionFactor;                         // 0x00AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void STATIC_SortByName(TArray<class UClass*>* Recipes);
		void STATIC_SortByManufacturingMenuPriority(TArray<class UClass*>* Recipes);
		bool STATIC_IsRecipeAffordable(class AFGCharacterPlayer* Player, class UClass* recipe);
		bool STATIC_HasAnyProducers(class UClass* InClass);
		TArray<EEvents> STATIC_GetRelevantEvents(class UClass* InClass);
		class FText STATIC_GetRecipeName(class UClass* InClass);
		TArray<struct FItemAmount> STATIC_GetProducts(class UClass* InClass, bool allowChildRecipes);
		TArray<class UClass*> STATIC_GetProducedIn(class UClass* InClass);
		class UClass* STATIC_GetMaterialCustomizationRecipe(class UClass* recipe);
		float STATIC_GetManufacturingMenuPriority(class UClass* InClass);
		float STATIC_GetManufacturingDuration(class UClass* InClass);
		float STATIC_GetManualManufacturingDuration(class UClass* InClass);
		TArray<struct FItemAmount> STATIC_GetIngredients(class UClass* InClass);
		class UClass* STATIC_GetDescriptorForRecipe(class UClass* recipe);
		class UClass* STATIC_GetCategory(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCustomizationRecipe
	 * Size -> 0x0008 (FullSize[0x00B8] - InheritedSize[0x00B0])
	 */
	class UFGCustomizationRecipe : public UFGRecipe
	{
	public:
		class UClass*                                              mCustomizationDesc;                                      // 0x00B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UClass* STATIC_GetCustomizationDescriptor(class UClass* InClass);
		float STATIC_GetCustomizationDescMenuPriority(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCustomizerCategory
	 * Size -> 0x0000 (FullSize[0x0120] - InheritedSize[0x0120])
	 */
	class UFGCustomizerCategory : public UFGCategory
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGCustomizerSubCategory
	 * Size -> 0x0000 (FullSize[0x0120] - InheritedSize[0x0120])
	 */
	class UFGCustomizerSubCategory : public UFGCustomizerCategory
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDamageOverTime
	 * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
	 */
	class UFGDamageOverTime : public UObject
	{
	public:
		float                                                      mDamageInterval;                                         // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P1TG[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGDamageType*>                               mDamageTypes;                                            // 0x0030(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mActorFilter;                                            // 0x0040(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		bool STATIC_ShouldBeAppliedToActor(class UClass* DotClass, class AActor* Actor);
		TArray<class UFGDamageType*> STATIC_GetDamageTypes(class UClass* DotClass);
		float STATIC_GetDamageInterval(class UClass* DotClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDamageOverTimeVolume
	 * Size -> 0x0020 (FullSize[0x0350] - InheritedSize[0x0330])
	 */
	class AFGDamageOverTimeVolume : public AVolume
	{
	public:
		unsigned char                                              UnknownData_D74R[0x8];                                   // 0x0330(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mPostProcessSettings;                                    // 0x0338(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGDotComponent*                                     mDotComponent;                                           // 0x0340(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BI00[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDamageType
	 * Size -> 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
	 */
	class UFGDamageType : public UDamageType
	{
	public:
		class UAkAudioEvent*                                       mImpactAudioEvent;                                       // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystem*                                     mImpactParticle;                                         // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mAttachParticleToTarget;                                 // 0x0050(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mShouldDamageDestructible;                               // 0x0051(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E6S1[0x2];                                   // 0x0052(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDamageAmount;                                           // 0x0054(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mAlwaysCauseStun;                                        // 0x0058(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsGasPointType;                                         // 0x0059(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsGasRadialType;                                        // 0x005A(0x0001) Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NA11[0x5];                                   // 0x005B(0x0005) MISSED OFFSET (PADDING)

	public:
		void SpawnEffects(const struct FHitResult& HitResult, class AActor* Outer);
		void ProcessDamage(const struct FHitResult& HitResult, class AController* Instigator, class AActor* DamageCauser, float DamageAmount, TArray<class AActor*> ignoredActors);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDamageTypeAccumulator
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UFGDamageTypeAccumulator : public UObject
	{
	public:
		TArray<class UClass*>                                      mDamageTypeFilter;                                       // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mSourceActorFilter;                                      // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mInstigatorFilter;                                       // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              mBlockedStates;                                          // 0x0058(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XBXY[0x3];                                   // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mBaseGain;                                               // 0x005C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDamageMultiplierGain;                                   // 0x0060(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mDamageRange;                                            // 0x0064(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LET6[0x4];                                   // 0x006C(0x0004) MISSED OFFSET (PADDING)

	public:
		bool ShouldAccumulateForDamage(class AFGCreatureController* Controller, float DamageAmount, class UFGDamageType* DamageType, class AActor* SourceActor);
		float GetAccumulation(float DamageAmount, class UFGDamageType* DamageType, class AActor* SourceActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDeathMarker
	 * Size -> 0x0028 (FullSize[0x0320] - InheritedSize[0x02F8])
	 */
	class AFGDeathMarker : public AActor
	{
	public:
		unsigned char                                              UnknownData_IM0H[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x0300(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FText                                                mMapText;                                                // 0x0308(0x0018) Net, NativeAccessSpecifierPrivate

	public:
		bool UpdateRepresentation();
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		bool IsActorStatic();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		struct FLinearColor GetDefaultRepresentationColor();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDebugOverlayWidget
	 * Size -> 0x0010 (FullSize[0x0290] - InheritedSize[0x0280])
	 */
	class UFGDebugOverlayWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_HTUK[0x10];                                  // 0x0280(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateDebugOverlayData(TArray<class FString> debugOverlayData);
		void UpdateDebugOverlay();
		void GetStoryOverlayData(TArray<class FString>* out_debugOverlayData);
		void GetStatisticsOverlayData(TArray<class FString>* out_debugOverlayData);
		void GetShoppingListOverlayData(TArray<class FString>* out_debugOverlayData);
		void GetOptionsOverlayData(TArray<class FString>* out_debugOverlayData);
		void GetOnlineInfoOverlayData(TArray<class FString>* out_debugOverlayData);
		void GetDefaultOverlayData(TArray<class FString>* out_debugOverlayData);
		EDebugOverlayType GetCurrentDebugOverlayType();
		void GetAdvancedGameSettingsOverlayData(TArray<class FString>* out_debugOverlayData);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDecorationActor
	 * Size -> 0x0010 (FullSize[0x0310] - InheritedSize[0x0300])
	 */
	class AFGDecorationActor : public AFGInteractActor
	{
	public:
		unsigned char                                              UnknownData_Q7V0[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mDecorationDescriptor;                                   // 0x0308(0x0008) BlueprintVisible, Net, ZeroConstructor, SaveGame, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDecorationDescriptor
	 * Size -> 0x0048 (FullSize[0x01F0] - InheritedSize[0x01A8])
	 */
	class UFGDecorationDescriptor : public UFGEquipmentDescriptor
	{
	public:
		class UStaticMesh*                                         mGroundMesh;                                             // 0x01A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mGroundMeshScale;                                        // 0x01B0(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mMesh1p;                                                 // 0x01C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mMesh3P;                                                 // 0x01D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UMaterialInstance*>                           mFirstPersonMaterials;                                   // 0x01D8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mDecorationActorClass;                                   // 0x01E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UStaticMesh* STATIC_GetMesh3P(class UClass* InClass);
		class UStaticMesh* STATIC_GetMesh1P(class UClass* InClass);
		struct FVector STATIC_GetGroundMeshScale(class UClass* InClass);
		class UStaticMesh* STATIC_GetGroundMesh(class UClass* InClass);
		TArray<class UMaterialInstance*> STATIC_GetFirstPersonMaterialInstances(class UClass* InClass);
		class UClass* STATIC_GetDecorationActorClass(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDecorationTemplate
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGDecorationTemplate : public AActor
	{
	public:
		unsigned char                                              UnknownData_4MH5[0x8];                                   // 0x02F8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDecorDescriptor
	 * Size -> 0x0008 (FullSize[0x01B0] - InheritedSize[0x01A8])
	 */
	class UFGDecorDescriptor : public UFGBuildingDescriptor
	{
	public:
		class UStaticMesh*                                         mDecorMesh;                                              // 0x01A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UStaticMesh* STATIC_GetDecorMesh(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDecorHologram
	 * Size -> 0x0008 (FullSize[0x0690] - InheritedSize[0x0688])
	 */
	class AFGDecorHologram : public AFGBuildableHologram
	{
	public:
		class UStaticMesh*                                         mDecorMesh;                                              // 0x0688(0x0008) Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDedicatedServerUIProxy
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGDedicatedServerUIProxy : public UInterface
	{
	public:
		void HandleUnclaimedServerGreeting(const class FScriptDelegate& ServerClaimCallback, const class FScriptDelegate& CancelCallback);
		void HandleSetJoinPasswordRequest(const class FScriptDelegate& SetJoinPasswordCallback, const class FScriptDelegate& CancelCallback);
		void HandleSetAdminPasswordRequest(const class FScriptDelegate& SetAdminPasswordCallback, const class FScriptDelegate& CancelCallback);
		void HandleServerMessage(EServerMessage Message);
		void HandlePasswordRequest(EPrivilegeLevel MinimumTargetPrivilege, const class FScriptDelegate& TryPasswordCallback, const class FScriptDelegate& CancelCallback);
		void HandleCreateGameRequest(const class FScriptDelegate& CreateGameCallback, const class FScriptDelegate& CancelCallback);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDestructibleActor
	 * Size -> 0x0068 (FullSize[0x0360] - InheritedSize[0x02F8])
	 */
	class AFGDestructibleActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_WVAP[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class UStaticMeshComponent*                                mStaticMeshProxy;                                        // 0x0300(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UGeometryCollection*                                 mGeometryCollection;                                     // 0x0308(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDestructibleActorFractureTime;                          // 0x0310(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EDestructibleActorState                                    mDestructibleActorState;                                 // 0x0314(0x0001) Edit, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YFXM[0x3];                                   // 0x0315(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UGeometryCollectionComponent*                        mGeometryCollectionComponent;                            // 0x0318(0x0008) Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        mDestructibleRemovalTimerHandle;                         // 0x0320(0x0008) Edit, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDestructionImpulseScale;                                // 0x0328(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mBindChaosPhysicsCollisionEvent;                         // 0x032C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KJQ8[0x3];                                   // 0x032D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mDestroyedByForceLocation;                               // 0x0330(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRadialForceDestruction;                                 // 0x0348(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_L79A[0x4];                                   // 0x034C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              mDestroyedByActor;                                       // 0x0350(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasBeenFractured;                                       // 0x0358(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4S0I[0x7];                                   // 0x0359(0x0007) MISSED OFFSET (PADDING)

	public:
		void PlayDestructEffects();
		void OnRep_DestructibleActorState();
		void OnDestructibleFractured();
		void OnDesctructibleDestroyed();
		void OnChaosPhysicsCollision(const struct FChaosPhysicsCollisionInfo& CollisionInfo);
		struct FVector GetForceLocation();
		EDestructibleActorState GetDestructibleActorState();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGProjectile
	 * Size -> 0x02E0 (FullSize[0x05D8] - InheritedSize[0x02F8])
	 */
	class AFGProjectile : public AActor
	{
	public:
		unsigned char                                              UnknownData_W13O[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		bool                                                       mCanTriggerExplodeBySameClass;                           // 0x0300(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6OAP[0x3];                                   // 0x0301(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mProjectileLifespan;                                     // 0x0304(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mProjectileStickspan;                                    // 0x0308(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        mProjectileColor;                                        // 0x030C(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mProjectileScale;                                        // 0x031C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mCanBeHitByHomingAmmo;                                   // 0x0320(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KL2J[0x7];                                   // 0x0321(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class URotatingMovementComponent*                          mRotatingMovementComp;                                   // 0x0328(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mClusterProjectileClass;                                 // 0x0330(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FInt32Interval                                      mNumClusterProjectiles;                                  // 0x0338(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mClusterProjectileSpreadIntervalAngle;                   // 0x0340(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mClusterProjectileSidewaysLaunchSpeed;                   // 0x0348(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mClusterProjectileVerticalLaunchSpeed;                   // 0x0350(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mClusterUpVector;                                        // 0x0358(0x0018) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            mThrowRotation;                                          // 0x0370(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		class AActor*                                              mTargetActor;                                            // 0x0388(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mTargetLocation;                                         // 0x0390(0x0018) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsHomingProjectile;                                     // 0x03A8(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MHKO[0x7];                                   // 0x03A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGAmmoTypeProjectile*                               mSourceAmmoDescriptor;                                   // 0x03B0(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGDamageType*>                               mDamageTypesOnImpact;                                    // 0x03B8(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGDamageType*>                               mDamageTypesAtEndOfLife;                                 // 0x03C8(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mGravityScaleOverLifespan;                               // 0x03D8(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mMaxHomingAccelerationMagnitude;                         // 0x0460(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_91AX[0x4];                                   // 0x0464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  mHomingStrengthOverLifespan;                             // 0x0468(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mHomingStrengthOverDistanceToTarget;                     // 0x04F0(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mProjectileStartingHealth;                               // 0x0578(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mProjectileCurrentHealth;                                // 0x057C(0x0004) BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mImpactNoise;                                            // 0x0580(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mExplodeNoise;                                           // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasExploded;                                            // 0x0590(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IA8V[0x7];                                   // 0x0591(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mInitialVelocity;                                        // 0x0598(0x0018) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTraveledDistance;                                       // 0x05B0(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WCWH[0x4];                                   // 0x05B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTimerHandle                                        mSecondaryTriggerDelayTimer;                             // 0x05B8(0x0008) SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USphereComponent*                                    mCollisionComp;                                          // 0x05C0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGProjectileMovementComponent*                      mProjectileMovement;                                     // 0x05C8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Q7KB[0x8];                                   // 0x05D0(0x0008) Fix size for supers

	public:
		void TriggerSecondaryWithDelay(float DelayTime);
		void TriggerSecondary();
		void SetTargetLocation(const struct FVector& TargetLocation);
		void SetTargetActor(class AActor* Actor);
		void SetSourceAmmoDescriptor(class UFGAmmoTypeProjectile* ammoDescriptor);
		void SetMaximumHomingAccelerationMagnitude(float newHomingAccelerationMagnitude);
		void SetIsHomingProjectile(bool isHoming);
		void SetInitialVelocity(const struct FVector& InVelocity);
		void SetInitialHealth(float newHealth);
		void SetImpactDamageTypes(TArray<class UFGDamageType*> impactDamageTypes);
		void SetEndOfLifeDamageTypes(TArray<class UFGDamageType*> endOfLifeDamageTypes);
		void SetCurveHomingStrengthOverLifespan(const struct FRuntimeFloatCurve& newCurve);
		void SetCurveHomingStrengthOverDistanceToTarget(const struct FRuntimeFloatCurve& newCurve);
		void SetCurveGravityScaleOverLifespan(const struct FRuntimeFloatCurve& newCurve);
		void SetAndEnableRotation(float Scale);
		void PlayExplosionEffects();
		void PlayAttachEffect();
		void OnSpawnedAsClusterProjectile();
		void OnRep_TargetLocation();
		void OnRep_TargetActor();
		void OnRep_MaxHomingAccelerationMagnitude();
		void OnRep_IsHomingProjectile();
		void OnRep_InitialVelocity();
		void OnRep_Exploded();
		void OnImpact_Native(const struct FHitResult& HitResult);
		void OnImpact(const struct FHitResult& HitResult);
		void OnExplode();
		void OnBounce_Native(const struct FHitResult& HitResult, const struct FVector& hitVelocity);
		void OnBounce(const struct FHitResult& HitResult, const struct FVector& hitVelocity);
		void Multicast_SpawnImpactDamageEffects(const struct FHitResult& HitResult);
		void Multicast_SpawnEndOfLifeDamageEffects(const struct FHitResult& HitResult);
		void Multicast_OnImpact(const struct FHitResult& HitResult, bool wasAttached);
		struct FRotator GetThrowRotation();
		struct FVector GetProjectileTargetLocation();
		class USphereComponent* GetCollisionSphere();
		bool CanBeHitByHomingAmmo();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDestructiveProjectile
	 * Size -> 0x0038 (FullSize[0x0610] - InheritedSize[0x05D8])
	 */
	class AFGDestructiveProjectile : public AFGProjectile
	{
	public:
		class USphereComponent*                                    mDestructionCollisionComp;                               // 0x05D8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mDestroysRelevantActors;                                 // 0x05E0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mDestroysFoliage;                                        // 0x05E1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LTG4[0x2];                                   // 0x05E2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mMaxParticleSpawnsPerDetonation;                         // 0x05E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VAIP[0x28];                                  // 0x05E8(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDismantleInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGDismantleInterface : public UInterface
	{
	public:
		void Upgrade(class AActor* NewActor);
		void StopIsLookedAtForDismantle(class AFGCharacterPlayer* byCharacter);
		void StartIsLookedAtForDismantle(class AFGCharacterPlayer* byCharacter);
		void PreUpgrade();
		struct FVector GetRefundSpawnLocationAndArea(const struct FVector& aimHitLocation, float* out_radius);
		void GetDismantleRefund(TArray<struct FInventoryStack>* out_refund, bool noBuildCostEnabled);
		void GetChildDismantleActors(TArray<class AActor*>* out_ChildDismantleActors);
		void Dismantle();
		bool CanDismantle();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDismantleModeDescriptor
	 * Size -> 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
	 */
	class UFGDismantleModeDescriptor : public UFGBuildGunModeDescriptor
	{
	public:
		int32_t                                                    mMultiDismantleLimit;                                    // 0x0040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CDQ3[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		int32_t GetMultiDismantleLimit();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDockableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGDockableInterface : public UInterface
	{
	public:
		void WasUndocked();
		void WasDocked(class AFGBuildableDockingStation* atStation);
		void OnTransferComplete();
		void OnBeginUnloadVehicle();
		void OnBeginLoadVehicle();
		class UFGInventoryComponent* GetDockInventory();
		class UFGInventoryComponent* GetDockFuelInventory();
		bool CanDock(EDockStationType atStation);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDockingStationInfo
	 * Size -> 0x0078 (FullSize[0x0370] - InheritedSize[0x02F8])
	 */
	class AFGDockingStationInfo : public AInfo
	{
	public:
		unsigned char                                              UnknownData_VOT0[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_V9RT[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             StationStatusChangedDelegate;                            // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S9QZ[0x1];                                   // 0x0320(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EDockingStationStatus                                      mStatus;                                                 // 0x0321(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FCHK[0x6];                                   // 0x0322(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableDockingStation*                          mStation;                                                // 0x0328(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mLocation;                                               // 0x0330(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x0348(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FLinearColor                                        mDefaultRepresentationColor;                             // 0x0350(0x0010) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              mBuildingTag;                                            // 0x0360(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		bool UpdateRepresentation();
		void StationStatusChanged__DelegateSignature(EDockingStationStatus Status);
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		void OnRep_Status();
		void OnRep_BuildingTag();
		bool IsActorStatic();
		EDockingStationStatus GetStationStatus();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDotComponent
	 * Size -> 0x0020 (FullSize[0x02C0] - InheritedSize[0x02A0])
	 */
	class UFGDotComponent : public USceneComponent
	{
	public:
		class UClass*                                              mDotClass;                                               // 0x02A0(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      mOverlappingActor;                                       // 0x02A8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MKNL[0x8];                                   // 0x02B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnDOTReceiverCreated(class UFGDotReceiverComponent* dotReceiver);
		void OnActorEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		void OnActorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDotReceiverComponent
	 * Size -> 0x0010 (FullSize[0x00B0] - InheritedSize[0x00A0])
	 */
	class UFGDotReceiverComponent : public UActorComponent
	{
	public:
		TArray<struct FActiveDOT>                                  mActiveDOTs;                                             // 0x00A0(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected

	public:
		void UnregisterActiveDOT(class UClass* DotClass, class AActor* SourceActor);
		void RegisterActiveDOT(class UClass* DotClass, class AActor* SourceActor);
		TArray<struct FActiveDOT> GetActiveDOTs();
		void ClearAllDOTs();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDowsingStick
	 * Size -> 0x0040 (FullSize[0x04C0] - InheritedSize[0x0480])
	 */
	class AFGDowsingStick : public AFGEquipment
	{
	public:
		int32_t                                                    mNumVolumesPerTick;                                      // 0x0480(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DYN7[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      mWaterVolumes;                                           // 0x0488(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ENXQ[0x28];                                  // 0x0498(0x0028) MISSED OFFSET (PADDING)

	public:
		struct FVector GetWaterLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDowsingStickAttachment
	 * Size -> 0x0008 (FullSize[0x0340] - InheritedSize[0x0338])
	 */
	class AFGDowsingStickAttachment : public AFGEquipmentAttachment
	{
	public:
		unsigned char                                              UnknownData_8VGR[0x8];                                   // 0x0338(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDriveablePawn
	 * Size -> 0x0060 (FullSize[0x03E0] - InheritedSize[0x0380])
	 */
	class AFGDriveablePawn : public APawn
	{
	public:
		unsigned char                                              UnknownData_AKY1[0x8];                                   // 0x0380(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mShouldAttachDriver;                                     // 0x0388(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsDriverVisible;                                        // 0x0389(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UHSA[0x2];                                   // 0x038A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                mDriverSeatSocket;                                       // 0x038C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ACBT[0x4];                                   // 0x0394(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAnimSequence*                                       mDriverSeatAnimation;                                    // 0x0398(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             mDriverExitOffset;                                       // 0x03A0(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2ZTQ[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputMappingContext*                                mMappingContext;                                         // 0x03C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mMappingContextPriority;                                 // 0x03C8(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D7JQ[0x4];                                   // 0x03CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGCharacterPlayer*                                  mDriver;                                                 // 0x03D0(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsDriving;                                              // 0x03D8(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DBCL[0x7];                                   // 0x03D9(0x0007) MISSED OFFSET (PADDING)

	public:
		bool ShouldAttachDriver();
		void Server_DriverLeave();
		void ReceiveOnDriverLeave();
		void ReceiveOnDriverEnter();
		void PlaceExitingDriver();
		void OnRep_IsDriving();
		void OnRep_Driver(class AFGCharacterPlayer* previousDriver);
		bool IsDriving();
		bool IsDriverVisible();
		void Input_LeaveVehicle(const struct FInputActionValue& ActionValue);
		bool HasPendingDriver();
		class FName GetDriverSeatSocket();
		class UAnimSequence* GetDriverSeatAnimation();
		struct FVector GetDriverExitOffset();
		class AFGCharacterPlayer* GetDriver();
		bool DriverLeave(bool keepDriving);
		bool DriverEnter(class AFGCharacterPlayer* Driver);
		bool CanLeaveVehicle(class AFGCharacterPlayer* Character);
		bool CanDriverEnter(class AFGCharacterPlayer* Character);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDroneStationInfo
	 * Size -> 0x0118 (FullSize[0x0410] - InheritedSize[0x02F8])
	 */
	class AFGDroneStationInfo : public AInfo
	{
	public:
		unsigned char                                              UnknownData_AVA4[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_X78D[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             DroneStatusChangedDelegate;                              // 0x0308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             EstimatedRoundTripTimeChangedDelegate;                   // 0x0318(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             EstimatedTransportRateChangedDelegate;                   // 0x0328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             DroneTripStatisticsChangedDelegate;                      // 0x0338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AFGBuildableDroneStation*                            mStation;                                                // 0x0348(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mStationLocation;                                        // 0x0350(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mStationClass;                                           // 0x0368(0x0008) Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGDroneStationInfo*                                 mPairedStation;                                          // 0x0370(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AFGDroneStationInfo*>                         mConnectedStations;                                      // 0x0378(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		class FString                                              mBuildingTag;                                            // 0x0388(0x0010) Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EDroneStatus                                               mDroneStatus;                                            // 0x0398(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4D6G[0x3];                                   // 0x0399(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mEstimatedRoundTripTime;                                 // 0x039C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mEstimatedTransportRate;                                 // 0x03A0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7AH6[0x4];                                   // 0x03A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FDroneTripInformation>                       mLatestDroneTrips;                                       // 0x03A8(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		struct FFGDroneTripStatistics                              mDroneTripStatistics;                                    // 0x03B8(0x0054) Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XILZ[0x4];                                   // 0x040C(0x0004) MISSED OFFSET (PADDING)

	public:
		void PairStation(class AFGDroneStationInfo* otherStation);
		void OnRep_EstimatedTransportRate();
		void OnRep_EstimatedRoundTripTime();
		void OnRep_DroneTripStatistics();
		void OnRep_DroneStatus();
		void OnPairedStationUpdate();
		void OnPairedStationDestroyed(class AActor* DestroyedActor);
		void OnEstimatedTransportRateChanged__DelegateSignature(int32_t estimatedTransportRate);
		void OnEstimatedRoundTripTimeChanged__DelegateSignature(float estimatedRoundTripTime);
		void OnDroneTripStatisticsChanged__DelegateSignature(const struct FFGDroneTripStatistics& droneTripStatistics);
		void OnDroneStatusChanged__DelegateSignature(EDroneStatus droneStatus);
		int32_t GetTripCostInBatteries();
		struct FVector GetStationLocation();
		class AFGDroneStationInfo* GetPairedStation();
		float GetMedianTripOutgoingItemAmount();
		float GetMedianTripIncomingItemAmount();
		float GetMedianRoundTripTime();
		int32_t GetLatestTripOutgoingItemAmount();
		int32_t GetLatestTripIncomingItemAmount();
		float GetLatestRoundTripTime();
		float GetLatestOutgoingItemStackRate();
		float GetLatestIncomingItemStackRate();
		float GetLatestEstimatedTotalOutgoingItemStackRate();
		float GetLatestEstimatedTotalIncomingItemStackRate();
		float GetEstimatedTransportRate();
		float GetEstimatedTotalTransportRate();
		float GetEstimatedRoundTripTime();
		float GetEstimatedBatteryRequirementRate();
		EDroneStatus GetDroneStatus();
		TArray<class AFGDroneStationInfo*> GetConnectedStations();
		float GetAverageTripOutgoingItemAmount();
		float GetAverageTripIncomingItemAmount();
		float GetAverageTotalOutgoingItemStackRate();
		float GetAverageTotalOutgoingItemRate();
		float GetAverageTotalIncomingItemStackRate();
		float GetAverageTotalIncomingItemRate();
		float GetAverageRoundTripTime();
		float GetAverageOutgoingItemStackRate();
		float GetAverageOutgoingItemRate();
		float GetAverageIncomingItemStackRate();
		float GetAverageIncomingItemRate();
		void ClearLatestDroneTrips();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDroneSubsystem
	 * Size -> 0x0028 (FullSize[0x0320] - InheritedSize[0x02F8])
	 */
	class AFGDroneSubsystem : public AFGSubsystem
	{
	public:
		TArray<class AFGDroneStationInfo*>                         mStations;                                               // 0x02F8(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		class FString                                              mDroneStationDefaultNamePrefix;                          // 0x0308(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MNP6[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (PADDING)

	public:
		void Server_PairStations(class AFGDroneStationInfo* Origin, class AFGDroneStationInfo* Target);
		void SearchStations(class AFGDroneStationInfo* originStation, class AFGDroneStationInfo* hostStation, const class FString& Filter, bool connectionsOnly, bool excludeOrigin, bool pairedFirst, bool includeEmptyStation, TArray<struct FDroneStationData>* Result);
		class AFGDroneSubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGVehicle
	 * Size -> 0x01C8 (FullSize[0x05A8] - InheritedSize[0x03E0])
	 */
	class AFGVehicle : public AFGDriveablePawn
	{
	public:
		unsigned char                                              UnknownData_62OP[0x28];                                  // 0x03E0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                mDisplayName;                                            // 0x0408(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FText                                                mDescription;                                            // 0x0420(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UClass*                                              mHologramClass;                                          // 0x0438(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class USkeletalMeshComponent*                              mMesh;                                                   // 0x0440(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGHealthComponent*                                  mHealthComponent;                                        // 0x0448(0x0008) Edit, ExportObject, Net, ZeroConstructor, EditConst, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGDotReceiverComponent*                             mDOTReceiverComponent;                                   // 0x0450(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     mDisabledByWaterLocations;                               // 0x0458(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_75C2[0x2];                                   // 0x0468(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FNetConstructionID                                  mNetConstructionID;                                      // 0x046A(0x0006) Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FFactoryCustomizationData                           mCustomizationData;                                      // 0x0470(0x0078) Net, SaveGame, RepNotify, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mFactorySkinClass;                                       // 0x04E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mSwatchGroup;                                            // 0x04F0(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              mOptionalWorkBenchComponent;                             // 0x04F8(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       mOptionalWorkBenchBox;                                   // 0x0500(0x0008) BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mBuiltWithRecipe;                                        // 0x0508(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsSelfDriving;                                          // 0x0510(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L3KR[0x7];                                   // 0x0511(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AAIController*                                       mSelfDrivingController;                                  // 0x0518(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FVehiclePhysicsData>                         mStoredPhysicsData;                                      // 0x0520(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EN48[0x10];                                  // 0x0530(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       mConstructSound;                                         // 0x0540(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsDestructible : 1;                                     // 0x0548(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       UnknownData_WD4X : 1;                                    // 0x0548(0x0001) BIT_FIELD (PADDING)
		bool                                                       mIsSubmergedInWater : 1;                                 // 0x0548(0x0001) BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TN8H[0xF];                                   // 0x0549(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSubmergedAngularDamping;                                // 0x0558(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mSubmergedLinearDamping;                                 // 0x055C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mDamageTypesRedirectedToDriver;                          // 0x0560(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate
		float                                                      mJumpPadForceMultiplier;                                 // 0x0570(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1MAX[0x3];                                   // 0x0574(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsSimulated;                                            // 0x0577(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAddToSignificanceManager : 1;                           // 0x0578(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KAI2[0x3];                                   // 0x0579(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSignificanceRange;                                      // 0x057C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSimulationDistance;                                     // 0x0580(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HOY7[0x4];                                   // 0x0584(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x0588(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                mMapText;                                                // 0x0590(0x0018) Edit, Net, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		void UpdatePhysicsVolume(class APhysicsVolume* PhysicsVolume);
		void UpdateCamera(float DeltaTime);
		bool SelfDriverEnter(class AAIController* AI);
		void ReceiveOnVehicleStartup();
		void ReceiveOnVehicleShutDown();
		void ReceiveDied(class AActor* thisActor);
		void OnTakeDamage(class AActor* DamagedActor, float DamageAmount, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void OnSkinCustomizationApplied(class UClass* skin);
		void OnRep_IsSimulated();
		void OnRep_CustomColorData();
		void NotifyOnTakeDamage(class AActor* DamagedActor, float DamageAmount, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void KickAllPlayers();
		bool IsSubmergedInWater();
		bool IsSimulated();
		bool IsSelfDriving();
		bool IsDestructible();
		bool HasAnyPassengerSeatAvailable();
		float GetSimulationDistance();
		bool GetIsSignificant();
		class UFGHealthComponent* GetHealthComponent();
		void GetDismantleBlueprintReturns(TArray<struct FInventoryStack>* out_returns);
		class UClass* GetDefaultSwatchCustomizationOverride(class UObject* WorldContext);
		struct FLinearColor GetDefaultRepresentationColor();
		void Died(class AActor* thisActor);
		bool CanSelfDriverEnter(class AAIController* AI);
		void ApplySkinData(class UClass* newSkinDesc);
		void ApplyMeshPrimitiveData(const struct FFactoryCustomizationData& customizationData);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDroneVehicle
	 * Size -> 0x0108 (FullSize[0x06B0] - InheritedSize[0x05A8])
	 */
	class AFGDroneVehicle : public AFGVehicle
	{
	public:
		unsigned char                                              UnknownData_8CGD[0x8];                                   // 0x05A8(0x0008) Fix Super Size
		class UFGInventoryComponent*                               mStorageInventory;                                       // 0x05B0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInventoryComponent*                               mBatteryInventory;                                       // 0x05B8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mInventorySize;                                          // 0x05C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int8_t                                                     mBatteryStorageSize;                                     // 0x05C4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y1TM[0x3];                                   // 0x05C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDockingSequenceDuration;                                // 0x05C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTakeoffSequenceDuration;                                // 0x05CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTravelStartSequenceDuration;                            // 0x05D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mFlyingSpeed;                                            // 0x05D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTravelingSpeed;                                         // 0x05D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mFlyingStoppingDistance;                                 // 0x05DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTravelingStoppingDistance;                              // 0x05E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTurningStrength;                                        // 0x05E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6MQO[0x4];                                   // 0x05E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCurrentPowerLevel;                                      // 0x05EC(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mCurrentTripPowerCost;                                   // 0x05F0(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FDroneTripInformation                               mCurrentTripInformation;                                 // 0x05F4(0x0014) SaveGame, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       mHasBegunTrip;                                           // 0x0608(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsBraking;                                              // 0x0609(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_PMVN[0x6];                                   // 0x060A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mCurrentVelocity;                                        // 0x0610(0x0018) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mCurrentDestination;                                     // 0x0628(0x0018) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mDesiredFacingDirection;                                 // 0x0640(0x0018) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EDroneFlyingMode                                           mCurrentFlyingMode;                                      // 0x0658(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J9D3[0x3];                                   // 0x0659(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FDroneDockingStateInfo                              mCurrentDockingState;                                    // 0x065C(0x0008) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate
		bool                                                       mStopAtDestination;                                      // 0x0664(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4ILR[0x3];                                   // 0x0665(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableDroneStation*                            mDockedStation;                                          // 0x0668(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableDroneStation*                            mHomeStation;                                            // 0x0670(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableDroneStation*                            mCurrentDestinationStation;                              // 0x0678(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UFGDroneAction*>                              mActionsToExecute;                                       // 0x0680(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		class UFGDroneAction*                                      mCurrentAction;                                          // 0x0690(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4162[0x18];                                  // 0x0698(0x0018) MISSED OFFSET (PADDING)

	public:
		bool UpdateRepresentation();
		void TickVFX();
		void StartTravelStartSequence();
		void StartTakeoffSequence(class AFGBuildableDroneStation* Station);
		void StartDockingSequence(class AFGBuildableDroneStation* Station);
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		void OnRep_IsBraking();
		void OnRep_FlyingMode();
		void OnRep_DockingState();
		void OnRep_DockedStation();
		void OnFlyingModeChanged(EDroneFlyingMode NewMode);
		void OnDockingStateChanged(EDroneDockingState NewState, float TimeSinceChanged);
		void OnBrakingStateChanged(bool IsBraking);
		bool IsActorStatic();
		float GetTravelStartSequenceDuration();
		float GetTimeSinceDockingStateChanged();
		float GetTakeoffSequenceDuration();
		class UFGInventoryComponent* GetStorageInventory();
		float GetStoppingDistanceTraveling();
		float GetStoppingDistanceForFlyingMode(EDroneFlyingMode Mode);
		float GetStoppingDistanceFlying();
		float GetSpeedTraveling();
		float GetSpeedForFlyingMode(EDroneFlyingMode Mode);
		float GetSpeedFlying();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		bool GetIsBraking();
		float GetInventoryPotentialPowerLevel();
		class AFGBuildableDroneStation* GetHomeStation();
		float GetDockingSequenceDuration();
		class AFGBuildableDroneStation* GetDockedStation();
		struct FVector GetCurrentVelocity();
		float GetCurrentPowerLevel();
		EDroneFlyingMode GetCurrentFlyingMode();
		struct FDroneDockingStateInfo GetCurrentDockingState();
		class AFGBuildableDroneStation* GetCurrentDestinationStation();
		struct FVector GetCurrentDestination();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		void EndTravelStartSequence();
		void EndTakeoffSequence(class AFGBuildableDroneStation* Station);
		void EndDockingSequence(class AFGBuildableDroneStation* Station, bool ShouldTransferItems);
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDroneTransport
	 * Size -> 0x0000 (FullSize[0x06B0] - InheritedSize[0x06B0])
	 */
	class AFGDroneTransport : public AFGDroneVehicle
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDroneAction
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGDroneAction : public UObject
	{
	public:
		unsigned char                                              UnknownData_OSX8[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDroneAction_Timed
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGDroneAction_Timed : public UFGDroneAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDroneAction_TraversePath
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UFGDroneAction_TraversePath : public UFGDroneAction
	{
	public:
		TArray<struct FVector>                                     mPath;                                                   // 0x0030(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPublic
		EDroneFlyingMode                                           mFlyingMode;                                             // 0x0040(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mStopAtDestination;                                      // 0x0041(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WJ44[0x6];                                   // 0x0042(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDroneAction_RequestDocking
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UFGDroneAction_RequestDocking : public UFGDroneAction
	{
	public:
		class AFGBuildableDroneStation*                            mStation;                                                // 0x0030(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EDroneDockingRequestState                                  mCurrentState;                                           // 0x0038(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mShouldTransferItems;                                    // 0x0039(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F28K[0x2];                                   // 0x003A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mTotalQueueTime;                                         // 0x003C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_I1T9[0x4];                                   // 0x0040(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mQueuePosition;                                          // 0x0044(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDroneAction_DockingSequence
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UFGDroneAction_DockingSequence : public UFGDroneAction_Timed
	{
	public:
		class AFGBuildableDroneStation*                            mStation;                                                // 0x0030(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mShouldTransferItems;                                    // 0x0038(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_D5ZO[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDroneAction_TakeoffSequence
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UFGDroneAction_TakeoffSequence : public UFGDroneAction_Timed
	{
	public:
		class AFGBuildableDroneStation*                            mStation;                                                // 0x0030(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGBuildableDroneStation*                            mNewTravelDestination;                                   // 0x0038(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mHasNewPairedStation;                                    // 0x0040(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OHVY[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDroneAction_TravelStartSequence
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UFGDroneAction_TravelStartSequence : public UFGDroneAction_Timed
	{
	public:
		struct FVector                                             mDestination;                                            // 0x0030(0x0018) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDropPod
	 * Size -> 0x0038 (FullSize[0x0330] - InheritedSize[0x02F8])
	 */
	class AFGDropPod : public AActor
	{
	public:
		unsigned char                                              UnknownData_W5HF[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_A0QC[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mAmountOfInventorySlots;                                 // 0x0310(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AE4N[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPowerInfoComponent*                               mPowerInfo;                                              // 0x0318(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasPower;                                               // 0x0320(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasBeenOpened;                                          // 0x0321(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8E9V[0x6];                                   // 0x0322(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGInventoryComponent*                               mInventory;                                              // 0x0328(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void RollLoot();
		struct FDropPackage RollDropPackage(TArray<class UClass*> includedItems);
		bool RequiresPowerToOpen();
		void Open();
		void OnRepair(class AFGCharacterPlayer* InteractingCharacter);
		void OnRep_HasBeenOpened();
		void OnOpened();
		void OnInventoryItemRemoved(class UClass* ItemClass, int32_t numRemoved);
		bool HasBeenOpened();
		class UFGPowerConnectionComponent* GetPowerConnection();
		class UFGInventoryComponent* GetLootInventory();
		bool GetHasPower();
		void GenerateDropPodInventory(TArray<class UClass*> includedItems, int32_t numItemsCreated);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSettings
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGSettings : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDropPodSettings
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGDropPodSettings : public UFGSettings
	{
	public:
		TArray<struct FDropPackage>                                mDropTable;                                              // 0x0028(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected

	public:
		struct FDropPackage STATIC_GetRandomDropPackage(class UWorld* World);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDynamicOptionsRow
	 * Size -> 0x0108 (FullSize[0x0388] - InheritedSize[0x0280])
	 */
	class UFGDynamicOptionsRow : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             mOnOptionRowHovered;                                     // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnOptionRowUnhovered;                                   // 0x0290(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ERUI[0xA0];                                  // 0x02A0(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGUserSetting*                                      mUserSetting;                                            // 0x0340(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y5S8[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mOptionInterface[0x10];                                  // 0x0350(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		class UClass*                                              mWidgetOptionClass;                                      // 0x0360(0x0008) ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGOptionsValueController*                           mValueControllerWidget;                                  // 0x0368(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UFGDynamicOptionsRow*>                        mSubOptions;                                             // 0x0370(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_P34R[0x8];                                   // 0x0380(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdatePendingIconsVisibilty();
		void SetSubOptionsVisibility(bool newVisibilty);
		void OnSubOptionsUpdated();
		void OnOptionValueUpdated();
		void OnOptionRowInit();
		void OnOptionReverted();
		void OnOptionApplied();
		bool IsPendingRestart();
		bool IsPendingApply();
		class UFGOptionsValueController* GetValueControllerWidget();
		class UFGUserSetting* GetUserSetting();
		bool GetSubOptionsVisibility();
		TArray<class UFGDynamicOptionsRow*> GetSubOptions();
		struct FOptionRowData GetOptionRowData();
		EOptionCategory GetOptionCategory();
		void AddSubOption(class UFGDynamicOptionsRow* dynamicOptionsRow);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEditableText
	 * Size -> 0x0000 (FullSize[0x04E0] - InheritedSize[0x04E0])
	 */
	class UFGEditableText : public UEditableText
	{
	public:
		void SetKeyboardFocusAndSelectAllText();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEmote
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UFGEmote : public UObject
	{
	public:
		class FText                                                mEmoteName;                                              // 0x0028(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          mEmoteIcon;                                              // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGCharacterPlayer*                                  mPlayerCharacter;                                        // 0x0048(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_OAGX[0x8];                                   // 0x0050(0x0008) MISSED OFFSET (PADDING)

	public:
		void PlayEmoteSFX(class UAkAudioEvent* Event);
		float PlayEmoteMontage_3P(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);
		float PlayEmoteMontage_1P(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);
		void PlayEmoteCameraAnim(class UCameraAnimationSequence* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, ECameraShakePlaySpace Space, const struct FRotator& CustomPlaySpace);
		void OnPlayEmoteRemote();
		void OnPlayEmoteLocally();
		int32_t GetRandomIntegerForEmote();
		class AFGCharacterPlayer* GetPlayerCharacter();
		class FText STATIC_GetEmoteName(class UClass* InClass);
		class UTexture2D* STATIC_GetEmoteIcon(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEmoteShortcut
	 * Size -> 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
	 */
	class UFGEmoteShortcut : public UFGHotbarShortcut
	{
	public:
		class UClass*                                              mEmoteToActivate;                                        // 0x0058(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetEmote(class UClass* emote, bool silent);
		void OnRep_Emote();
		class UClass* GetEmote();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEnemy
	 * Size -> 0x0000 (FullSize[0x0A80] - InheritedSize[0x0A80])
	 */
	class AFGEnemy : public AFGCreature
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEnhancedInputComponent
	 * Size -> 0x0000 (FullSize[0x0160] - InheritedSize[0x0160])
	 */
	class UFGEnhancedInputComponent : public UEnhancedInputComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEnvironmentSettings
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGEnvironmentSettings : public UFGSettings
	{
	public:
		class UMaterialParameterCollection*                        mWorldBoundsParameters;                                  // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialParameterCollection*                        mWeatherParameters;                                      // 0x0030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEnvQueryGenerator_ForAngle
	 * Size -> 0x00E8 (FullSize[0x0178] - InheritedSize[0x0090])
	 */
	class UFGEnvQueryGenerator_ForAngle : public UEnvQueryGenerator_ProjectedPoints
	{
	public:
		struct FAIDataProviderFloatValue                           mDistance;                                               // 0x0090(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FAIDataProviderFloatValue                           mAngle;                                                  // 0x00C8(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FAIDataProviderFloatValue                           mStepSize;                                               // 0x0100(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FAIDataProviderBoolValue                            mGenerateMirroredPoints;                                 // 0x0138(0x0038) Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UClass*                                              mCenterActor;                                            // 0x0170(0x0008) Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEnvQueryTest_CreatureFood
	 * Size -> 0x0000 (FullSize[0x01F8] - InheritedSize[0x01F8])
	 */
	class UFGEnvQueryTest_CreatureFood : public UEnvQueryTest
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEnvQueryTest_ItemDescription
	 * Size -> 0x0008 (FullSize[0x0200] - InheritedSize[0x01F8])
	 */
	class UFGEnvQueryTest_ItemDescription : public UEnvQueryTest
	{
	public:
		class UClass*                                              mItemDescriptorClass;                                    // 0x01F8(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEquipmentBoomBox
	 * Size -> 0x0010 (FullSize[0x0490] - InheritedSize[0x0480])
	 */
	class AFGEquipmentBoomBox : public AFGEquipment
	{
	public:
		class AFGBoomBoxPlayer*                                    mBoomBoxPlayer;                                          // 0x0480(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HAGJ[0x8];                                   // 0x0488(0x0008) MISSED OFFSET (PADDING)

	public:
		void PlayStingerEffects();
		void PlayEquipEffects();
		void OnRep_BoomBoxPlayer(class AFGBoomBoxPlayer* oldPlayer);
		void OnMenuOpen();
		void OnBeginTurbobassSequence();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEquipmentChild
	 * Size -> 0x00B8 (FullSize[0x03B0] - InheritedSize[0x02F8])
	 */
	class AFGEquipmentChild : public AActor
	{
	public:
		class AFGEquipment*                                        mParentEquipment;                                        // 0x02F8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FName, struct FFirstPersonMaterialArray>        mComponentNameToFirstPersonMaterials;                    // 0x0300(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FName                                                mAttachSocket;                                           // 0x0350(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class FName, struct FFirstPersonMaterialArray>        mSwappedOutThirdPersonMaterials;                         // 0x0358(0x0050) Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GE7O[0x8];                                   // 0x03A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnUnEquip();
		void OnEquip(class AFGCharacterPlayer* Character);
		void OnCameraModeChanged(ECameraMode newCameraMode);
		class AFGCharacterPlayer* GetInstigatorCharacter();
		ECameraMode GetInstigatorCameraMode();
		struct FTransform GetAttachSocketTransform();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEquipmentDecoration
	 * Size -> 0x0010 (FullSize[0x0490] - InheritedSize[0x0480])
	 */
	class AFGEquipmentDecoration : public AFGEquipment
	{
	public:
		float                                                      mPlaceDistanceMax;                                       // 0x0480(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1ZEW[0xC];                                   // 0x0484(0x000C) MISSED OFFSET (PADDING)

	public:
		void SpawnDecoration();
		void Server_PrimaryFire();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEquipmentStunSpear
	 * Size -> 0x0040 (FullSize[0x04C0] - InheritedSize[0x0480])
	 */
	class AFGEquipmentStunSpear : public AFGEquipment
	{
	public:
		class USphereComponent*                                    mCollisionComp;                                          // 0x0480(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UFGDamageType*>                               mDamageTypes;                                            // 0x0488(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class UClass*                                              mAttackNoise;                                            // 0x0498(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XYCP[0xC];                                   // 0x04A0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSecondSwingMaxTime;                                     // 0x04AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KKJ5[0x4];                                   // 0x04B0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSecondSwingCooldDownTime;                               // 0x04B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAttackDistance;                                         // 0x04B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAttackSweepRadius;                                      // 0x04BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void Server_ProcessPlayerSwing(bool secondSwing);
		void Server_ProcessAttack(TArray<struct FHitResult> hitResults);
		void PlayStunEffects(bool secondSwing);
		void PlayHitEffects(TArray<struct FHitResult> hitResults);
		void Multicast_PlaySwingEffects(bool secondSwing);
		void Multicast_PlayHitEffects(TArray<struct FHitResult> hitResults);
		void Local_SwingWeapon();
		void Local_Attack();
		void DoAttack();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEquipmentZipline
	 * Size -> 0x0040 (FullSize[0x04C0] - InheritedSize[0x0480])
	 */
	class AFGEquipmentZipline : public AFGEquipment
	{
	public:
		unsigned char                                              UnknownData_FQG9[0x4];                                   // 0x0480(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mZiplineJumpLaunchVelocity;                              // 0x0484(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaxZiplineAngle;                                        // 0x0488(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTraceDistance;                                          // 0x048C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTraceStartOffset;                                       // 0x0490(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTraceRadius;                                            // 0x0494(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mVisualizeTraceDistance;                                 // 0x0498(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LS79[0x7];                                   // 0x0499(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mActiveNoise;                                            // 0x04A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mActiveNoiseFrequency;                                   // 0x04A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9VW3[0xC];                                   // 0x04AC(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mZiplineReattachCooldown;                                // 0x04B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JQT0[0x4];                                   // 0x04BC(0x0004) MISSED OFFSET (PADDING)

	public:
		void Server_JumpExit();
		void Server_DoDrop();
		void OnZiplineSprintStatusChanged(bool sprint);
		void OnWantToGrabChanged(bool newWantToGrab);
		void MakeActiveNoise();
		void JumpExit();
		bool GetWantToGrab();
		void DoDrop();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGErrorMessage
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGErrorMessage : public UObject
	{
	public:
		class FText                                                mErrorMessage;                                           // 0x0028(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		EErrorResponse                                             mErrorResponse;                                          // 0x0040(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6DQ3[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (PADDING)

	public:
		EErrorResponse GetErrorResponse();
		class FText GetErrorMessage();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEventSubsystem
	 * Size -> 0x01B8 (FullSize[0x04B0] - InheritedSize[0x02F8])
	 */
	class AFGEventSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_ULRU[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		TArray<EEvents>                                            mCurrentEvents;                                          // 0x0300(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPublic
		TMap<EEvents, struct FFGEventData>                         mEvents;                                                 // 0x0310(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TMap<EEvents, class UClass*>                               mBuildableCalendarClass;                                 // 0x0360(0x0050) Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate
		TMap<EEvents, class UClass*>                               mHubMiniGameClass;                                       // 0x03B0(0x0050) Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate
		bool                                                       bIsReplicated;                                           // 0x0400(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2YY8[0x7];                                   // 0x0401(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EEvents, struct FCalendarData>                        mStoredCalendarData;                                     // 0x0408(0x0050) SaveGame, NativeAccessSpecifierPrivate
		TMap<class UClass*, struct FCalendarData>                  mCalendarData;                                           // 0x0458(0x0050) SaveGame, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_J7NI[0x8];                                   // 0x04A8(0x0008) MISSED OFFSET (PADDING)

	public:
		class AFGEventSubsystem* STATIC_GetEventSubsystem(class UObject* WorldContext);
		TArray<EEvents> GetCurrentEvents();
		bool CanOpenCalendarSlot(EEvents Event, int32_t dayNumber);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEventDeveloperSettings
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UFGEventDeveloperSettings : public UDeveloperSettings
	{
	public:
		bool                                                       mDisableEvents;                                          // 0x0038(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EEvents                                                    mOverwrittenEvent;                                       // 0x0039(0x0001) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Z03J[0x6];                                   // 0x003A(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGExplosiveDestroyableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGExplosiveDestroyableInterface : public UInterface
	{
	public:
		void SetDestructionInfo(class AActor* dmgCauser, const struct FVector& Location);
		bool NotifyExploded();
		class UParticleSystem* GetDestroyEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGExtractableResourceInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGExtractableResourceInterface : public UInterface
	{
	public:
		void SetIsOccupied(bool occupied);
		bool IsOccupied();
		bool HasAnyResources();
		class UClass* GetResourceClass();
		struct FVector GetPlacementLocation(const struct FVector& HitLocation);
		float GetExtractionSpeedMultiplier();
		int32_t ExtractResource(int32_t Amount);
		bool CanPlaceResourceExtractor();
		bool CanBecomeOccupied();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBlueprintDescriptor
	 * Size -> 0x0040 (FullSize[0x01E0] - InheritedSize[0x01A0])
	 */
	class UFGBlueprintDescriptor : public UFGBuildDescriptor
	{
	public:
		uint32_t                                                   Mid;                                                     // 0x01A0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZVG0[0x4];                                   // 0x01A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FItemAmount>                                 mCost;                                                   // 0x01A8(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		struct FLinearColor                                        mColor;                                                  // 0x01B8(0x0010) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mIconID;                                                 // 0x01C8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FIntVector                                          mDimensions;                                             // 0x01CC(0x000C) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mRecipeRequirementsAreMet;                               // 0x01D8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NTS6[0x7];                                   // 0x01D9(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateData(const struct FBlueprintRecord& BlueprintRecord);
		void SetPriorityOnInstance(float Priority);
		void InitializeHeaderInfo(const struct FBlueprintHeader& Header);
		void InitializeData(const struct FBlueprintRecord& BlueprintRecord);
		bool GetRecipeRequirementsAreMet();
		int32_t GetIconID();
		struct FIntVector GetDimensionsOnInstance();
		struct FBlueprintRecord GetDescriptorAsRecord();
		struct FLinearColor GetColorOnInstance();
		void GetBlueprintCost(TArray<struct FItemAmount>* out_cost);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBlueprintSubCategory
	 * Size -> 0x0020 (FullSize[0x0140] - InheritedSize[0x0120])
	 */
	class UFGBlueprintSubCategory : public UFGCategory
	{
	public:
		class UFGBlueprintCategory*                                mParentCategory;                                         // 0x0120(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UFGBlueprintDescriptor*>                      mBlueprintDescriptors;                                   // 0x0128(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              mIsUndefined;                                            // 0x0138(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KA9N[0x7];                                   // 0x0139(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetPriorityOnInstance(float Priority);
		void SetParentCategory(class UFGBlueprintCategory* parentCategory);
		void SetDisplayNameOnInstance(const class FText& DisplayName);
		void SetBlueprintDescriptors(TArray<class UFGBlueprintDescriptor*> descriptors);
		bool IsUndefined();
		void InitializeData(const class FText& CategoryName, float MenuPriority, unsigned char IsUndefined);
		class UFGBlueprintCategory* GetParentCategory();
		TArray<class UFGBlueprintDescriptor*> GetBlueprintDescriptors();
		void AddBlueprintDescriptor(class UFGBlueprintDescriptor* Desc);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBlueprintCategory
	 * Size -> 0x0020 (FullSize[0x0140] - InheritedSize[0x0120])
	 */
	class UFGBlueprintCategory : public UFGCategory
	{
	public:
		uint32_t                                                   Mid;                                                     // 0x0120(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mIconID;                                                 // 0x0124(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              mIsUndefined;                                            // 0x0128(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_SDB3[0x7];                                   // 0x0129(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGBlueprintSubCategory*>                     mSubCategories;                                          // 0x0130(0x0010) ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void SetSubCategories(TArray<class UFGBlueprintSubCategory*> SubCategories);
		void SetPriorityOnInstance(float Priority);
		void SetIconIdOnInstance(int32_t IconID);
		void SetDisplayNameOnInstance(const class FText& DisplayName);
		bool IsUndefined();
		void InitializeData(const class FText& CategoryName, float MenuPriority, int32_t IconID, unsigned char IsUndefined);
		void GetSubCategories(TArray<class UFGBlueprintSubCategory*>* out_subCategories);
		int32_t GetIconIdFromInstance();
		void AddSubCategory(class UFGBlueprintSubCategory* SubCategory);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryClipboardInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFactoryClipboardInterface : public UInterface
	{
	public:
		bool PasteSettings(class UFGFactoryClipboardSettings* factoryClipboard);
		class UClass* GetClipboardSettingsClass();
		class UClass* GetClipboardMappingClass();
		class UFGFactoryClipboardSettings* CopySettings();
		bool CanUseFactoryClipboard();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryCustomizationDescriptor
	 * Size -> 0x0048 (FullSize[0x01E8] - InheritedSize[0x01A0])
	 */
	class UFGFactoryCustomizationDescriptor : public UFGItemDescriptor
	{
	public:
		TArray<class UClass*>                                      mValidBuildables;                                        // 0x01A0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
		int32_t                                                    ID;                                                      // 0x01B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_76ER[0x4];                                   // 0x01B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mIcon[0x30];                                             // 0x01B8(0x0030) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		class UTexture2D* GetIcon();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryCustomizationDescriptor_Swatch
	 * Size -> 0x0000 (FullSize[0x01E8] - InheritedSize[0x01E8])
	 */
	class UFGFactoryCustomizationDescriptor_Swatch : public UFGFactoryCustomizationDescriptor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryCustomizationDescriptor_Pattern
	 * Size -> 0x0010 (FullSize[0x01F8] - InheritedSize[0x01E8])
	 */
	class UFGFactoryCustomizationDescriptor_Pattern : public UFGFactoryCustomizationDescriptor
	{
	public:
		struct FItemAmount                                         mRefundCostOnApplication;                                // 0x01E8(0x0010) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryCustomizationDescriptor_Material
	 * Size -> 0x0058 (FullSize[0x0240] - InheritedSize[0x01E8])
	 */
	class UFGFactoryCustomizationDescriptor_Material : public UFGFactoryCustomizationDescriptor
	{
	public:
		TMap<class UClass*, class UClass*>                         mBuildableMap;                                           // 0x01E8(0x0050) Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       IsCategoryDefault;                                       // 0x0238(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KVUG[0x7];                                   // 0x0239(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryCustomizationDescriptor_Skin
	 * Size -> 0x0000 (FullSize[0x01E8] - InheritedSize[0x01E8])
	 */
	class UFGFactoryCustomizationDescriptor_Skin : public UFGFactoryCustomizationDescriptor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactorySkinActorData
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UFGFactorySkinActorData : public UObject
	{
	public:
		TMap<class UClass*, struct FFactorySkinComponentGroup>     mSkinToComponentGroupData;                               // 0x0028(0x0050) Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		void STATIC_GetSkinComponentDataForSkinActorData(class UClass* skinClass, TMap<class UClass*, struct FFactorySkinComponentGroup>* out_componentGroupData);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryCustomizationCollection
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFGFactoryCustomizationCollection : public UObject
	{
	public:
		class UClass*                                              mCustomizationClass;                                     // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mCustomizations;                                         // 0x0030(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		class UClass* GetDefaultCustomization();
		TArray<class UClass*> GetCustomizations();
		class UClass* GetCustomizationClass();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryConnectionComponent
	 * Size -> 0x0038 (FullSize[0x02E0] - InheritedSize[0x02A8])
	 */
	class UFGFactoryConnectionComponent : public UFGConnectionComponent
	{
	public:
		unsigned char                                              UnknownData_T6HK[0x4];                                   // 0x02A8(0x0004) Fix Super Size
		float                                                      mConnectorClearance;                                     // 0x02AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGFactoryConnectionComponent*                       mConnectedComponent;                                     // 0x02B0(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasConnectedComponent;                                  // 0x02B8(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6YXY[0x7];                                   // 0x02B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGInventoryComponent*                               mConnectionInventory;                                    // 0x02C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mInventoryAccessIndex;                                   // 0x02C8(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GOMZ[0x4];                                   // 0x02CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildable*                                        mOuterBuildable;                                         // 0x02D0(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mForwardPeekAndGrabToBuildable;                          // 0x02D8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J3LE[0x7];                                   // 0x02D9(0x0007) MISSED OFFSET (PADDING)

	public:
		bool IsConnected();
		class UFGInventoryComponent* GetInventory();
		EFactoryConnectionDirection GetDirection();
		float GetConnectorClearance();
		EFactoryConnectionConnector GetConnector();
		bool Factory_PeekOutput(TArray<struct FInventoryItem>* out_items, class UClass* Type);
		bool Factory_Internal_PeekOutputInventory(TArray<struct FInventoryItem>* out_items, class UClass* Type);
		bool Factory_Internal_GrabOutputInventory(struct FInventoryItem* out_item, class UClass* Type);
		bool Factory_GrabOutput(struct FInventoryItem* out_item, float* out_OffsetBeyond, class UClass* Type);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryCustomizationShortcut
	 * Size -> 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
	 */
	class UFGFactoryCustomizationShortcut : public UFGHotbarShortcut
	{
	public:
		class UClass*                                              mCustomizationRecipeToActivate;                          // 0x0058(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetCustomizationRecipe(class UClass* Customization, bool silent);
		void OnRep_Customization();
		void OnRecipeUnlocked(class UClass* recipeClass);
		class UClass* GetCustomizationRecipe();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryLegInstanceManager
	 * Size -> 0x0020 (FullSize[0x02C0] - InheritedSize[0x02A0])
	 */
	class UFGFactoryLegInstanceManager : public USceneComponent
	{
	public:
		class UHierarchicalInstancedStaticMeshComponent*           mInstanceComponent;                                      // 0x02A0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_83BW[0x18];                                  // 0x02A8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryLegInstanceMeshProxy
	 * Size -> 0x0020 (FullSize[0x0640] - InheritedSize[0x0620])
	 */
	class UFGFactoryLegInstanceMeshProxy : public UStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_U3OZ[0x14];                                  // 0x0620(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EDistanceCullCategory                                      mOptimizationCategory;                                   // 0x0634(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Y1XQ[0xB];                                   // 0x0635(0x000B) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryLegsComponent
	 * Size -> 0x0060 (FullSize[0x0300] - InheritedSize[0x02A0])
	 */
	class UFGFactoryLegsComponent : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_9O64[0x8];                                   // 0x02A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        mLegSocketNames;                                         // 0x02A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mLegMeshOverride;                                        // 0x02B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mFootMeshOverride;                                       // 0x02C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxLegLengthOverride;                                   // 0x02C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMinimumLegLength;                                       // 0x02CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStaticMeshComponent*>                        mLegMeshComponents;                                      // 0x02D0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UStaticMeshComponent*>                        mFootMeshComponents;                                     // 0x02E0(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<struct FFeetOffset>                                 mCachedFeetOffset;                                       // 0x02F0(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate

	public:
		TArray<class UStaticMeshComponent*> GetLegMeshComponents();
		TArray<class UStaticMeshComponent*> GetFootMeshComponents();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactorySettings
	 * Size -> 0x01D8 (FullSize[0x0200] - InheritedSize[0x0028])
	 */
	class UFGFactorySettings : public UFGSettings
	{
	public:
		class UMaterialInstance*                                   mDefaultValidPlacementMaterial;                          // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   mDefaultValidPlacementMaterialSimplified;                // 0x0030(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   mDefaultInvalidPlacementMaterial;                        // 0x0038(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   mDefaultInputConnectionMaterial;                         // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   mDefaultOutputConnectionMaterial;                        // 0x0048(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   mDefaultNeutralConnectionMaterial;                       // 0x0050(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   mDefaultPowerConnectionMaterial;                         // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        mDefaultFactoryColor_Primary;                            // 0x0060(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        mDefaultFactoryColor_Secondary;                          // 0x0070(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mDefaultAttachmentPointConnectionMesh;                   // 0x0080(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mDefaultConveyorConnectionFrameMesh;                     // 0x0088(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mDefaultConveyorConnectionArrowMesh;                     // 0x0090(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mDefaultPipeConnectionFrameMesh;                         // 0x0098(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mDefaultPipeConnectionArrowMesh;                         // 0x00A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mDefaultPowerConnectionMesh;                             // 0x00A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mBlueprintDirectionIndicatorMesh;                        // 0x00B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   mBlueprintDirectionIndicatorMaterial;                    // 0x00B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mBlueprintDirectionMeshScale;                            // 0x00C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mBlueprintDirectionMeshForwardOffset;                    // 0x00C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mBlueprintDirectionMeshHeightOffset;                     // 0x00C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mBlueprintDirectionMeshRotation;                         // 0x00CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mBlueprintDirectionMeshPlaceOnGround;                    // 0x00D0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5F2N[0x7];                                   // 0x00D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstance*                                   mBlueprintProxyMaterial;                                 // 0x00D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mClearanceMesh;                                          // 0x00E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   mClearanceMaterial;                                      // 0x00E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       mHologramLoopSound;                                      // 0x00F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UAkAudioEvent*                                       mHologramSnapSound;                                      // 0x00F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mBuildGuideMesh;                                         // 0x0100(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mBuildGuideWidth;                                        // 0x0108(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1IDD[0x4];                                   // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstance*                                   mBuildGuideMaterial;                                     // 0x0110(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mInventoryDropCrate;                                     // 0x0118(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mPowerShardClass;                                        // 0x0120(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UAkAudioEvent*>                               mConstructionSounds;                                     // 0x0128(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UAkAudioEvent*>                               mDismantleSounds;                                        // 0x0138(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UClass*                                              mBuildEffect;                                            // 0x0148(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mDismantleEffect;                                        // 0x0150(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  mDismantlePendingMaterial;                               // 0x0158(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mBuildGunClass;                                          // 0x0160(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mResourceScannerClass;                                   // 0x0168(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mResourceMinerClass;                                     // 0x0170(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mBoomBoxPlayerClass;                                     // 0x0178(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mBoomBoxEquipmentDesc;                                   // 0x0180(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mLegMesh;                                                // 0x0188(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mFootMesh;                                               // 0x0190(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMaxFeetLength;                                          // 0x0198(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_C897[0x4];                                   // 0x019C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mRecipeShortcutClass;                                    // 0x01A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mCustomizationShortcutClass;                             // 0x01A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mEmoteShortcutClass;                                     // 0x01B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mBlueprintShortcutClass;                                 // 0x01B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class FName>                                        mShortcutMap;                                            // 0x01C0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    mNumHotbars;                                             // 0x01D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mNumSlotsPerHotbar;                                      // 0x01D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mFluidToInventoryStackRate;                              // 0x01D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mInventoryStackToFluidRate;                              // 0x01DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAddedPipeProductionPressure;                            // 0x01E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YWGC[0x4];                                   // 0x01E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FViscosityToPuddlePair>                      mViscosityToPuddlePairs;                                 // 0x01E8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UMaterialParameterCollection*                        mPaniniProjectionCollection;                             // 0x01F8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class UAkAudioEvent* STATIC_GetRandomDismantleSound();
		class UAkAudioEvent* STATIC_GetRandomConstructionSound();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFactoryTickSettings
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UFGFactoryTickSettings : public UDeveloperSettings
	{
	public:
		float                                                      mMaxFactoryDeltaTime;                                    // 0x0038(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mMaxSubsteps;                                            // 0x003C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFAnimInstanceFactory
	 * Size -> 0x0958 (FullSize[0x0CA0] - InheritedSize[0x0348])
	 */
	class UFGFAnimInstanceFactory : public UAnimInstance
	{
	public:
		unsigned char                                              UnknownData_VTQB[0x8];                                   // 0x0348(0x0008) Fix Super Size
		struct FAnimInstanceProxyFactory                           mProxy;                                                  // 0x0350(0x08D0) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		bool                                                       mUseRampUp;                                              // 0x0C20(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A2UR[0x3];                                   // 0x0C21(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mRampUpTime;                                             // 0x0C24(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mRampDownTime;                                           // 0x0C28(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mDefaultCycleTime;                                       // 0x0C2C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                mSoundSpeedRTPC;                                         // 0x0C30(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mSoundSpeedRTPCInterval;                                 // 0x0C38(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mSoundSpeedAccumulator;                                  // 0x0C3C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsGenerator;                                            // 0x0C40(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NGEA[0x3];                                   // 0x0C41(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSoundSpeedRTPCMinValue;                                 // 0x0C44(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mSoundSpeedRTPCMaxValue;                                 // 0x0C48(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mRTPCValue;                                              // 0x0C4C(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6LSP[0x50];                                  // 0x0C50(0x0050) MISSED OFFSET (PADDING)

	public:
		void UpdateSoundRTPC(float DeltaSeconds, bool forceUpdate);
		void STATIC_EnableAnimationState(class USkeletalMeshComponent* MeshComponent, bool NewState);
		void AudioEventCallback(EAkCallbackType cbType, class UAkCallbackInfo* cbInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWallHologram
	 * Size -> 0x0060 (FullSize[0x0760] - InheritedSize[0x0700])
	 */
	class AFGWallHologram : public AFGFactoryBuildingHologram
	{
	public:
		unsigned char                                              UnknownData_QY6Z[0x38];                                  // 0x0700(0x0038) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableWall*                                    mUpgradeTarget;                                          // 0x0738(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mOnlyAllowLineZoop;                                      // 0x0740(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2W1E[0x7];                                   // 0x0741(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mClearanceShrink;                                        // 0x0748(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFenceHologram
	 * Size -> 0x0010 (FullSize[0x0770] - InheritedSize[0x0760])
	 */
	class AFGFenceHologram : public AFGWallHologram
	{
	public:
		int32_t                                                    mRotationStep;                                           // 0x0760(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_1V9Y[0xC];                                   // 0x0764(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFloodlightHologram
	 * Size -> 0x0018 (FullSize[0x06A0] - InheritedSize[0x0688])
	 */
	class AFGFloodlightHologram : public AFGBuildableHologram
	{
	public:
		unsigned char                                              UnknownData_E7W8[0x4];                                   // 0x0688(0x0004) Fix Super Size
		int32_t                                                    mFixtureAngle;                                           // 0x068C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USceneComponent*                                     mLightFixtureComponent;                                  // 0x0690(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JRLT[0x8];                                   // 0x0698(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_FixtureAngle();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFluffActor
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGFluffActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_UPFK[0x8];                                   // 0x02F8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFluidIntegrantInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFluidIntegrantInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFlyingBabyCrab
	 * Size -> 0x00F8 (FullSize[0x03F0] - InheritedSize[0x02F8])
	 */
	class AFGFlyingBabyCrab : public AActor
	{
	public:
		struct FFloatInterval                                      mMovementSpeedRange;                                     // 0x02F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mMovementSpeedRangeCombat;                               // 0x0300(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mAggroRadius;                                            // 0x0308(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mAggroTickRate;                                          // 0x030C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSwarmViewDistance;                                      // 0x0310(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7XXE[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGDamageType*>                               mDamageTypes;                                            // 0x0318(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		float                                                      mCharacterLaunchForce;                                   // 0x0328(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCombatTurnDistance;                                     // 0x032C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mCombatSteeringWeight;                                   // 0x0330(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mHomeRadius;                                             // 0x0338(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mHomeSteeringWeight;                                     // 0x033C(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mIdleMovementWeight;                                     // 0x0344(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFloorAvoidanceHeight;                                   // 0x0348(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFloorAvoidanceWeight;                                   // 0x034C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mErraticMovementDirectionFrequency;                      // 0x0350(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mErraticMovementWeightFrequency;                         // 0x0354(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mErraticMovementWeight;                                  // 0x0358(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mAvoidanceRadius;                                        // 0x0360(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mAvoidanceWeight;                                        // 0x0368(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCohesionWeight;                                         // 0x036C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCohesionWeightCombat;                                   // 0x0370(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCohesionDirectionWeight;                                // 0x0374(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AFGFlyingBabyCrab*>                           mNearbyBabyCrabs;                                        // 0x0378(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FVector                                             mHomeLocation;                                           // 0x0388(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UProjectileMovementComponent*                        mProjectileMovementComponent;                            // 0x03A0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGCrabHatcher*                                      mParentCrabHatcher;                                      // 0x03A8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AActor*                                              mCurrentTarget;                                          // 0x03B0(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AE2Y[0x18];                                  // 0x03B8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mMovementSpeed;                                          // 0x03D0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMovementSpeedCombat;                                    // 0x03D4(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DQ3V[0x18];                                  // 0x03D8(0x0018) MISSED OFFSET (PADDING)

	public:
		void UpdateAggro();
		void SetHomeLocation(const struct FVector& Location);
		void SetCurrentTarget(class AActor* Target);
		void RegisterHostilePlayer(class AFGCharacterPlayer* Player);
		void OnRep_MovementSpeed();
		void OnRep_CurrentTarget();
		void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		void OnExplode();
		void OnDamageReceived(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void OnCurrentTargetChanged(class AActor* newTarget);
		void OnClientSubsystemsValid();
		bool IsValidTarget(class AActor* Target);
		float GetSwarmViewDistance();
		class UProjectileMovementComponent* GetProjectileMovementComp();
		struct FVector GetHomeLocation();
		class AActor* GetCurrentTarget();
		float GetAggroRadius();
		void Explode();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageIdentifier
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFoliageIdentifier : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageIdentifier_RemovableByBuildings
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFoliageIdentifier_RemovableByBuildings : public UFGFoliageIdentifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageIdentifier_Pickupable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFoliageIdentifier_Pickupable : public UFGFoliageIdentifier_RemovableByBuildings
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageIdentifier_Chainsawable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFoliageIdentifier_Chainsawable : public UFGFoliageIdentifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageIdentifier_ChainsawableXmasTree
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFoliageIdentifier_ChainsawableXmasTree : public UFGFoliageIdentifier_Chainsawable
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageIdentifier_VehicleDestroyable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFoliageIdentifier_VehicleDestroyable : public UFGFoliageIdentifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageIdentifier_ExplosiveDestroyable
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFoliageIdentifier_ExplosiveDestroyable : public UFGFoliageIdentifier
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageInstancedSMC
	 * Size -> 0x0010 (FullSize[0x0940] - InheritedSize[0x0930])
	 */
	class UFGFoliageInstancedSMC : public UFoliageInstancedStaticMeshComponent
	{
	public:
		unsigned char                                              UnknownData_8V4R[0x10];                                  // 0x0930(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFoliageLibrary : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliagePickup
	 * Size -> 0x0038 (FullSize[0x0330] - InheritedSize[0x02F8])
	 */
	class AFGFoliagePickup : public AActor
	{
	public:
		unsigned char                                              UnknownData_B8EG[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		float                                                      mPickupRepeatInterval;                                   // 0x0300(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NHOI[0x4];                                   // 0x0304(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mPickupMesh;                                             // 0x0308(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WR25[0x20];                                  // 0x0310(0x0020) MISSED OFFSET (PADDING)

	public:
		void Server_PickUpFoliage(class AFGCharacterPlayer* byCharacter, const struct FFoliageInstanceStableId& stableId, const struct FVector& instanceLocation);
		void PlayPickupEffect(class UFGFoliageResourceUserData* foliageUserData, const struct FVector& atLocation);
		void BroadcastPickup(class UStaticMesh* fromStaticMesh, const struct FVector& atLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageRemoval
	 * Size -> 0x00B8 (FullSize[0x03B0] - InheritedSize[0x02F8])
	 */
	class AFGFoliageRemoval : public AFGStaticReplicatedActor
	{
	public:
		unsigned char                                              UnknownData_TISQ[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		struct FRemovedInstanceArray                               mRemovedInstances;                                       // 0x0300(0x0010) SaveGame, Protected, NativeAccessSpecifierProtected
		unsigned char                                              mRemovalLocations[0x50];                                 // 0x0310(0x0050) UNKNOWN PROPERTY: SetProperty
		class FName                                                mLevelName;                                              // 0x0360(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mFoliageTypeName;                                        // 0x0368(0x0008) Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FBox                                                mLevelBounds;                                            // 0x0370(0x0038) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HC2W[0x8];                                   // 0x03A8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageRemovalSubsystem
	 * Size -> 0x02C8 (FullSize[0x05C0] - InheritedSize[0x02F8])
	 */
	class AFGFoliageRemovalSubsystem : public AInfo
	{
	public:
		unsigned char                                              UnknownData_SSSQ[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_TOLG[0x120];                                 // 0x0300(0x0120) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<struct FIntVector, class AInstancedFoliageActor*>     mCellToLoadedIFAMap;                                     // 0x0420(0x0050) NativeAccessSpecifierPrivate
		TMap<class UHierarchicalInstancedStaticMeshComponent*, class UFoliageType*> mFoliageComponentTypeMapping;                            // 0x0470(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate
		uint32_t                                                   mFoliageGridSize;                                        // 0x04C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		uint32_t                                                   mSavedFoliageGridSize;                                   // 0x04C4(0x0004) Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<struct FIntVector, struct FFoliageRemovalSaveDataPerCell> mSaveData;                                               // 0x04C8(0x0050) SaveGame, NativeAccessSpecifierPrivate
		TMap<struct FIntVector, struct FFoliageRemovalUnresolvedSaveDataPerCell> mUnresolvedSaveData;                                     // 0x0518(0x0050) SaveGame, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FKM3[0x58];                                  // 0x0568(0x0058) MISSED OFFSET (PADDING)

	public:
		void OnPreLevelRemovedFromWorld(class ULevel* inLevel, class UWorld* InWorld);
		void OnLevelAddedToWorld(class ULevel* inLevel, class UWorld* InWorld);
		bool GetFoliageWithinRadius(const struct FVector& Location, float Radius, TArray<int32_t>* out_instanceArray, TArray<struct FVector>* out_locationArray, TArray<class UHierarchicalInstancedStaticMeshComponent*>* out_componentArray, bool includeLocations);
		class AFGFoliageRemovalSubsystem* STATIC_GetFoliageRemovalSubsystem(class UObject* WorldContext);
		int32_t GetFoliageCountWithinRadius(const struct FVector& Location, float Radius);
		bool GetFoliageAroundLocationOfGivenTypes(const struct FVector& Location, float MaxDistance, class UClass* foliageIdentifier, TArray<EProximityEffectTypes> desiredTypes, class UHierarchicalInstancedStaticMeshComponent** out_component, int32_t* out_instanceId, struct FVector* out_instanceLocation, EProximityEffectTypes* out_Type);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageResourceUserData
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class UFGFoliageResourceUserData : public UAssetUserData
	{
	public:
		TArray<struct FItemDropWithChance>                         mPickupItems;                                            // 0x0028(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mPickupEvent;                                            // 0x0038(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     mPickupEffect;                                           // 0x0040(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mVehicleDestroyedEvent;                                  // 0x0048(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     mVehicleDestroyedEffect;                                 // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     mExplosionDestroyedEffect;                               // 0x0058(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mFXPriority;                                             // 0x0060(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IYCB[0x4];                                   // 0x0064(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mFoliageIdentifiers;                                     // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mPhysicsMesh;                                            // 0x0078(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EProximityEffectTypes                                      EffectCategory;                                          // 0x0080(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_069I[0x7];                                   // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            FoliageTypeIDs;                                          // 0x0088(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		bool                                                       bIsCaveMesh;                                             // 0x0098(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3HTB[0x7];                                   // 0x0099(0x0007) MISSED OFFSET (PADDING)

	public:
		EProximityEffectTypes STATIC_GetProximityEffectTypeByMesh(class UStaticMesh* Mesh);
		TArray<int32_t> STATIC_GetProximityEffectIdsByMesh(class UStaticMesh* Mesh);
		bool STATIC_GetIsCaveTypeByMesh(class UStaticMesh* Mesh);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageRemovalBundle
	 * Size -> 0x0140 (FullSize[0x0168] - InheritedSize[0x0028])
	 */
	class UFGFoliageRemovalBundle : public UObject
	{
	public:
		struct FFoliageRemovalHashArray                            ReplicationBuffer;                                       // 0x0028(0x0128) Net, NativeAccessSpecifierPublic
		class UFoliageType*                                        FoliageType;                                             // 0x0150(0x0008) Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FIntVector                                          FoliageCell;                                             // 0x0158(0x000C) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    NumHashes;                                               // 0x0164(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoliageStateRepProxy
	 * Size -> 0x0068 (FullSize[0x0360] - InheritedSize[0x02F8])
	 */
	class AFGFoliageStateRepProxy : public AFGStaticReplicatedActor
	{
	public:
		unsigned char                                              UnknownData_8ZRN[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_Y2RG[0x48];                                  // 0x0300(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGFoliageRemovalBundle*>                     mPendingBundles;                                         // 0x0348(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		float                                                      mReplicationRadius;                                      // 0x0358(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mMaxPendingBundles;                                      // 0x035C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void Server_ConfirmFullyReplicated(class UFGFoliageRemovalBundle* replicator);
		void OnFoliageBucketRemoved(const struct FIntVector& inCell, class UFoliageType* forFoliageType, int32_t bucketId);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoundationHologram
	 * Size -> 0x0020 (FullSize[0x0720] - InheritedSize[0x0700])
	 */
	class AFGFoundationHologram : public AFGFactoryBuildingHologram
	{
	public:
		unsigned char                                              UnknownData_5OT2[0xC];                                   // 0x0700(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mFineTuneRotationStep;                                   // 0x070C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSnapVerticalHitZoneRatio;                               // 0x0710(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mOnlyAllowLineZoop;                                      // 0x0714(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAllowCornerRotationMode;                                // 0x0715(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OVK8[0x2];                                   // 0x0716(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mBuildModeVerticalZoop;                                  // 0x0718(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFoundationNoClearanceHologram
	 * Size -> 0x0000 (FullSize[0x0720] - InheritedSize[0x0720])
	 */
	class AFGFoundationNoClearanceHologram : public AFGFoundationHologram
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadVehicle
	 * Size -> 0x0060 (FullSize[0x0608] - InheritedSize[0x05A8])
	 */
	class AFGRailroadVehicle : public AFGVehicle
	{
	public:
		class AFGTrain*                                            mTrain;                                                  // 0x05A8(0x0008) Edit, Net, ZeroConstructor, EditConst, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLength;                                                 // 0x05B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NFWM[0x4];                                   // 0x05B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGRailroadVehicle*                                  mCoupledVehicleFront;                                    // 0x05B8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGRailroadVehicle*                                  mCoupledVehicleBack;                                     // 0x05C0(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsOrientationReversed;                                  // 0x05C8(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6C4Y[0x3];                                   // 0x05C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRailroadTrackPosition                              mTrackPosition;                                          // 0x05CC(0x0010) SaveGame, NativeAccessSpecifierPrivate
		bool                                                       mIsDerailed;                                             // 0x05DC(0x0001) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsMaxDerailDistanceReached;                             // 0x05DD(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZTKZ[0xA];                                   // 0x05DE(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mLastServerTime;                                         // 0x05E8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0JK5[0x4];                                   // 0x05EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableRailroadTrack*                           mServerTrack;                                            // 0x05F0(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mServerOffset;                                           // 0x05F8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mServerForward;                                          // 0x05FC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mServerSpeed;                                            // 0x0600(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8198[0x4];                                   // 0x0604(0x0004) Fix size for supers

	public:
		void ReceiveOnRerail();
		void ReceiveOnDerail();
		void ReceiveOnCollided(class AFGRailroadVehicle* withVehicle, float ImpactVelocity, bool isPrimaryEvent, bool IsDerailed);
		void OnRep_Train();
		void OnRep_IsOrientationReversed();
		void OnRep_IsDerailed();
		void OnCollided(class AFGRailroadVehicle* withVehicle, float ImpactVelocity, bool isPrimaryEvent, bool IsDerailed);
		bool IsOrientationReversed();
		bool IsCoupledAt(ERailroadVehicleCoupler coupler);
		class AFGTrain* GetTrain();
		struct FRailroadTrackPosition GetTrackPosition();
		int32_t GetTrackGraphID();
		class UFGRailroadVehicleMovementComponent* GetRailroadVehicleMovementComponent();
		float GetLength();
		class UStaticMesh* GetDerailHologramMesh();
		class AFGRailroadVehicle* GetCoupledVehicleAt(ERailroadVehicleCoupler coupler);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFreightWagon
	 * Size -> 0x00F8 (FullSize[0x0700] - InheritedSize[0x0608])
	 */
	class AFGFreightWagon : public AFGRailroadVehicle
	{
	public:
		class UClass*                                              mInteractWidgetClass;                                    // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EFreightCargoType                                          mFreightCargoType;                                       // 0x0610(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EFreightCargoType                                          mTransitoryCargoType;                                    // 0x0611(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_15M5[0x6];                                   // 0x0612(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGRailroadVehicleMovementComponent*                 mVehicleMovement;                                        // 0x0618(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInventoryComponent*                               mStorageInventory;                                       // 0x0620(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              mContainerMeshStandard[0x30];                            // 0x0628(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mContainerMeshLiquid[0x30];                              // 0x0658(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		int32_t                                                    mInventorySize;                                          // 0x0688(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EStackSize                                                 mFluidStackSizeDefault;                                  // 0x068C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GDTH[0x3];                                   // 0x068D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mFluidStackSizeMultiplier;                               // 0x0690(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_88OT[0x4];                                   // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                mCargoMeshComponent;                                     // 0x0698(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTransform                                          mCargoMeshComponentDerailedTransform;                    // 0x06A0(0x0060) Net, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnRep_StorageInventory();
		void OnItemRemovedFromFreight(class UClass* ItemClass, int32_t numRemoved);
		void OnItemAddedToFreight(class UClass* ItemClass, int32_t numAdded);
		void InitializeInventoryComponent();
		int32_t GetScaledFluidStackSize();
		class UFGInventoryComponent* GetFreightInventory();
		EFreightCargoType GetFreightCargoType();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGOnlineModePreferenceViewModel
	 * Size -> 0x0008 (FullSize[0x0070] - InheritedSize[0x0068])
	 */
	class UFGOnlineModePreferenceViewModel : public UMVVMViewModelBase
	{
	public:
		EOnlineIntegrationMode                                     mMode;                                                   // 0x0068(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_WFTS[0x7];                                   // 0x0069(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFrontendStateComponent
	 * Size -> 0x0040 (FullSize[0x00E0] - InheritedSize[0x00A0])
	 */
	class UFGFrontendStateComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_ISRB[0x8];                                   // 0x00A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGOnlineStartupScreen*                              mOnlineStartupScreen;                                    // 0x00A8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UOnlineAsyncOperation*                               mAuthenticationSequence;                                 // 0x00B0(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4GOH[0x20];                                  // 0x00B8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGOnlineModePreferenceViewModel*                    mOnlineIntegrationModeModel;                             // 0x00D8(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnlineModeSelectionConfirmed(bool popupConfirmed);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGameEngine
	 * Size -> 0x0010 (FullSize[0x1020] - InheritedSize[0x1010])
	 */
	class UFGGameEngine : public UGameEngine
	{
	public:
		struct FFGEngineCommon                                     mEngineCommonImp;                                        // 0x1010(0x0010) NoDestructor, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGameInstance
	 * Size -> 0x01E8 (FullSize[0x03A8] - InheritedSize[0x01C0])
	 */
	class UFGGameInstance : public UGameInstance
	{
	public:
		class UFGSaveSystem*                                       mSaveSystem;                                             // 0x01C0(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnNewError;                                             // 0x01C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZYST[0x10];                                  // 0x01D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnNetworkErrorRecieved;                                 // 0x01E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class UDSTelemetry*                                        mTelemetryInstance;                                      // 0x01F8(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V7UZ[0x8];                                   // 0x0200(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGErrorMessage*>                             mErrorList;                                              // 0x0208(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		struct FOnJoinSessionData                                  mJoinSessionData;                                        // 0x0218(0x0130) Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnJoinSessionStateUpdated;                              // 0x0348(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8KB5[0x8];                                   // 0x0358(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnNatTypeUpdated;                                       // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_A4TY[0x10];                                  // 0x0370(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FFGModPackage>                               ModPackages;                                             // 0x0380(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic
		class UFGMusicManager*                                     mMusicManager;                                           // 0x0390(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KF46[0x8];                                   // 0x0398(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGDebugOverlayWidget*                               mDebugOverlayWidget;                                     // 0x03A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SubmitNetModeTelemetry(class UWorld* World);
		void SetHasSeenAlphaInfoScreen(bool hasSeen);
		void STATIC_PushError(class UObject* WorldContext, class UClass* ErrorMessage);
		bool PopLatestNetworkError();
		void PollHostProductUserId_JoinSession();
		class UFGErrorMessage* STATIC_PeekNextError(class UObject* WorldContext);
		bool HasPlayerSeenAlphaInfoScreen();
		class UFGOnlineSessionClient* GetOnlineSession();
		class UFGErrorMessage* STATIC_GetNextError(class UObject* WorldContext);
		bool GetLatestNetworkError(struct FFGGameNetworkErrorMsg* Msg);
		void GetFGUGC(class UClass* WeaponClass, class UClass* EnemyClass, class UClass* BossClass, class UClass* PlayerPawnClass);
		EJoinSessionState GetCurrentJoinSessionState();
		bool FindModPackages();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGameMode
	 * Size -> 0x00B0 (FullSize[0x0490] - InheritedSize[0x03E0])
	 */
	class AFGGameMode : public AGameMode
	{
	public:
		unsigned char                                              UnknownData_Z3QE[0x8];                                   // 0x03E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGSaveSession*                                      mSaveSession;                                            // 0x03E8(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IRGZ[0x30];                                  // 0x03F0(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mLastAutoSaveId;                                         // 0x0420(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GTKL[0x7];                                   // 0x0421(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              mSaveSessionName;                                        // 0x0428(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XGNU[0x8];                                   // 0x0438(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                mStartingPointTagName;                                   // 0x0440(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mAllowPossessAny;                                        // 0x0448(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MZVK[0x3];                                   // 0x0449(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                mDebugStartingPointTagName;                              // 0x044C(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6RG4[0x4];                                   // 0x0454(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSoftClassPath>                              mDefaultRemoteCallObjectsClassNames;                     // 0x0458(0x0010) ZeroConstructor, Config, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UUM4[0x10];                                  // 0x0468(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mServerRestartTimeHours;                                 // 0x0478(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DIYR[0xC];                                   // 0x047C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsMainMenu;                                             // 0x0488(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9JFM[0x7];                                   // 0x0489(0x0007) MISSED OFFSET (PADDING)

	public:
		void TriggerWorldSave(const class FString& saveGameName);
		void TriggerBundledWorldSave(const class FString& saveGameName);
		bool RegisterRemoteCallObjectClass(class UClass* InClass);
		void RebootSession();
		void JoinSessionByIdD(const class FString& SessionId);
		bool IsMainMenuGameMode();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGamePhaseManager
	 * Size -> 0x0058 (FullSize[0x0350] - InheritedSize[0x02F8])
	 */
	class AFGGamePhaseManager : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_M4JG[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class FScriptMulticastDelegate                             mOnPayOffOnGamePhase;                                    // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		EGamePhase                                                 mGamePhase;                                              // 0x0310(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y8NY[0x7];                                   // 0x0311(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FPhaseTierInfo>                              mGamePhaseTierInfo;                                      // 0x0318(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FPhaseCost>                                  mGamePhaseCosts;                                         // 0x0328(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, RepNotify, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnGamePhaseChanged;                                     // 0x0338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1MGU[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (PADDING)

	public:
		void SubmitGamePhaseTelemetry(EGamePhase Phase);
		void SetGamePhase(EGamePhase newPhase);
		int32_t PayOffOnGamePhase(const struct FItemAmount& payOff, EGamePhase gamePhase);
		void OnRep_GamePhaseCosts();
		void OnRep_GamePhase();
		void GetTechTiersForGamePhase(EGamePhase gamePhase, TArray<int32_t>* out_techTiers);
		int32_t GetLastTechTierForGamePhase(EGamePhase Phase);
		class FText GetGamePhaseName(EGamePhase gamePhase);
		EGamePhase GetGamePhaseForTechTier(int32_t TechTier);
		EGamePhase GetGamePhaseForSchematic(class UClass* inSchematic);
		EGamePhase GetGamePhase();
		class AFGGamePhaseManager* STATIC_GetDefault();
		void GetCurrentAndRemainingGamePhases(TArray<EGamePhase>* out_gamePhases);
		void GetCostForGamePhase(EGamePhase gamePhase, TArray<struct FItemAmount>* out_cost);
		void GetBaseCostForGamePhase(EGamePhase gamePhase, TArray<struct FItemAmount>* out_cost);
		class AFGGamePhaseManager* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGamePhaseReachedDependency
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGGamePhaseReachedDependency : public UFGAvailabilityDependency
	{
	public:
		EGamePhase                                                 mGamePhase;                                              // 0x0028(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D4IB[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		EGamePhase GetGamePhase();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGameRulesRemoteCallObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGGameRulesRemoteCallObject : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGGameRulesRemoteCallObject;             // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_T8RN[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void Server_UnlockInstantAltRecipes(bool Enabled);
		void Server_UnlockAllResourceSinkSchematics();
		void Server_UnlockAllResearchSchematics();
		void Server_UnlockAllMileStoneSchematics();
		void Server_SetNoUnlockCost(bool Enabled);
		void Server_SetNoPower(bool Enabled);
		void Server_SetGamePhase(int32_t gamePhase);
		void Server_SetArachnidCreaturesDisabled(bool Disabled);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGameRulesSubsystem
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class AFGGameRulesSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_J0HL[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		int32_t                                                    mStartingTier;                                           // 0x0300(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasInitialized : 1;                                     // 0x0304(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mUnlockInstantAltRecipes : 1;                            // 0x0304(0x0001) BIT_FIELD Net, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mUnlockAllMilestoneSchematics : 1;                       // 0x0304(0x0001) BIT_FIELD Net, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mUnlockAllResourceSinkSchematics : 1;                    // 0x0304(0x0001) BIT_FIELD Net, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mUnlockAllResearchSchematics : 1;                        // 0x0304(0x0001) BIT_FIELD Net, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mDisableArachnidCreatures : 1;                           // 0x0304(0x0001) BIT_FIELD Net, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mNoUnlockCost : 1;                                       // 0x0304(0x0001) BIT_FIELD Net, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JJ7O[0xB];                                   // 0x0305(0x000B) MISSED OFFSET (PADDING)

	public:
		void OnRep_NoUnlockCost();
		void OnRep_GameRules();
		class AFGGameRulesSubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGameSession
	 * Size -> 0x00D0 (FullSize[0x03E0] - InheritedSize[0x0310])
	 */
	class AFGGameSession : public AGameSession
	{
	public:
		unsigned char                                              UnknownData_41D5[0x18];                                  // 0x0310(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class APlayerController*, double>                     mLastLoginFailTime;                                      // 0x0328(0x0050) NativeAccessSpecifierPrivate
		TMap<class APlayerController*, int32_t>                    mFailedLoginCount;                                       // 0x0378(0x0050) NativeAccessSpecifierPrivate
		TArray<class APlayerController*>                           mLoggedInAdmins;                                         // 0x03C8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SUH5[0x8];                                   // 0x03D8(0x0008) MISSED OFFSET (PADDING)

	public:
		void ListenForIntroSequenceUpdated();
		void IntroSequenceUpdated();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGameStateRemoteCallObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGGameStateRemoteCallObject : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGGameStateRemoteCallObject;             // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FYFE[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void Server_SetCreativeModeEnabled();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGameState
	 * Size -> 0x02A0 (FullSize[0x0610] - InheritedSize[0x0370])
	 */
	class AFGGameState : public AGameState
	{
	public:
		unsigned char                                              UnknownData_J3IR[0x8];                                   // 0x0370(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             MapAreaVisistedDelegate;                                 // 0x0378(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      mTurboModeMultiplier;                                    // 0x0388(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XQCE[0x4];                                   // 0x038C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mPowerCircuitFuseTriggeredMessage;                       // 0x0390(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnAutoSaveTimeNotification;                             // 0x0398(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnAutoSaveFinished;                                     // 0x03A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnTetrominoLeaderBoardUpdated;                          // 0x03B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnPlayerStateSlotDataUpdated;                           // 0x03C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnClientSubsystemsValid;                                // 0x03D8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		class AFGTimeOfDaySubsystem*                               mTimeSubsystem;                                          // 0x03E8(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGStorySubsystem*                                   mStorySubsystem;                                         // 0x03F0(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGRailroadSubsystem*                                mRailroadSubsystem;                                      // 0x03F8(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGCircuitSubsystem*                                 mCircuitSubsystem;                                       // 0x0400(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGRecipeManager*                                    mRecipeManager;                                          // 0x0408(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGSchematicManager*                                 mSchematicManager;                                       // 0x0410(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGGamePhaseManager*                                 mGamePhaseManager;                                       // 0x0418(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGResearchManager*                                  mResearchManager;                                        // 0x0420(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGTutorialIntroManager*                             mTutorialIntroManager;                                   // 0x0428(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGActorRepresentationManager*                       mActorRepresentationManager;                             // 0x0430(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGMapManager*                                       mMapManager;                                             // 0x0438(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGRadioactivitySubsystem*                           mRadioactivitySubsystem;                                 // 0x0440(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGChatManager*                                      mChatManager;                                            // 0x0448(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGPipeSubsystem*                                    mPipeSubsystem;                                          // 0x0450(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGUnlockSubsystem*                                  mUnlockSubsystem;                                        // 0x0458(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGResourceSinkSubsystem*                            mResourceSinkSubsystem;                                  // 0x0460(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGItemRegrowSubsystem*                              mItemRegrowSubsystem;                                    // 0x0468(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGVehicleSubsystem*                                 mVehicleSubsystem;                                       // 0x0470(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGEventSubsystem*                                   mEventSubsystem;                                         // 0x0478(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGWorldGridSubsystem*                               mWorldGridSubsystem;                                     // 0x0480(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGDroneSubsystem*                                   mDroneSubsystem;                                         // 0x0488(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGStatisticsSubsystem*                              mStatisticsSubsystem;                                    // 0x0490(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGSignSubsystem*                                    mSignSubsystem;                                          // 0x0498(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGCreatureSubsystem*                                mCreatureSubsystem;                                      // 0x04A0(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGScannableSubsystem*                               mScannableSubsystem;                                     // 0x04A8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBlueprintSubsystem*                               mBlueprintSubsystem;                                     // 0x04B0(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGGameRulesSubsystem*                               mGameRulesSubsystem;                                     // 0x04B8(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mVisitedMapAreas;                                        // 0x04C0(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mPickedUpItems;                                          // 0x04D0(0x0010) Net, ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPrivate
		int32_t                                                    mPlayDurationWhenLoaded;                                 // 0x04E0(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G92P[0x4];                                   // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              mReplicatedSessionName;                                  // 0x04E8(0x0010) Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ESessionVisibility                                         mSessionVisibility;                                      // 0x04F8(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_W0ZN[0x7];                                   // 0x04F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FFactoryCustomizationColorSlot>              mBuildingColorSlots_Data;                                // 0x0500(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FLinearColor>                                mBuildableLightColorSlots;                               // 0x0510(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FGlobalColorPreset>                          mStaticGlobalColorPresets;                               // 0x0520(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<struct FGlobalColorPreset>                          mPlayerGlobalColorPresets;                               // 0x0530(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPrivate
		TArray<struct FSwatchGroupData>                            mSwatchGroupDatum;                                       // 0x0540(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPrivate
		TArray<struct FSwatchGroupData>                            mSwatchGroupFallbackDatum;                               // 0x0550(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              mUnlockCustomizerSchematic[0x30];                        // 0x0560(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              UnknownData_HX6N[0x28];                                  // 0x0590(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPlannedRestartTime;                                     // 0x05B8(0x0004) Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ENG6[0x4];                                   // 0x05BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnRestartTimeNotification;                              // 0x05C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate
		class UClass*                                              mHubPartClass;                                           // 0x05D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mForceAddHubPartOnSpawn;                                 // 0x05D8(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mCheatNoCost;                                            // 0x05D9(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mCheatNoPower;                                           // 0x05DA(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mCheatNoFuel;                                            // 0x05DB(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsTradingPostBuilt;                                     // 0x05DC(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasInitalTradingPostLandAnimPlayed;                     // 0x05DD(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsSpaceElevatorBuilt;                                   // 0x05DE(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4PDJ[0x1];                                   // 0x05DF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int64_t                                                    mServerLocalDateTimeTicksAtInit;                         // 0x05E0(0x0008) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FMiniGameResult>                             mTetrominoLeaderBoard;                                   // 0x05E8(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPrivate
		class FString                                              mPublicTodoList;                                         // 0x05F8(0x0010) Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasGivenStartingRecipes;                                // 0x0608(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsCreativeModeEnabled;                                  // 0x0609(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_102R[0x6];                                   // 0x060A(0x0006) MISSED OFFSET (PADDING)

	public:
		void SetIsSpaceElevatorBuilt(bool IsSpaceElevatorBuilt);
		void SetHasInitalTradingPostLandAnimPlayed();
		void SetDefaultSwatchForBuildableGroup(class UClass* SwatchGroup, class UClass* Swatch);
		void SetCreativeModeEnabled();
		void SetCheatNoPower(bool NoPower);
		void SetCheatNoFuel(bool NoFuel);
		void SetCheatNoCost(bool NoCost);
		void Server_SetBuildingColorDataForSlot(unsigned char slotIdx, const struct FFactoryCustomizationColorSlot& ColorData);
		void Server_SetBuildableLightColorSlot(unsigned char slotIdx, const struct FLinearColor& Color);
		void SendMessageToPlayer(class UClass* InMessage, class APlayerController* Controller);
		void SendMessageToAllPlayers(class UClass* InMessage);
		void RemovePlayerColorPresetAtIndex(int32_t Index);
		void OnRep_TetrominoLeaderBoard();
		void OnRep_PlannedRestartTime();
		void OnRep_OnlineSessionVisibility();
		void OnRep_MapAreaVisited();
		void OnRep_CheatNoPower();
		void OnRep_BuildingColorSlot_Data();
		void OnRep_BuildableLightColorSlots();
		void OnPlayerStateSlotDataUpdated(class AFGPlayerState* PlayerState);
		void NotifyPlayerAdded(class AFGCharacterPlayer* inPlayer);
		bool IsTradingPostBuilt();
		bool IsSpaceElevatorBuilt();
		bool IsMapAreaVisisted(class UClass* inArea);
		bool IsItemEverPickedUp(class UClass* ItemClass);
		bool IsCustomizerRecipeUnlocked();
		bool IsCreativeModeEnabled();
		bool HasInitalTradingPostLandAnimPlayed();
		void GetVisitedMapAreas(TArray<class UClass*>* out_VisitedAreas);
		class AFGTutorialIntroManager* GetTutorialIntroManager();
		int32_t GetTotalPlayDuration();
		TArray<struct FMiniGameResult> GetTetrominoLeaderBoard();
		TArray<struct FSwatchGroupData> GetSwatchGroupData();
		TArray<struct FGlobalColorPreset> GetStaticColorPresets();
		class FString GetSessionName();
		struct FDateTime GetServerLocalDateTime();
		class AFGSchematicManager* GetSchematicManager();
		class AFGResearchManager* GetResearchManager();
		TArray<struct FGlobalColorPreset> GetPlayerColorPresets();
		class AFGGamePhaseManager* GetGamePhaseManager();
		class UClass* GetCurrentSwatchForSwatchGroup(class UClass* SwatchGroup);
		bool GetCheatNoPower();
		bool GetCheatNoFuel();
		bool GetCheatNoCost();
		class AFGActorRepresentationManager* GetActorRepresentationManager();
		void CheckClientSubsystemsValid();
		bool AreClientSubsystemsValid();
		void AddTetrominoResult(const struct FMiniGameResult& newResult);
		void AddPlayerColorPreset(const class FText& PresetName, const struct FLinearColor& Color);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGameUI
	 * Size -> 0x00D8 (FullSize[0x03F0] - InheritedSize[0x0318])
	 */
	class UFGGameUI : public UFGBaseUI
	{
	public:
		TArray<class UFGMessageBase*>                              mPendingMessages;                                        // 0x0318(0x0010) ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnMouseButtonDown;                                      // 0x0328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KYOB[0x8];                                   // 0x0338(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTutorialHintData                                   mActiveTutorialHintData;                                 // 0x0340(0x0088) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		TArray<class UFGInteractWidget*>                           mInteractWidgetStack;                                    // 0x03C8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class UFGAudioMessage*                                     mActiveAudioMessage;                                     // 0x03D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMinTimeBetweenAudioMessage;                             // 0x03E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EOPV[0xC];                                   // 0x03E4(0x000C) MISSED OFFSET (PADDING)

	public:
		void StopSubtitle(class AActor* Instigator);
		void ShowTextNotification(const class FText& Text);
		void ShowQuickSearch();
		void ShowDirectionalSubtitle(const class FText& Subtitle, class AActor* Instigator, float Duration, bool bUseDuration);
		void ShowAttentionPing(class AFGPlayerState* PlayerState, const struct FVector& WorldLocation);
		bool ShouldShowFicsitSplashWidget();
		void SetWindowWantsInventoryAddon(bool doWantAddon);
		void SetShowInventory(bool doShow);
		void SetPauseMenuOpen(bool IsOpen);
		void SetActiveAudioMessage(class UFGAudioMessage* newMessage);
		void ResumeGame();
		void RemovePawnHUD();
		void RemoveInteractWidget(class UFGInteractWidget* WidgetToRemove);
		void RemoveAudioMessage();
		void ReceiveShowTutorialHint();
		void ReceivedMessage(class UClass* InMessage);
		void PushWidget(class UFGInteractWidget* Widget);
		void PushNotificationWidget(class UFGPushNotificationWidget* Widget);
		void PushInventoryNotification(class UFGInventoryComponent* Source, class UFGInventoryComponent* Destination, const struct FItemAmount& ItemAmount);
		bool PopWidget(class UFGInteractWidget* WidgetToRemove);
		void PopAllWidgets();
		void PlayAudioMessage(class UClass* MessageClass);
		void OnUpdateTutorialInfo();
		void OnToggleInteractWidget(class UClass* widgetToToogle, class UObject* interactObject);
		bool OnShortcutPressed(int32_t shortcutIndex);
		void OnResumeGame();
		void OnReceiveRadiationStop();
		void OnReceiveRadiationStart();
		void OnRadiationIntensityUpdated(float radiationIntensity, float radiationImmunity);
		void OnPauseGame();
		void OnHoverPackConnectionStatusUpdated(bool HasConnection);
		void OnFactoryClipboardPasted(class UObject* interactObject, class UFGFactoryClipboardSettings* factoryClipboardSettings);
		void OnFactoryClipboardCopied(class UObject* interactObject, class UFGFactoryClipboardSettings* factoryClipboardSettings);
		void Native_HandlePauseGamePressed();
		bool IsPauseMenuOpen();
		bool HasActiveInteractWidget();
		bool HandlePauseGamePressed();
		void HandleFocusLost();
		bool GetWindowWantsInventoryAddon();
		class UNamedSlot* GetTutorialInfoSlot();
		bool GetShowInventory();
		TArray<class UFGInteractWidget*> GetInteractWidgetStack();
		class UFGInteractWidget* GetInteractWidgetOfClass(class UClass* interactWidgetClass);
		class UNamedSlot* GetAudioMessageSlot();
		class UFGAudioMessage* GetActiveAudioMessage();
		class UFGInteractWidget* FindWidgetByClass(class UClass* WidgetClass);
		bool ContainsInteractWidgetOfClass(class UClass* interactWidgetClass);
		void AudioMessageFinishedPlayback();
		void AddPawnHUD(class UUserWidget* newContent);
		void AddInteractWidget(class UFGInteractWidget* widgetToAdd);
		class UFGPopupWidget* AddCheatWidget(const struct FPopupData& PopupData);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGameUserSettings
	 * Size -> 0x02E0 (FullSize[0x0428] - InheritedSize[0x0148])
	 */
	class UFGGameUserSettings : public UGameUserSettings
	{
	public:
		unsigned char                                              UnknownData_BTRF[0x8];                                   // 0x0148(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnArachnophobiaModeChangedDelegate;                      // 0x0150(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TMap<class FString, class UFGUserSettingApplyType*>        mUserSettings;                                           // 0x0160(0x0050) Transient, Protected, NativeAccessSpecifierProtected
		TArray<struct FFGKeyMapping>                               mCustomKeyMappings;                                      // 0x01B0(0x0010) Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		TArray<struct FFGCustomInputActionMapping>                 mPlayerMappedKeys;                                       // 0x01C0(0x0010) Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		class FScriptDelegate                                      OptionUpdatedDelegate;                                   // 0x01D0(0x0010) ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FString, int32_t>                               mIntValues;                                              // 0x01E0(0x0050) Config, NativeAccessSpecifierPrivate
		TMap<class FString, float>                                 mFloatValues;                                            // 0x0230(0x0050) Config, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZXPH[0x118];                                 // 0x0280(0x0118) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              mSecondaryLanguage;                                      // 0x0398(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              mPrimaryLanguage;                                        // 0x03A8(0x0010) ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		uint32_t                                                   CurrentFGGameUserSettingsVersion;                        // 0x03B8(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XR9L[0x4];                                   // 0x03BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mBuildHologramColour;                                    // 0x03C0(0x0018) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mDismantleHologramColour;                                // 0x03D8(0x0018) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mInvalidPlacementHologramColour;                         // 0x03F0(0x0018) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mSoftClearanceHologramColour;                            // 0x0408(0x0018) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EOnlineIntegrationMode                                     mPreferredOnlineIntegrationMode;                         // 0x0420(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UUFA[0x7];                                   // 0x0421(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateVideoQuality();
		void UpdatePaniniFOVScaling();
		void UpdateFoliageLoadingDistance(class UObject* World);
		void UpdateAudioOption(const class FString& updatedCvar);
		void SetSoftClearanceHologramColour(const struct FVector& inColour);
		void SetSecondaryLanguage(const class FString& Language);
		void SetPrimaryLanguage(const class FString& Language);
		void SetLanguageData(TMap<class FString, class FText> languageData);
		void SetInvalidPlacementHologramColour(const struct FVector& inColour);
		void SetHologramColour(const struct FVector& inColour);
		void SetDismantleHologramColour(const struct FVector& inColour);
		void SetCurrentConfigGraphicsAPI(EGraphicsAPI newGraphicsAPI);
		class FString RunAndApplyHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier);
		void RevertUnsavedChanges();
		void ResetVideoModeToLatestStable();
		void OnPoolLightQualityUpdated(const class FString& updatedCvar);
		void OnNetworkQualityUpdated(const class FString& updatedCvar);
		void OnMotionBlurEnabledUpdated(const class FString& updatedCvar);
		void OnFoliageQualityUpdated(const class FString& updatedCvar);
		void OnExitToMainMenu();
		void OnExitToDesktop();
		void OnCloudQualityUpdated(const class FString& updatedCvar);
		void OnArachnophobiaModeUpdated(const class FString& updatedCvar);
		bool IsUsingCustomVideoQualitySettings();
		bool IsUsingCustomScreenPercentage();
		bool IsStableVideoModeDirty();
		class FString GetSecondaryLanguage();
		TArray<struct FFGCustomInputActionMapping> GetPlayerMappedKeys();
		void STATIC_GetOptionInterface();
		TMap<class FString, class FText> GetLanguageData();
		TArray<struct FFGKeyMapping> GetKeyMappings();
		bool GetForcedGraphicsAPI(EGraphicsAPI* out_forcedGraphicsAPI);
		class UFGGameUserSettings* STATIC_GetFGGameUserSettings();
		int32_t GetDefaultPostProcessQualitySetting(const class FString& SettingName);
		EGraphicsAPI GetCurrentConfigGraphicsAPI();
		EGraphicsAPI GetCurrentActiveGraphicsAPI();
		void ConfirmStableVideoMode();
		void ApplyHologramColoursToCollectionParameterInstance(class UObject* World);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGameViewportClient
	 * Size -> 0x0000 (FullSize[0x03B0] - InheritedSize[0x03B0])
	 */
	class UFGGameViewportClient : public UGameViewportClient
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGasMask
	 * Size -> 0x0030 (FullSize[0x04B0] - InheritedSize[0x0480])
	 */
	class AFGGasMask : public AFGEquipment
	{
	public:
		TArray<class UFGDamageType*>                               mDamageTypesToProtectAgainst;                            // 0x0480(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       mPostProcessEnabled;                                     // 0x0490(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DKFM[0x3];                                   // 0x0491(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mFilterCountdown;                                        // 0x0494(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFilterDuration;                                         // 0x0498(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsInPoisonGas;                                          // 0x049C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_67GE[0x13];                                  // 0x049D(0x0013) MISSED OFFSET (PADDING)

	public:
		void PostProcessEnabled_OnRep();
		bool IsInGasCloud();
		void EnablePostProcessing(bool IsEnabled);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGasMaskAttachment
	 * Size -> 0x0008 (FullSize[0x0340] - InheritedSize[0x0338])
	 */
	class AFGGasMaskAttachment : public AFGEquipmentAttachment
	{
	public:
		unsigned char                                              UnknownData_8N8A[0x8];                                   // 0x0338(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGasPillar
	 * Size -> 0x0070 (FullSize[0x03D0] - InheritedSize[0x0360])
	 */
	class AFGGasPillar : public AFGDestructibleActor
	{
	public:
		unsigned char                                              UnknownData_OZL7[0x10];                                  // 0x0360(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                mMesh;                                                   // 0x0370(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              mNearbyGasCloud[0x30];                                   // 0x0378(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		float                                                      mEffectHeightOffset;                                     // 0x03A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z4EL[0x4];                                   // 0x03AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USphereComponent*                                    mOverlapCollision;                                       // 0x03B0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGDotComponent*                                     mDotComponent;                                           // 0x03B8(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mPostProcessSettings;                                    // 0x03C0(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSignificanceRange;                                      // 0x03C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_7PEN[0x4];                                   // 0x03CC(0x0004) MISSED OFFSET (PADDING)

	public:
		class UStaticMeshComponent* GetMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGasPillarCloud
	 * Size -> 0x0068 (FullSize[0x0360] - InheritedSize[0x02F8])
	 */
	class AFGGasPillarCloud : public AFGStaticReplicatedActor
	{
	public:
		unsigned char                                              UnknownData_TG7M[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_4VOI[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UNiagaraComponent*                                   mNiagaraComponent;                                       // 0x0308(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UNiagaraSystem*                                      mLongRangeNiagaraSystem;                                 // 0x0310(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     mRemainingRelevantWorldLocations;                        // 0x0318(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     mProximityPillarWorldLocations;                          // 0x0328(0x0010) Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     mRemovedWorldLocations;                                  // 0x0338(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, Protected, NativeAccessSpecifierProtected
		float                                                      mOverlapRadius;                                          // 0x0348(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mGlobalEffectZOffset;                                    // 0x034C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSignificanceRange;                                      // 0x0350(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsSignificant;                                          // 0x0354(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasPendingRefreshOfSystems;                             // 0x0355(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z3D8[0xA];                                   // 0x0356(0x000A) MISSED OFFSET (PADDING)

	public:
		void OnRep_RemovedWorldLocations();
		void OnAllLocationsRemoved();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGasPillarDesctructionActor
	 * Size -> 0x0028 (FullSize[0x0320] - InheritedSize[0x02F8])
	 */
	class AFGGasPillarDesctructionActor : public AActor
	{
	public:
		class UGeometryCollectionComponent*                        mGeometryCollectionComponent;                            // 0x02F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mDestructionImpulseScale;                                // 0x0300(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAppliedDamageScale;                                     // 0x0304(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             mForceLocation;                                          // 0x0308(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnDestructionInfoSet();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGenericBuildableHologram
	 * Size -> 0x0038 (FullSize[0x06C0] - InheritedSize[0x0688])
	 */
	class AFGGenericBuildableHologram : public AFGBuildableHologram
	{
	public:
		unsigned char                                              UnknownData_3Z1T[0x7];                                   // 0x0688(0x0007) Fix Super Size
		EBeamSnappingMode                                          mBeamSnappingMode;                                       // 0x068F(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPillarSnappingMode                                        mPillarSnappingMode;                                     // 0x0690(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_I16E[0x3];                                   // 0x0691(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mRotationStep;                                           // 0x0694(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mWallSnapOffset;                                         // 0x0698(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAxis                                                      mSnapAxis;                                               // 0x06B0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_22MC[0x3];                                   // 0x06B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mFoundationSnappingInset;                                // 0x06B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XY3E[0x8];                                   // 0x06B8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceExtractorHologram
	 * Size -> 0x0020 (FullSize[0x06A8] - InheritedSize[0x0688])
	 */
	class AFGResourceExtractorHologram : public AFGFactoryHologram
	{
	public:
		class AFGBuildableResourceExtractorBase*                   mDefaultExtractor;                                       // 0x0688(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              mSnappedExtractableResource[0x10];                       // 0x0690(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		class AFGBuildableResourceExtractorBase*                   mUpgradeTarget;                                          // 0x06A0(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGeoThermalGeneratorHologram
	 * Size -> 0x0008 (FullSize[0x06B0] - InheritedSize[0x06A8])
	 */
	class AFGGeoThermalGeneratorHologram : public AFGResourceExtractorHologram
	{
	public:
		unsigned char                                              UnknownData_83CA[0x8];                                   // 0x06A8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGlobalSettings
	 * Size -> 0x0120 (FullSize[0x0158] - InheritedSize[0x0038])
	 */
	class UFGGlobalSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              mFactorySettings[0x30];                                  // 0x0038(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mDropPodSettings[0x30];                                  // 0x0068(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mHardDriveSettings[0x30];                                // 0x0098(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mEnvironmentSettings[0x30];                              // 0x00C8(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mIconLibrary[0x30];                                      // 0x00F8(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mServerManagerSettings[0x30];                            // 0x0128(0x0030) UNKNOWN PROPERTY: SoftClassProperty

	public:
		class UFGServerManagerSettings* STATIC_GetServerManagerSettingsCDO();
		class UFGIconLibrary* STATIC_GetIconLibraryCDO();
		class UFGHardDriveSettings* STATIC_GetHardDriveSettingsCDO();
		class UFGFactorySettings* STATIC_GetFactorySettingsCDO();
		class UFGEnvironmentSettings* STATIC_GetEnvironmentSettingsCDO();
		class UFGDropPodSettings* STATIC_GetDropPodSettingsCDO();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGGolfCartDispenser
	 * Size -> 0x0020 (FullSize[0x04A0] - InheritedSize[0x0480])
	 */
	class AFGGolfCartDispenser : public AFGEquipment
	{
	public:
		float                                                      mPlaceDistanceMax;                                       // 0x0480(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_10PK[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstance*                                   mValidPlacementMaterial;                                 // 0x0488(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   mInvalidPlacementMaterial;                               // 0x0490(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JA5B[0x8];                                   // 0x0498(0x0008) MISSED OFFSET (PADDING)

	public:
		void SpawnGolfCart();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHardDriveSettings
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGHardDriveSettings : public UFGSettings
	{
	public:
		int32_t                                                    mUniqueItemCount;                                        // 0x0028(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SITR[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FItemAmount                                         mFallbackReturnItem;                                     // 0x0030(0x0010) Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mHardDriveResearchSchematic;                             // 0x0040(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		TArray<class UClass*> STATIC_GetResearchRewardPackages(class UWorld* World);
		class UClass* STATIC_GetHardDriveResearchSchematic();
		struct FItemAmount GetFallbackReturnItem();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHealthComponent
	 * Size -> 0x0088 (FullSize[0x0128] - InheritedSize[0x00A0])
	 */
	class UFGHealthComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_H515[0x8];                                   // 0x00A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnTakeAnyDamageDelegate;                                 // 0x00A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTakePointDamageDelegate;                               // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnTakeRadialDamageDelegate;                              // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             DeathDelegate;                                           // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             HealDelegate;                                            // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class FScriptDelegate>                              mOnAdjustDamage;                                         // 0x00F8(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FDamageModifier>                             mDamageTypeModifiers;                                    // 0x0108(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mMaxHealth;                                              // 0x0118(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCurrentHealth;                                          // 0x011C(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRespawnHealthFactor;                                    // 0x0120(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsDead : 1;                                             // 0x0124(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mReplicateDamageEvents : 1;                              // 0x0124(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mReplicateDeathEvents : 1;                               // 0x0124(0x0001) BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M12X[0x3];                                   // 0x0125(0x0003) MISSED OFFSET (PADDING)

	public:
		void TakeRadialDamage(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
		void TakePointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, const class FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser);
		void TakeDamage(class AActor* DamagedActor, float DamageAmount, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void ReviveResetHealth();
		void ResetHealthFromDeath();
		void ResetHealth();
		void RemoveDamageModifiersOfType(class UClass* dmgType, bool includeSubClasses);
		void RemoveDamageModifiersAppliedFromObject(class UObject* applyingObject);
		void RemoveAdjustDamageListener(const class FScriptDelegate& AdjustDamage);
		void Kill();
		bool IsDead();
		void Heal(float healAmount, bool notifyClient);
		float GetMaxHealth();
		TArray<struct FDamageModifier> GetDamageModifiers();
		float GetCurrentHealth();
		void Client_TakeRadialDamage(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
		void Client_TakePointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, const class FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser);
		void Client_TakeDamage(class AActor* DamagedActor, float DamageAmount, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
		void Client_Heal(float Amount);
		void Client_Died(class AActor* DeadActor);
		void AddDamageModifier(const struct FDamageModifier& damageMod);
		void AddAdjustDamageListener(const class FScriptDelegate& AdjustDamage);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHologramBuildModeDescriptor
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UFGHologramBuildModeDescriptor : public UFGBuildGunModeDescriptor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHookshot
	 * Size -> 0x0030 (FullSize[0x04B0] - InheritedSize[0x0480])
	 */
	class AFGHookshot : public AFGEquipment
	{
	public:
		float                                                      mMaxHookDistance;                                        // 0x0480(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mAccelRate;                                              // 0x0484(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mBrakeAccelRate;                                         // 0x0488(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KZUP[0xC];                                   // 0x048C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent*                                        mHookshotAudio;                                          // 0x0498(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O2JW[0x10];                                  // 0x04A0(0x0010) MISSED OFFSET (PADDING)

	public:
		void RestoreAudioSourceToOriginalLocation();
		void OwnerLanded(const struct FHitResult& Hit);
		void OnWireDetach();
		void OnFire(bool attachedToSomething, const struct FHitResult& HitResult);
		void MoveAudioSourceInFrontOfPlayer();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHoverPack
	 * Size -> 0x00F0 (FullSize[0x0570] - InheritedSize[0x0480])
	 */
	class AFGHoverPack : public AFGEquipment
	{
	public:
		class FScriptMulticastDelegate                             ConnectionLocationUpdatedDelegate;                       // 0x0480(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ConnectionStatusUpdatedDelegate;                         // 0x0490(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             HoverModeChangedDelegate;                                // 0x04A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             RangeWarningToggleDelegate;                              // 0x04B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      mHoverSpeed;                                             // 0x04C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mHoverAccelerationSpeed;                                 // 0x04C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mHoverSprintMultiplier;                                  // 0x04C8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mHoverFriction;                                          // 0x04CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mJumpKeyHoldActivationTime;                              // 0x04D0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mFallSpeedLimitWhenPowered;                              // 0x04D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mPowerConnectionSearchRadius;                            // 0x04D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mPowerConnectionSearchTickRate;                          // 0x04DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V2ER[0x4];                                   // 0x04E0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPowerConnectionDisconnectionTime;                       // 0x04E4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8RZJ[0x4];                                   // 0x04E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPowerCapacity;                                          // 0x04EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mPowerDrainRate;                                         // 0x04F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mPowerConsumption;                                       // 0x04F4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mCurrentPowerLevel;                                      // 0x04F8(0x0004) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mRangeWarningNormalizedDistanceThreshold;                // 0x04FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7OOW[0x1];                                   // 0x0500(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EHoverPackMode                                             mCurrentHoverMode;                                       // 0x0501(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DEGR[0x6];                                   // 0x0502(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPowerConnectionComponent*                         mCurrentPowerConnection;                                 // 0x0508(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasConnection;                                          // 0x0510(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mShouldAutomaticallyHoverWhenConnected;                  // 0x0511(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_4G5K[0x2];                                   // 0x0512(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCrouchHoverCancelTime;                                  // 0x0514(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C3PJ[0x4];                                   // 0x0518(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCharacterUseDistanceWhenActive;                         // 0x051C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mActiveNoise;                                            // 0x0520(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mActiveNoiseFrequency;                                   // 0x0528(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2D42[0xC];                                   // 0x052C(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mCurrentConnectionLocation;                              // 0x0538(0x0018) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableRailroadTrack*                           mCurrentRailroadTrack;                                   // 0x0550(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGPowerInfoComponent*                               mPowerInfo;                                              // 0x0558(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGPowerConnectionComponent*                         mPowerConnection;                                        // 0x0560(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Y7X9[0x8];                                   // 0x0568(0x0008) MISSED OFFSET (PADDING)

	public:
		void PlayerStopHover_Server();
		void OnRep_HasConnection();
		void OnRep_CurrentHoverMode();
		void OnRep_CurrentConnectionLocation();
		void OnRangeWarningToggle(bool ShouldDisplayWarning);
		void OnPowerConnectionLocationUpdated(const struct FVector& NewLocation);
		void OnHoverModeChanged(EHoverPackMode NewMode);
		void OnConnectionStatusUpdated(bool HasConnection);
		void MakeActiveNoise();
		bool IsHoverActive();
		bool HasConnection();
		float GetPowerCapacity();
		float GetNormalizedPowerLevel();
		float GetNormalizedDistanceFromConnection();
		float GetMaxSpeed(bool IsSprinting);
		float GetMaxDistanceFromCurrentConnection();
		float GetHoverSpeed(bool IsSprinting);
		float GetHoverAccelerationSpeed(bool IsSprinting);
		float GetHeightAboveCurrentConnection();
		float GetFriction();
		float GetFallSpeedLimitWhenPowered();
		float GetDistanceFromCurrentConnection();
		class AFGBuildableRailroadTrack* GetCurrentRailroadTrack();
		float GetCurrentPowerLevel();
		EHoverPackMode GetCurrentHoverMode();
		struct FVector GetCurrentConnectionLocation();
		class UFGPowerConnectionComponent* GetCurrentConnection();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHoverPackAttachment
	 * Size -> 0x0028 (FullSize[0x0360] - InheritedSize[0x0338])
	 */
	class AFGHoverPackAttachment : public AFGEquipmentAttachment
	{
	public:
		unsigned char                                              UnknownData_TVVA[0x8];                                   // 0x0338(0x0008) Fix Super Size
		struct FVector                                             mCurrentConnectionLocation;                              // 0x0340(0x0018) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableRailroadTrack*                           mCurrentRailroadTrack;                                   // 0x0358(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnRep_HasConnection();
		void OnRep_CurrentHoverMode();
		void OnRep_CurrentConnectionLocation();
		void OnPowerConnectionLocationUpdated(const struct FVector& NewLocation);
		void OnHoverModeChanged(EHoverPackMode NewMode);
		void OnConnectionStatusUpdated(bool HasConnection);
		bool IsHoverActive();
		bool HasConnection();
		EHoverPackMode GetCurrentHoverMode();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHUDBase
	 * Size -> 0x0010 (FullSize[0x0400] - InheritedSize[0x03F0])
	 */
	class AFGHUDBase : public AHUD
	{
	public:
		class UFGBaseUI*                                           mBaseUI;                                                 // 0x03F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_X6UC[0x8];                                   // 0x03F8(0x0008) MISSED OFFSET (PADDING)

	public:
		void ToggleStoryDebugOverlay();
		void ToggleStatisticsDebugOverlay();
		void ToggleShoppingListDebugOverlay();
		void ToggleOptionsDebugOverlay();
		void ToggleOnlineInfoDebugOverlay();
		void ToggleDebugOverlay();
		void ToggleAdvancedGameSettingsDebugOverlay();
		void QuickSwitchLanguage();
		class UFGBaseUI* GetBaseUI();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHUD
	 * Size -> 0x0200 (FullSize[0x0600] - InheritedSize[0x0400])
	 */
	class AFGHUD : public AFGHUDBase
	{
	public:
		unsigned char                                              UnknownData_4M5D[0x8];                                   // 0x0400(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnPumpiModeChanged;                                     // 0x0408(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnPartialPumpiModeChanged;                              // 0x0418(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnHiddenHUDModeChanged;                                 // 0x0428(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnHUDVisibilityChanged;                                 // 0x0438(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnHitFeedbackNormal;                                    // 0x0448(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnHitFeedbackArmor;                                     // 0x0458(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnHitFeedbackWeakSpot;                                  // 0x0468(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnCrosshairUpdated;                                     // 0x0478(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              mGameUIClass;                                            // 0x0488(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mRespawnUIClass;                                         // 0x0490(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mDefaultCrosshair;                                       // 0x0498(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mPickupCrosshair;                                        // 0x04A0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mVehicleCrosshair;                                       // 0x04A8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mWeaponCrosshair;                                        // 0x04B0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mWorkbenchCrosshair;                                     // 0x04B8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mBuildCrosshair;                                         // 0x04C0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mDismantleCrosshair;                                     // 0x04C8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mCustomCrosshair;                                        // 0x04D0(0x0008) BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mGeneralCrosshair;                                       // 0x04D8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_P8DP[0x20];                                  // 0x04E0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInputComponent*                                     mRespawnInputComponent;                                  // 0x0500(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UUserWidget*                                         mRespawnUI;                                              // 0x0508(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGGameUI*                                           mGameUI;                                                 // 0x0510(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UUserWidget*                                         mPawnHUD;                                                // 0x0518(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class UClass*, class UUserWidget*>                    mCachedWidgets;                                          // 0x0520(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BUYK[0x90];                                  // 0x0570(0x0090) MISSED OFFSET (PADDING)

	public:
		void UpdateCrosshairState(class AFGCharacterPlayer* Player);
		void UpdateCrosshairColorState(const struct FLinearColor& NewColor);
		void ShowRespawnUI();
		void SetShowCrossHair(bool showCrosshair);
		void SetPumpiMode(bool HideHUD);
		void SetPartialPumpiMode(bool HideHUD);
		void SetHUDVisibility(bool hudVisibility);
		void SetForceHideCrossHair(bool forceHide);
		void SetCrustomCrosshairTexture(class UTexture2D* newTexture);
		void SetCrosshairState(ECrosshairState crosshairState);
		class UUserWidget* RequestWidget(class UClass* WidgetClass);
		class UFGInteractWidget* RequestInteractWidget(class UClass* WidgetClass, class UObject* interactObject);
		void RemoveEquipmentHUD(EEquipmentSlot Slot);
		void ReleaseWidget(class UUserWidget* widgetToRelease);
		void OpenInteractUI(class UClass* WidgetClass, class UObject* interactObject);
		void NotifyNotifyHitFeedbackArmor(class AFGCharacterBase* hitCharacter, class AActor* DamageCauser);
		void NotifyHitFeedbackWeakSpot(class AFGCharacterBase* hitCharacter, class AActor* DamageCauser);
		void NotifyHitFeedbackNormal(class AFGCharacterBase* hitCharacter, class AActor* DamageCauser);
		bool GetShowCrosshair();
		bool GetPumpiMode();
		class UUserWidget* GetPawnHUD();
		bool GetPartialPumpiMode();
		bool GetHUDVisibility();
		bool GetHiddenHUDMode();
		class UFGGameUI* GetGameUI();
		ECrosshairState GetCrosshairState();
		void CloseRespawnUI();
		void AddPawnHUD(class UClass* WidgetClass, class APawn* Pawn);
		void AddEquipmentHUD(class UClass* WidgetClass, EEquipmentSlot Slot);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGIconLibrary
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UFGIconLibrary : public UObject
	{
	public:
		TArray<struct FIconData>                                   mIconData;                                               // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FIconData>                                   mMonochromeIconData;                                     // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FIconData>                                   mCustomIconData;                                         // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FIconData>                                   mMaterialIconData;                                       // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<struct FIconData>                                   mMapStampIconData;                                       // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		class UObject* STATIC_GetTextureFromIconData(const struct FIconData& IconData);
		TArray<struct FIconData> GetMonochromeIconData();
		TArray<struct FIconData> GetMaterialIconData();
		TArray<struct FIconData> GetMapStampIconData();
		bool STATIC_GetIsAnimatedFromIconData(const struct FIconData& IconData);
		int32_t STATIC_GetIDFromIconData(const struct FIconData& IconData);
		EIconType STATIC_GetIconTypeFromIconData(const struct FIconData& IconData);
		class FText STATIC_GetIconNameFromIconData(const struct FIconData& IconData);
		int32_t GetIconIDForTexture(class UObject* Texture);
		void STATIC_GetIconDataForIconID(class UClass* iconLibraryClass, int32_t IconID, struct FIconData* out_iconData);
		TArray<struct FIconData> GetIconData();
		TArray<struct FIconData> GetCustomIconData();
		void STATIC_GetAllIconDataForType(class UClass* iconLibraryClass, EIconType IconType, bool includeHidden, TArray<struct FIconData>* out_iconData);
		class FString STATIC_CompileIconDatabase(class UClass* iconLibraryClass);
		class FString STATIC_ClearIconDatabase(class UClass* iconLibraryClass, const class FString& Password);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInputLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGInputLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_ShouldShowEnhancedRebindingMenu();
		void STATIC_ResetAllEnhancedKeyBindings(class APlayerController* PlayerController);
		void STATIC_RebindEnhancedKeyMapping(class APlayerController* PlayerController, const class FName& InActionName, const struct FKey& PrimaryKey, TArray<struct FKey> ModifierKeys);
		void STATIC_GetPlayerRebindableMappingContexts(TArray<class UFGInputMappingContext*>* out_MappingContexts);
		bool STATIC_GetOverlappingEnhancedKeyMappings(class APlayerController* PlayerController, const class FName& InActionName, const struct FKey& PrimaryKey, TArray<struct FKey> ModifierKeys, TArray<struct FEnhancedActionKeyMapping>* out_HardConflicts, TArray<struct FEnhancedActionKeyMapping>* out_SoftConflicts);
		struct FInputActionKeyMapping STATIC_GetKeyMappingForAction(class APlayerController* PlayerController, const class FName& InAction, bool getGamepadKey);
		class FText STATIC_GetInputActionNameAsText(class APlayerController* PlayerController, const class FName& InActionName, bool abbreviateKeyNames);
		bool STATIC_GetCurrentMappingForAction(class APlayerController* PlayerController, const class FName& InActionName, struct FKey* out_primaryKey, TArray<struct FKey>* out_modifierKeys);
		class FText STATIC_GetAbbreviatedKeyName(const struct FKey& Key);
		class FText STATIC_FormatStringWithInputActionNames(class APlayerController* PlayerController, const class FText& textToFormat, bool abbreviateKeyNames);
		void STATIC_ClearBindingsForWidget(class UUserWidget* Widget);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInputMappingContext
	 * Size -> 0x0050 (FullSize[0x00A8] - InheritedSize[0x0058])
	 */
	class UFGInputMappingContext : public UInputMappingContext
	{
	public:
		class FText                                                mDisplayName;                                            // 0x0058(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      mMenuPriority;                                           // 0x0070(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M0FO[0x4];                                   // 0x0074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mParentContext[0x30];                                    // 0x0078(0x0030) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInputSettings
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UFGInputSettings : public UDeveloperSettings
	{
	public:
		TArray<struct FInputActionTagBinding>                      mInputActionTagBindings;                                 // 0x0038(0x0010) Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected

	public:
		class UInputAction* GetInputActionForTag(const struct FGameplayTag& Tag);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInputTriggerChordBinding
	 * Size -> 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
	 */
	class UFGInputTriggerChordBinding : public UInputTriggerChordAction
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInteractableMarker
	 * Size -> 0x0028 (FullSize[0x0320] - InheritedSize[0x02F8])
	 */
	class AFGInteractableMarker : public AActor
	{
	public:
		class UWidgetComponent*                                    mIconWidget;                                             // 0x02F8(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineMeshComponent*                                mSplineMesh;                                             // 0x0300(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDesiredScreenRadius;                                    // 0x0308(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FWIQ[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              mTrackedActor;                                           // 0x0310(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGPlayerController*                                 mCachePlayerController;                                  // 0x0318(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetTrackedActor(class AActor* trackedActor);
		void OnSetActorTracked();
		class AActor* GetTrackedActor();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHitResultWrapper
	 * Size -> 0x00E8 (FullSize[0x0110] - InheritedSize[0x0028])
	 */
	class UFGHitResultWrapper : public UObject
	{
	public:
		unsigned char                                              UnknownData_R7SN[0xE8];                                  // 0x0028(0x00E8) MISSED OFFSET (PADDING)

	public:
		struct FVector_NetQuantize GetMapMarkerLocation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInteractWidget
	 * Size -> 0x0068 (FullSize[0x02E8] - InheritedSize[0x0280])
	 */
	class UFGInteractWidget : public UUserWidget
	{
	public:
		bool                                                       mUseKeyboard;                                            // 0x0280(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mUseMouse;                                               // 0x0281(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EMouseLockMode                                             mMouseLockMode;                                          // 0x0282(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mHideCursorDuringCapture;                                // 0x0283(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_93KD[0x4];                                   // 0x0284(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FName>                                        mInputToPassThrough;                                     // 0x0288(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       mListenForShortcutPressed;                               // 0x0298(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mRestoreFocusWhenLost;                                   // 0x0299(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mDisablePlayerActions;                                   // 0x029A(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mDisableBuildGunActions;                                 // 0x029B(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mDisablePlayerEquipmentManagement;                       // 0x029C(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mFlushMouseKeysOnOpen;                                   // 0x029D(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mClearBindingsOnDestruct;                                // 0x029E(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mCaptureInput;                                           // 0x029F(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EHorizontalAlignment                                       mDesiredHorizontalAlignment;                             // 0x02A0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EVerticalAlignment                                         mDesiredVerticalAlignment;                               // 0x02A1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5SDN[0x2];                                   // 0x02A2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateChildSize                                     mDesiredAlignmentSize;                                   // 0x02A4(0x0008) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6UUG[0x4];                                   // 0x02AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObject*                                             mInteractObject;                                         // 0x02B0(0x0008) BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mDefaultFocusWidgetClass;                                // 0x02B8(0x0008) Edit, ZeroConstructor, Config, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mUseGamepadCursor;                                       // 0x02C0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_290T[0x3];                                   // 0x02C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCustomTickRate;                                         // 0x02C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCallCustomTickOnConstruct;                              // 0x02C8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LG31[0xF];                                   // 0x02C9(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidget*                                             mDefaultFocusWidget;                                     // 0x02D8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mSupportsStacking;                                       // 0x02E0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mSupportsCaching;                                        // 0x02E1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0DJU[0x6];                                   // 0x02E2(0x0006) MISSED OFFSET (PADDING)

	public:
		void UpdateIgnoreMoveInput();
		void UpdateIgnoreLookInput();
		void SetupDefaultFocus();
		void SetInputMode();
		void SetDesiredVerticalAlignment(EVerticalAlignment newAlignment);
		void SetDesiredHorizontalAlignment(EHorizontalAlignment newAlignment);
		void SetDesiredAlignmentSize(const struct FSlateChildSize& NewSize);
		void SetDefaultFocusWidget(class UWidget* FocusWidget);
		void PasteFactoryClipboard();
		bool OnShortcutPressed(int32_t Index);
		void OnFactoryClipboardPasted(class UObject* interactObject, class UFGFactoryClipboardSettings* factoryClipboardSettings);
		void OnFactoryClipboardCopied(class UObject* interactObject, class UFGFactoryClipboardSettings* factoryClipboardSettings);
		void OnEscapePressed();
		void OnCustomTick(float UpdateTime);
		void OnConsume();
		bool OnAttentionPingPressed();
		void Native_Init();
		void Init();
		bool GetUseGamepadCursor();
		bool GetSupportsStacking();
		EVerticalAlignment GetDesiredVerticalAlignment();
		EHorizontalAlignment GetDesiredHorizontalAlignment();
		struct FSlateChildSize GetDesiredAlignmentSize();
		class UWidget* GetDefaultFocusWidget();
		float GetCustomTickRate();
		void CopyFactoryClipboard();
		void ClearRestoreFocusGate();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInventoryComponent
	 * Size -> 0x00E0 (FullSize[0x0180] - InheritedSize[0x00A0])
	 */
	class UFGInventoryComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_KDXY[0x8];                                   // 0x00A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             ResizeInventoryDelegate;                                 // 0x00A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemAddedDelegate;                                     // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnItemRemovedDelegate;                                   // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OZXI[0x10];                                  // 0x00D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnSlotUpdatedDelegate;                                   // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_B4EM[0x30];                                  // 0x00F8(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mDefaultInventorySize;                                   // 0x0128(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mAdjustedSizeDiff;                                       // 0x012C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0YXL[0x8];                                   // 0x0130(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FInventoryStack>                             mInventoryStacks;                                        // 0x0138(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1ZED[0x10];                                  // 0x0148(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            mArbitrarySlotSizes;                                     // 0x0158(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mAllowedItemDescriptors;                                 // 0x0168(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, UObjectWrapper, NativeAccessSpecifierPrivate
		bool                                                       mCanBeRearrange;                                         // 0x0178(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XQ3O[0x7];                                   // 0x0179(0x0007) MISSED OFFSET (PADDING)

	public:
		void SplitStackAtIdx(int32_t idx, int32_t numItemsToMove);
		void SortInventory();
		void SetCanBeRearranged(bool canBeRearranged);
		void SetAllowedItemOnIndex(int32_t idx, class UClass* allowedItemClass);
		void Server_SortInventory();
		void Resize(int32_t NewSize);
		void RemoveFromIndex(int32_t idx, int32_t Num);
		void RemoveArbitrarySlotSize(int32_t Index);
		void RemoveAllFromIndex(int32_t idx);
		void Remove(class UClass* ItemClass, int32_t Num);
		void OnRep_InventoryStacks();
		void OnRep_AllowedItemDescriptors(TArray<class UClass*> previousAllowedItems);
		bool IsValidIndex(int32_t idx);
		bool IsSomethingOnIndex(int32_t idx);
		bool IsLocked();
		bool IsItemAllowed(class UClass* ItemClass, int32_t idx);
		bool IsIndexEmpty(int32_t idx);
		bool IsEmpty();
		bool HasItems(class UClass* ItemClass, int32_t Num);
		bool HasEnoughSpaceForStacks(TArray<struct FInventoryStack> stacks);
		bool HasEnoughSpaceForStack(const struct FInventoryStack& stack);
		bool HasEnoughSpaceForItem(const struct FInventoryItem& stack);
		bool HasAuthority();
		bool GetStackFromIndex(int32_t idx, struct FInventoryStack* out_stack);
		class AFGEquipment* GetStackEquipmentActorAtIdx(int32_t Index);
		int32_t GetSlotSize(int32_t Index, class UClass* itemDesc);
		int32_t GetSizeLinear();
		TArray<int32_t> GetRelevantStackIndexes(TArray<class UClass*> relevantClasses, int32_t stackLimit, bool sortResult);
		int32_t GetNumItems(class UClass* ItemClass);
		void GetInventoryStacks(TArray<struct FInventoryStack>* out_stacks, bool getEmptyStacks);
		int32_t GetFullestStackIndex();
		int32_t GetFirstIndexWithItem(int32_t StartIndex);
		bool GetCanBeRearranged();
		class UClass* GetAllowedItemOnIndex(int32_t idx);
		int32_t FindFirstIndexWithItemType(class UClass* itemDescriptor, int32_t StartIndex);
		int32_t FindEmptyIndex();
		void Empty();
		bool CanSplitStackAtIdx(int32_t idx);
		int32_t AddStackToIndex(int32_t idx, const struct FInventoryStack& stack, bool allowPartialAdd);
		void AddStacks(TArray<struct FInventoryStack> stacks);
		int32_t AddStack(const struct FInventoryStack& stack, bool allowPartialAdd);
		void AddArbitrarySlotSize(int32_t Index, int32_t arbitrarySlotSize);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInventoryComponentEquipment
	 * Size -> 0x0030 (FullSize[0x01B0] - InheritedSize[0x0180])
	 */
	class UFGInventoryComponentEquipment : public UFGInventoryComponent
	{
	public:
		class AFGEquipment*                                        mOverrideEquipmentInSlot;                                // 0x0180(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGEquipment*                                        mEquipmentInSlot;                                        // 0x0188(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EEquipmentSlot                                             mEquipmentInventorySlot;                                 // 0x0190(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_D7WQ[0x3];                                   // 0x0191(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mActiveEquipmentIndex;                                   // 0x0194(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FKM0[0x18];                                  // 0x0198(0x0018) MISSED OFFSET (PADDING)

	public:
		void OnRep_ActiveEquipmentIndex();
		void OnRep_ActiveEquipment();
		EEquipmentSlot GetEquipmentSlotEnum();
		int32_t GetActiveIndex();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInventoryComponentTrash
	 * Size -> 0x0000 (FullSize[0x0180] - InheritedSize[0x0180])
	 */
	class UFGInventoryComponentTrash : public UFGInventoryComponent
	{
	public:
		bool IsValidItem(class UClass* Resource);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInventoryLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGInventoryLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_RemoveAllItemsNotOfResourceForm(TArray<struct FInventoryStack>* Items, EResourceForm validForm);
		bool STATIC_MoveInventoryItem(class UFGInventoryComponent* SourceComponent, int32_t sourceIdx, class UFGInventoryComponent* destinationComponent, int32_t destinationIdx);
		void STATIC_MergeInventoryItem(TArray<struct FInventoryStack>* Items, const struct FInventoryStack& Item);
		struct FInventoryStack STATIC_MakeInventoryStack(int32_t NumItems, const struct FInventoryItem& Item);
		struct FInventoryItem STATIC_MakeInventoryItem(class UClass* ItemClass);
		bool STATIC_IsValidItem(const struct FInventoryItem& Item);
		bool STATIC_HasState(const struct FInventoryItem& Item);
		bool STATIC_HasItems(const struct FInventoryStack& stack);
		bool STATIC_GrabAllItemsFromInventory(class UFGInventoryComponent* SourceComponent, class UFGInventoryComponent* destinationComponent, class UClass* onlyGrabOfDesc);
		void STATIC_GetUIDataPartialForInventoryStack(const struct FInventoryStack& InventoryStack, class UClass* buildableFactory, class UClass** ItemClass, float* numItemsConverted, float* maxItemsConverted);
		void STATIC_GetUIDataFullForInventoryStack(const struct FInventoryStack& InventoryStack, class UClass* buildableFactory, class UClass** ItemClass, float* numItemsConverted, float* maxItemsConverted, class FText* Suffix, EResourceForm* form);
		class FText STATIC_GetProductionSuffixFromFormType(EResourceForm form);
		int32_t STATIC_GetMinNumSlotsForItems(TArray<struct FInventoryStack>* Items);
		float STATIC_GetConversionScalarByForm(EResourceForm form);
		void STATIC_GetAmountConvertedFromItemAmount(const struct FItemAmount& ItemAmount, class UClass** ItemClass, float* amountConverted);
		float STATIC_GetAmountConvertedByForm(int32_t Amount, EResourceForm form);
		class UFGInventoryComponent* STATIC_CreateInventoryComponentOfClass(class AActor* Owner, class UClass* InClass, const class FName& Name);
		class UFGInventoryComponent* STATIC_CreateInventoryComponent(class AActor* Owner, const class FName& Name);
		void STATIC_ConsolidateItemsAmount(TArray<struct FItemAmount>* Items);
		void STATIC_ConsolidateInventoryItems(TArray<struct FInventoryStack>* Items);
		void STATIC_BreakInventoryStack(const struct FInventoryStack& stack, int32_t* out_numItems, struct FInventoryItem* out_item);
		void STATIC_BreakInventoryItem(const struct FInventoryItem& Item, class UClass** out_itemClass, class AActor** out_itemState);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInventorySettingsWidget
	 * Size -> 0x0018 (FullSize[0x0298] - InheritedSize[0x0280])
	 */
	class UFGInventorySettingsWidget : public UUserWidget
	{
	public:
		class AFGEquipment*                                        mEquipment;                                              // 0x0280(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnInventorySettingsWidgetClosed;                         // 0x0288(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGItemCategory
	 * Size -> 0x0000 (FullSize[0x0120] - InheritedSize[0x0120])
	 */
	class UFGItemCategory : public UFGCategory
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGItemDescriptorBiomass
	 * Size -> 0x0000 (FullSize[0x01A0] - InheritedSize[0x01A0])
	 */
	class UFGItemDescriptorBiomass : public UFGItemDescriptor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGItemDescriptorNuclearFuel
	 * Size -> 0x0010 (FullSize[0x01B0] - InheritedSize[0x01A0])
	 */
	class UFGItemDescriptorNuclearFuel : public UFGItemDescriptor
	{
	public:
		class UClass*                                              mSpentFuelClass;                                         // 0x01A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mAmountOfWaste;                                          // 0x01A8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EQVZ[0x4];                                   // 0x01AC(0x0004) MISSED OFFSET (PADDING)

	public:
		class UClass* STATIC_GetSpentFuelClass(class UClass* InClass);
		int32_t STATIC_GetAmountWasteCreated(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGItemPickedUpDependency
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFGItemPickedUpDependency : public UFGAvailabilityDependency
	{
	public:
		TArray<class UClass*>                                      mItems;                                                  // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       mRequireAllItemsToBePickedUp;                            // 0x0038(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZXLS[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		void GetItems(TArray<class UClass*>* out_items);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_FullInventory
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_FullInventory : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_Collecting
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_Collecting : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGItemPickup
	 * Size -> 0x0090 (FullSize[0x0388] - InheritedSize[0x02F8])
	 */
	class AFGItemPickup : public AFGStaticReplicatedActor
	{
	public:
		unsigned char                                              UnknownData_06IL[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_TUVZ[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mTimeToPickUp;                                           // 0x0310(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DBS4[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGCharacterPlayer*                                  mCollector;                                              // 0x0318(0x0008) Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FTimerHandle                                        mCollectingTimerHandle;                                  // 0x0320(0x0008) NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FInventoryStack                                     mPickupItems;                                            // 0x0328(0x0028) Edit, Net, SaveGame, RepNotify, Protected, NativeAccessSpecifierProtected
		bool                                                       mDestroyOnPickup;                                        // 0x0350(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_M3TP[0x7];                                   // 0x0351(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkComponent*                                        mSoundComponent;                                         // 0x0358(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mAudioEvent;                                             // 0x0360(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mRespawnTimeIndays;                                      // 0x0368(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mUpdatedOnDayNr;                                         // 0x036C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EItemState                                                 mItemState;                                              // 0x0370(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_963V[0x3];                                   // 0x0371(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mGrowTimeInDays;                                         // 0x0374(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mSavedNumItems;                                          // 0x0378(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mMaxRespawns;                                            // 0x037C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mNumRespawns;                                            // 0x0380(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mSendTelemetryOnPickup;                                  // 0x0384(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_INUO[0x3];                                   // 0x0385(0x0003) Fix size for supers

	public:
		void UpdateVisuals();
		void SetNumItems(int32_t NumItems);
		void RegisterToRegrowSystem();
		void PlayPickupEffect();
		void PlantPickup();
		void PickUpByCharacter(class AFGCharacterPlayer* byCharacter);
		bool PickupByAmount(int32_t Amount);
		void OnRep_StateUpdated();
		void OnRep_PickedUp();
		void OnPickup(class AFGCharacterPlayer* byCharacter);
		void Multicast_PlayPickupEffect();
		bool IsPickedUp();
		bool IsEquipment();
		int32_t GetSavedNumItems();
		int32_t GetRespawnTimeInDays();
		struct FInventoryStack GetPickupItems();
		int32_t GetNumItems();
		float GetNormalizedCollectionProgress();
		EItemState GetItemState();
		bool GetDestroyOnPickup();
		void ClearPickup();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGItemPickup_Spawnable
	 * Size -> 0x0018 (FullSize[0x03A0] - InheritedSize[0x0388])
	 */
	class AFGItemPickup_Spawnable : public AFGItemPickup
	{
	public:
		class UStaticMeshComponent*                                mMeshComponent;                                          // 0x0388(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mPlaySpawnEffect;                                        // 0x0390(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SGKI[0xF];                                   // 0x0391(0x000F) MISSED OFFSET (PADDING)

	public:
		void PlaySpawnEffect();
		void OnColorUpdated(int32_t Index);
		void STATIC_FindGroundLocationInfrontOfActor(class AActor* SourceActor, float offsetLength, const struct FInventoryStack& Item, struct FVector* out_location, struct FRotator* out_rotation);
		void STATIC_FindGroundLocationAndRotation(class UObject* WorldContext, const struct FVector& fromLocation, TArray<class AActor*> ActorsToIgnore, struct FVector* out_location, struct FRotator* out_rotation);
		void STATIC_CreateItemDropsInCylinder(class UObject* WorldContext, TArray<struct FInventoryStack> Items, const struct FVector& aroundLocation, float SphereRadius, TArray<class AActor*> ActorsToIgnore, TArray<class AFGItemPickup_Spawnable*>* out_itemDrops, class UClass* itemDropClass);
		class AFGItemPickup_Spawnable* STATIC_CreateItemDrop(class UObject* WorldContext, const struct FInventoryStack& Item, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class UClass* itemDropClass);
		class AFGItemPickup_Spawnable* STATIC_AddItemToWorldStackAtLocation(class UObject* WorldContext, const struct FInventoryStack& Item, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class UClass* itemDropClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGItemRegrowSubsystem
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class AFGItemRegrowSubsystem : public AFGSubsystem
	{
	public:
		TArray<class AFGItemPickup*>                               mPickups;                                                // 0x02F8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_K29V[0x4];                                   // 0x0308(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mMaxPerTick;                                             // 0x030C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		class AFGItemRegrowSubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGItemsManuallyCraftedDependency
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UFGItemsManuallyCraftedDependency : public UFGAvailabilityDependency
	{
	public:
		TMap<class UClass*, int32_t>                               mItemsManuallyCraftedCount;                              // 0x0028(0x0050) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGJetPack
	 * Size -> 0x00A0 (FullSize[0x0520] - InheritedSize[0x0480])
	 */
	class AFGJetPack : public AFGEquipment
	{
	public:
		class FScriptMulticastDelegate                             mOnFuelAmountChanged;                                    // 0x0480(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnBurnPercentChanged;                                   // 0x0490(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnFuelTypeChanged;                                      // 0x04A0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		float                                                      mDefaultAirControl;                                      // 0x04B0(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRTPCInterval;                                           // 0x04B4(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mThrustCooldown;                                         // 0x04B8(0x0004) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCurrentFuel;                                            // 0x04BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsThrusting;                                            // 0x04C0(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D34T[0x7];                                   // 0x04C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mFuelTypes;                                              // 0x04C8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		int32_t                                                    mSelectedFuelType;                                       // 0x04D8(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mCurrentFuelType;                                        // 0x04DC(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2NY8[0x10];                                  // 0x04E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGCharacterMovementComponent*                       mCachedMovementComponent;                                // 0x04F0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8V81[0x18];                                  // 0x04F8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mActiveNoise;                                            // 0x0510(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mActiveNoiseFrequency;                                   // 0x0518(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G3N0[0x4];                                   // 0x051C(0x0004) MISSED OFFSET (PADDING)

	public:
		void RegenerateFuel(float Delta);
		void OnStopThrusting();
		void OnStartThrusting();
		void OnInventoryChanged(class UClass* ItemClass, int32_t numAdded);
		void ConsumeFuel(float Delta);
		void ConsumableTypeIndexChanged_OnRep();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGJetPackAttachment
	 * Size -> 0x0008 (FullSize[0x0340] - InheritedSize[0x0338])
	 */
	class AFGJetPackAttachment : public AFGEquipmentAttachment
	{
	public:
		unsigned char                                              UnknownData_4IPX[0x8];                                   // 0x0338(0x0008) Fix Super Size

	public:
		void OnStopThrusting();
		void OnStartThrusting();
		void OnRep_IsThrusting();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGJetPackFuelParameters
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UFGJetPackFuelParameters : public UObject
	{
	public:
		float                                                      mThrustPower;                                            // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mVelocityZExtreme;                                       // 0x002C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mVelocityZExtremeDamper;                                 // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mJumpBeforeThrustTime;                                   // 0x0034(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFuelRegenRate;                                          // 0x0038(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFuelConsumeRate;                                        // 0x003C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mThrustCooldownDefault;                                  // 0x0040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFuelWorth;                                              // 0x0044(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxFuel;                                                // 0x0048(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mThrustAirControl;                                       // 0x004C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mFuelTypeDesc;                                           // 0x0050(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGJoinListEntry
	 * Size -> 0x0008 (FullSize[0x0288] - InheritedSize[0x0280])
	 */
	class UFGJoinListEntry : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_V2CC[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (PADDING)

	public:
		void Update(class UOnlineFriend* friendObject);
		void SelectionStateUpdate(bool selectionState);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGJumpingStilts
	 * Size -> 0x0020 (FullSize[0x04A0] - InheritedSize[0x0480])
	 */
	class AFGJumpingStilts : public AFGEquipment
	{
	public:
		class UCurveFloat*                                         mFallDamageCurveOverride;                                // 0x0480(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSprintSpeedFactor;                                      // 0x0488(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mJumpSpeedFactor;                                        // 0x048C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TYH3[0x10];                                  // 0x0490(0x0010) MISSED OFFSET (PADDING)

	public:
		float GetNormalizedFallSpeedUntilDamaged();
		float GetMaxFallSpeedBeforeDamage();
		float GetCurrentFallSpeed();
		float GetAdjustedZJumpSpeed(float defaultJumpZ);
		float GetAdjustedMaxSpeed(float defaultMaxSpeed);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGJumpingStiltsAttachment
	 * Size -> 0x0008 (FullSize[0x0340] - InheritedSize[0x0338])
	 */
	class AFGJumpingStiltsAttachment : public AFGEquipmentAttachment
	{
	public:
		unsigned char                                              UnknownData_8NNN[0x8];                                   // 0x0338(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGJumpPadHologram
	 * Size -> 0x0034 (FullSize[0x06BC] - InheritedSize[0x0688])
	 */
	class AFGJumpPadHologram : public AFGFactoryHologram
	{
	public:
		unsigned char                                              UnknownData_3I67[0x8];                                   // 0x0688(0x0008) Fix Super Size
		TArray<class AFGBuildableJumppad*>                         mNearbyJumpPads;                                         // 0x0690(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U1BM[0x1C];                                  // 0x06A0(0x001C) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGJumpPadLauncherHologram
	 * Size -> 0x0064 (FullSize[0x0720] - InheritedSize[0x06BC])
	 */
	class AFGJumpPadLauncherHologram : public AFGJumpPadHologram
	{
	public:
		int32_t                                                    mLaunchAngle;                                            // 0x06BC(0x0004) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                mLauncherMeshComponent;                                  // 0x06C0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USplineComponent*                                    mSplineComponent;                                        // 0x06C8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInstancedSplineMeshComponent*                       mTrajectorySplineMeshComponent;                          // 0x06D0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mTrajectoryMeshScale;                                    // 0x06D8(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                mDestinationMeshComponent;                               // 0x06F0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDestinationMeshHeightOffset;                            // 0x06F8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTrajectoryMeshSeparationDistance;                       // 0x06FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            mDestinationMeshRotation;                                // 0x0700(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    mNumArrows;                                              // 0x0718(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EMZU[0x4];                                   // 0x071C(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnRep_LaunchAngle();
		void OnLaunchAngleAdjusted();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLadderComponent
	 * Size -> 0x0050 (FullSize[0x0600] - InheritedSize[0x05B0])
	 */
	class UFGLadderComponent : public UBoxComponent
	{
	public:
		unsigned char                                              UnknownData_CZZQ[0x28];                                  // 0x05B0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mClimbableLookAngle;                                     // 0x05D8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mEndClimbingLookAngle;                                   // 0x05DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTimerHandle                                        mUpdateHandle;                                           // 0x05E0(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class AFGCharacterPlayer*>                          mPotentialClimbers;                                      // 0x05E8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7CU1[0x8];                                   // 0x05F8(0x0008) MISSED OFFSET (PADDING)

	public:
		void EndPotentialClimberOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void BeginPotentialClimberOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool isFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLadderHologram
	 * Size -> 0x0048 (FullSize[0x06D0] - InheritedSize[0x0688])
	 */
	class AFGLadderHologram : public AFGBuildableHologram
	{
	public:
		unsigned char                                              UnknownData_4CTA[0x4];                                   // 0x0688(0x0004) Fix Super Size
		float                                                      mWidth;                                                  // 0x068C(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMeshHeight;                                             // 0x0690(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_A6ZZ[0x4];                                   // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mPlacementPosition;                                      // 0x0698(0x0018) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mMaxSegmentCount;                                        // 0x06B0(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mTargetSegmentHeight;                                    // 0x06B4(0x0004) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mCanDragDown;                                            // 0x06B8(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mCanDragUp;                                              // 0x06B9(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_K6L2[0x6];                                   // 0x06BA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInstancedStaticMeshComponent*                       mInstancedMeshComponent;                                 // 0x06C0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ELadderHologramBuildStep                                   mBuildStep;                                              // 0x06C8(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BO53[0x7];                                   // 0x06C9(0x0007) MISSED OFFSET (PADDING)

	public:
		void OnRep_TargetSegmentHeight();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLadderTemplate
	 * Size -> 0x0000 (FullSize[0x05B0] - InheritedSize[0x05B0])
	 */
	class UFGLadderTemplate : public UBoxComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGListView
	 * Size -> 0x0770 (FullSize[0x13A0] - InheritedSize[0x0C30])
	 */
	class UFGListView : public UListView
	{
	public:
		struct FScrollBarStyle                                     mWidgetBarStyle;                                         // 0x0C30(0x0770) Edit, BlueprintVisible, NativeAccessSpecifierPublic

	public:
		class UUserWidget* GetEntryWidgetForItem(class UObject* Item);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGListViewSlot
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UFGListViewSlot : public UPanelSlot
	{
	public:
		unsigned char                                              UnknownData_1DEW[0x8];                                   // 0x0038(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGListView_JoinList
	 * Size -> 0x0010 (FullSize[0x13B0] - InheritedSize[0x13A0])
	 */
	class UFGListView_JoinList : public UFGListView
	{
	public:
		class UOnlineFriendList*                                   mFriendList;                                             // 0x13A0(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9TFK[0x8];                                   // 0x13A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void Populate();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLoadingScreen
	 * Size -> 0x0028 (FullSize[0x0178] - InheritedSize[0x0150])
	 */
	class UFGLoadingScreen : public UWidget
	{
	public:
		class FText                                                mStatusText;                                             // 0x0150(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LA86[0x10];                                  // 0x0168(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetStatusText(const class FText& InText);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLocalizationSettings
	 * Size -> 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
	 */
	class UFGLocalizationSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              mOptionsMenuLanugagesDataTable[0x30];                    // 0x0038(0x0030) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		void STATIC_GetOptionsMenuLanugagesDataTable();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEM_LoggedOutFromOnlineService
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGEM_LoggedOutFromOnlineService : public UFGErrorMessage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEM_LostConnectionWithOnlineService
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGEM_LostConnectionWithOnlineService : public UFGErrorMessage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGEM_FailedToLoginToOnlineService
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGEM_FailedToLoginToOnlineService : public UFGErrorMessage
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLocalPlayer
	 * Size -> 0x0188 (FullSize[0x0420] - InheritedSize[0x0298])
	 */
	class UFGLocalPlayer : public ULocalPlayer
	{
	public:
		unsigned char                                              UnknownData_DSFB[0x10];                                  // 0x0298(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnAccountUnlinkComplete;                                // 0x02A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnMultiplayerStatusUpdated;                             // 0x02B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_61TY[0x98];                                  // 0x02C8(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnLoginStateChanged;                                    // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnFriendsListUpdated;                                   // 0x0370(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnFriendsPresenceUpdated;                               // 0x0380(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnInviteReceived;                                       // 0x0390(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ULSQ[0x80];                                  // 0x03A0(0x0080) MISSED OFFSET (PADDING)

	public:
		void UpdatePresence();
		void TryResetAccountLinking();
		void SetNextUpdatePresenceTime(float timeTillNextUpdate);
		void ResetAccountLinkingAfterEpicLogout(const class FName& currentPlatform, EEosAccountConnectionResult Result);
		void ResetAccountLinkingAfterConnect(const class FName& currentPlatform, EEosAccountConnectionResult Result);
		void OnMaintainYAxisFOVUpdated(const class FString& updatedCvar);
		void OnComandlineInviteSearchComplete(const struct FBlueprintSessionResult& Result);
		void LogoutEpicAccountPortal();
		void LoginEpicAccountPortal();
		void LinkAccount();
		bool IsWaitingForEOSConnectLoginResponse();
		class FString GetUsernameSteam();
		class FString GetUsernameEpic();
		class FString GetUsername();
		ELoginState GetLoginStateSteam();
		ELoginState GetLoginStateEpic();
		ELoginState GetLoginState();
		bool GetFriendList(TArray<struct FFGOnlineFriend>* out_friends);
		bool GetContinueWithoutMultiplayer();
		void CheckForStartupArguments();
		void AutoLogin();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLocalSettings
	 * Size -> 0x0090 (FullSize[0x00C8] - InheritedSize[0x0038])
	 */
	class UFGLocalSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              mExtraItemsToStartWith[0x50];                            // 0x0038(0x0050) UNKNOWN PROPERTY: MapProperty
		unsigned char                                              mRecipesToStartWith[0x10];                               // 0x0088(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              mSchematicsToStartWith[0x10];                            // 0x0098(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              mSchematicsToFilterWithGiveAllSchematics[0x10];          // 0x00A8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		bool                                                       mGodMode;                                                // 0x00B8(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mEnableFly;                                              // 0x00B9(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mEnableAutoLanding;                                      // 0x00BA(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mEnableFlyGhost;                                         // 0x00BB(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mNoCost;                                                 // 0x00BC(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mNoPower;                                                // 0x00BD(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mNoFuel;                                                 // 0x00BE(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mGiveAllSchematics;                                      // 0x00BF(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mGiveCheatSchematics;                                    // 0x00C0(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EPlayerHostilityMode                                       mSetCreatureHostility;                                   // 0x00C1(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PUZR[0x6];                                   // 0x00C2(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLocalDevSettings
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UFGLocalDevSettings : public UDeveloperSettings
	{
	public:
		bool                                                       mSkipTutoialInPIE;                                       // 0x0038(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mEnableAutoSaveInPIE;                                    // 0x0039(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mTrailerMode;                                            // 0x003A(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mShowFicsitSplashWidget;                                 // 0x003B(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mDisableSaveVersionAndOfflineWarnings;                   // 0x003C(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mLocalGreedyFocusInPIE;                                  // 0x003D(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mEnableTabAndKeyNavigation;                              // 0x003E(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mShowEnhancedInputInOptionsMenu;                         // 0x003F(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLocomotive
	 * Size -> 0x00A8 (FullSize[0x06B0] - InheritedSize[0x0608])
	 */
	class AFGLocomotive : public AFGRailroadVehicle
	{
	public:
		struct FFloatInterval                                      mPowerConsumption;                                       // 0x0608(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGPowerConnectionComponent*                         mSlidingShoe;                                            // 0x0610(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGPowerInfoComponent*                               mPowerInfo;                                              // 0x0618(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasPower;                                               // 0x0620(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NVV3[0x7];                                   // 0x0621(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGLocomotiveMovementComponent*                      mVehicleMovement;                                        // 0x0628(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3ZI7[0x1];                                   // 0x0630(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		ELocomotiveHeadlightsMode                                  mHeadlightMode;                                          // 0x0631(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YYGV[0x2];                                   // 0x0632(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FHeadlightParams                                    mHeadlightModes[0x3];                                    // 0x0634(0x0048) Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GPVD[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mLocomotiveMenuWidgetClass[0x30];                        // 0x0680(0x0030) UNKNOWN PROPERTY: SoftClassProperty

	public:
		void UpdateVFX();
		bool SetMultipleUnitControlMaster(bool Force);
		void OnRep_HeadlightMode();
		void OnNameChanged();
		void OnHonkEnd();
		void OnHonkBegin();
		bool IsPossessed();
		bool IsInputEnabled();
		void Input_ThrottleAxis_Started(const struct FInputActionValue& ActionValue);
		void Input_ThrottleAxis(const struct FInputActionValue& ActionValue);
		void Input_SteerAxis(const struct FInputActionValue& ActionValue);
		void Input_OpenLocomotiveMenu(const struct FInputActionValue& ActionValue);
		void Input_Honk(const struct FInputActionValue& ActionValue);
		void Input_Handbrake(const struct FInputActionValue& ActionValue);
		void HonkShort();
		void HonkDanger();
		bool HasPower();
		class UFGPowerInfoComponent* GetPowerInfo();
		EMultipleUnitControl GetMultipleUnitRole();
		class UFGLocomotiveMovementComponent* GetLocomotiveMovementComponent();
		void ClearMultipleUnitControlMaster();
		bool CanSetTrainMultipleUnitMaster();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadVehicleMovementComponent
	 * Size -> 0x00C0 (FullSize[0x0220] - InheritedSize[0x0160])
	 */
	class UFGRailroadVehicleMovementComponent : public UPawnMovementComponent
	{
	public:
		TArray<struct FWheelsetSetup>                              mWheelsetSetups;                                         // 0x0160(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		float                                                      mWheelRadius;                                            // 0x0170(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_16RM[0x4];                                   // 0x0174(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FCouplerSetup>                               mCouplerSetups;                                          // 0x0178(0x0010) Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GBIL[0x34];                                  // 0x0188(0x0034) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mMass;                                                   // 0x01BC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxVelocity;                                            // 0x01C0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxPayloadMass;                                         // 0x01C4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mPayloadMass;                                            // 0x01C8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDragCoefficient;                                        // 0x01CC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mChassisWidth;                                           // 0x01D0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mChassisHeight;                                          // 0x01D4(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRollingResistanceCoefficient;                           // 0x01D8(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCurvatureResistanceCoefficient;                         // 0x01DC(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxAirBrakingEffort;                                    // 0x01E0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WODP[0x3C];                                  // 0x01E4(0x003C) MISSED OFFSET (PADDING)

	public:
		void SetPayloadMass(float Payload);
		bool IsMoving();
		struct FVector GetWheelsetRotation(int32_t Index);
		float GetWheelsetOffset(int32_t Index);
		float GetWheelsetAngle();
		float GetWheelRotation();
		float GetTractiveForce();
		float GetTrackGrade();
		float GetTrackCurvature();
		float GetTareMass();
		float GetRelativeForwardSpeed();
		float GetPayloadMass();
		int32_t GetNumWheelsets();
		float GetMaxTractiveEffort();
		float GetMaxPayloadMass();
		float GetMaxForwardSpeed();
		float GetMaxDynamicBrakingEffort();
		float GetMaxAirBrakingEffort();
		float GetMass();
		float GetForwardSpeed();
		float GetDynamicBrakingForce();
		struct FVector GetCouplerRotationAndExtention(int32_t Index, float* out_extention);
		float GetBrakingForce();
		float GetAirBrakingForce();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLocomotiveMovementComponent
	 * Size -> 0x0208 (FullSize[0x0428] - InheritedSize[0x0220])
	 */
	class UFGLocomotiveMovementComponent : public UFGRailroadVehicleMovementComponent
	{
	public:
		struct FReplicatedRailroadVehicleState                     mReplicatedState;                                        // 0x0220(0x0014) Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected
		int32_t                                                    mRawReverserInput;                                       // 0x0234(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mRawSteeringInput;                                       // 0x0238(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRawThrottleInput;                                       // 0x023C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRawDynamicBrakeInput;                                   // 0x0240(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRawAirBrakeInput;                                       // 0x0244(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mRawHornInput;                                           // 0x0248(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NAL4[0x3];                                   // 0x0249(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRailroadVehicleInputRate                           mThrottleInputRate;                                      // 0x024C(0x0008) Edit, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		struct FRailroadVehicleInputRate                           mDynamicBrakeInputRate;                                  // 0x0254(0x0008) Edit, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		float                                                      mDynamicBrakeVelocityThreshold;                          // 0x025C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRailroadVehicleInputRate                           mAirBrakeInputRate;                                      // 0x0260(0x0008) Edit, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected
		int32_t                                                    mReverserInput;                                          // 0x0268(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSteeringInput;                                          // 0x026C(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mThrottleInput;                                          // 0x0270(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mAirBrakeInput;                                          // 0x0274(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDynamicBrakeInput;                                      // 0x0278(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHornInput;                                              // 0x027C(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RUA0[0x3];                                   // 0x027D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  mTractiveEffortCurve;                                    // 0x0280(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EC1U[0x8];                                   // 0x0308(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeFloatCurve                                  mDynamicBrakingEffortCurve;                              // 0x0310(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mRegenerativePowerCurve;                                 // 0x0398(0x0088) Edit, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_LN2J[0x8];                                   // 0x0420(0x0008) MISSED OFFSET (PADDING)

	public:
		void UseReplicatedState();
		void SetThrottleInput(float Throttle);
		void SetSteeringInput(int32_t Steering);
		void SetReverserInput(int32_t reverser);
		void SetHornInput(bool horn);
		void SetEmergencyBrake();
		void SetAirBrakeInput(float Brake);
		void ServerUpdateState(int32_t inReverserInput, int32_t InSteeringInput, float InThrottleInput, float inDynamicBrakeInput, float inAirBrakeInput, bool inHornInput);
		float GetThrottle();
		int32_t GetReverser();
		bool GetHornInput();
		float GetDynamicBrake();
		float GetAirBrake();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGLootSettings
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGLootSettings : public UObject
	{
	public:
		class UObject* STATIC_GetLootSettingsDefaultObject(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMainMenuHUD
	 * Size -> 0x0000 (FullSize[0x0400] - InheritedSize[0x0400])
	 */
	class AFGMainMenuHUD : public AFGHUDBase
	{
	public:
		void ShowMainMenu();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMainMenuState
	 * Size -> 0x0000 (FullSize[0x0370] - InheritedSize[0x0370])
	 */
	class AFGMainMenuState : public AGameState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGManta
	 * Size -> 0x0048 (FullSize[0x0340] - InheritedSize[0x02F8])
	 */
	class AFGManta : public AActor
	{
	public:
		unsigned char                                              UnknownData_3V1O[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class USplineComponent*                                    mCachedSpline;                                           // 0x0300(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGSplinePath*                                       mSplinePath;                                             // 0x0308(0x0008) Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USkeletalMeshComponent*                              mCachedMesh;                                             // 0x0310(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F31A[0x4];                                   // 0x0318(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCurrentTime;                                            // 0x031C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mOffsetMagnitude;                                        // 0x0320(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mSecondsPerLoop;                                         // 0x0324(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U69H[0x4];                                   // 0x0328(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSignificanceRange;                                      // 0x032C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mTickTransform;                                          // 0x0330(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsClosedSplineLoop;                                     // 0x0331(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HQNC[0xE];                                   // 0x0332(0x000E) MISSED OFFSET (PADDING)

	public:
		class USplineComponent* GetSpline();
		float GetCurrentTime();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGManufacturingButton
	 * Size -> 0x0028 (FullSize[0x02A8] - InheritedSize[0x0280])
	 */
	class UFGManufacturingButton : public UUserWidget
	{
	public:
		class FScriptMulticastDelegate                             OnManufacturePressed;                                    // 0x0280(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S51W[0x18];                                  // 0x0290(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetButton(class UButton* inButton);
		void OnReleasedButton();
		void OnPressedButton();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMapArea
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UFGMapArea : public UObject
	{
	public:
		class FText                                                mDisplayName;                                            // 0x0028(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mZoneType;                                               // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FText                                                mUserSetDisplayName;                                     // 0x0048(0x0018) Protected, NativeAccessSpecifierProtected

	public:
		class UClass* STATIC_GetZoneType(class UClass* InClass);
		class FText STATIC_GetUserSetAreaDisplayName(class UClass* InClass);
		class FText STATIC_GetAreaDisplayName(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMapAreaTexture
	 * Size -> 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
	 */
	class UFGMapAreaTexture : public UObject
	{
	public:
		class UTexture2D*                                          mFogOfWarTexture;                                        // 0x0028(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<unsigned char>                                      mAreaData;                                               // 0x0030(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FColor>                                      mColorPalette;                                           // 0x0040(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FColorMapAreaPair>                           mColorToArea;                                            // 0x0050(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class AFGMinimapCaptureActor*                              mCaptureActor;                                           // 0x0060(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mDataWidth;                                              // 0x0068(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ISGE[0x1C];                                  // 0x006C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGGameState*                                        mCachedGameState;                                        // 0x0088(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnNewMapAreaVisisted(class UClass* newMapArea);
		class UTexture2D* GetFogOfWarTexture();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMapAreaZoneDescriptor
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGMapAreaZoneDescriptor : public UObject
	{
	public:
		class FString                                              mZoneType;                                               // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void GetZoneType(class FString* out_zoneType);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMapCompassSettings
	 * Size -> 0x01F8 (FullSize[0x0230] - InheritedSize[0x0038])
	 */
	class UFGMapCompassSettings : public UDeveloperSettings
	{
	public:
		TMap<ECompassViewDistance, float>                          mCompassViewDistances;                                   // 0x0038(0x0050) Edit, Config, NativeAccessSpecifierPublic
		float                                                      mLowestWorldLocation;                                    // 0x0088(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mHighestWorldLocation;                                   // 0x008C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              mMapMarkerMesh[0x30];                                    // 0x0090(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mMapMarkerMaterial[0x30];                                // 0x00C0(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		int32_t                                                    mDefaultStampIconID;                                     // 0x00F0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mMigratedBeaconIconID;                                   // 0x00F4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMapMarkerFadeOutDuration;                               // 0x00F8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMapMarkerObjectHeightOffset;                            // 0x00FC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              mHighlightedMarkerMesh[0x30];                            // 0x0100(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		struct FVector                                             mHighlightMarkerMeshScale;                               // 0x0130(0x0018) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              mHighlightedMarkerMaterial[0x30];                        // 0x0148(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mHighlightedMarkerNiagaraSystem[0x30];                   // 0x0178(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		class FText                                                mMapMarkerFailedToAddMessage;                            // 0x01A8(0x0018) Edit, Config, NativeAccessSpecifierPublic
		float                                                      mFogOfWarUpperRangeMin;                                  // 0x01C0(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mFogOfWarUpperRangeMax;                                  // 0x01C4(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mFogOfWarGradientExpandValue;                            // 0x01C8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mEnableFogOfWarRevealCalculations;                       // 0x01CC(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mEnableFogOfWarTextureUpdates;                           // 0x01CD(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mForceSingleThreadedCalculations;                        // 0x01CE(0x0001) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YW52[0x1];                                   // 0x01CF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mWorldScannableData[0x30];                               // 0x01D0(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mWorldHeightData[0x30];                                  // 0x0200(0x0030) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		class UStaticMesh* GetMapMarkerMesh();
		class UMaterialInterface* GetMapMarkerDefaultMaterial();
		class UStaticMesh* GetHighlightedMarkerMesh();
		class UMaterialInterface* GetHighlightedMarkerMaterial();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMapFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGMapFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FVector STATIC_GetWorldPosition(class AFGMinimapCaptureActor* minimapCaptureActor, const struct FVector2D& normalizedLocation);
		void STATIC_GetWorldBounds(class UObject* WorldContext, struct FVector2D* Min, struct FVector2D* Max);
		struct FVector2D STATIC_GetNormalizedPosition(class AFGMinimapCaptureActor* minimapCaptureActor, const struct FVector& WorldLocation);
		class AFGMinimapCaptureActor* STATIC_GetMinimapCaptureActor(class UObject* WorldContext);
		struct FVector2D STATIC_GetMapPosition(class AFGMinimapCaptureActor* minimapCaptureActor, const struct FVector& WorldLocation, float mapResolution);
		float STATIC_GetMapDistance(class AFGMinimapCaptureActor* minimapCaptureActor, float worldDistance, float mapResolution);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMapManager
	 * Size -> 0x0198 (FullSize[0x0490] - InheritedSize[0x02F8])
	 */
	class AFGMapManager : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_0SHF[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class FScriptMulticastDelegate                             mOnMapMarkerAdded;                                       // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnMapMarkerRemoved;                                     // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnMarkerHighlightUpdated;                               // 0x0320(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		TArray<unsigned char>                                      mFogOfWarRawData;                                        // 0x0330(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		TArray<unsigned char>                                      mClientFogOfWarBuffer;                                   // 0x0340(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FMapMarker>                                  mMapMarkers;                                             // 0x0350(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7NCF[0x10];                                  // 0x0360(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          mFogOfWarTexture;                                        // 0x0370(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2T5S[0x18];                                  // 0x0378(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGMinimapCaptureActor*                              mCachedMinimapCaptureActor;                              // 0x0390(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CBPO[0x18];                                  // 0x0398(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FFogOfWarQueuePair>                          mFogOfWarTransferQueue;                                  // 0x03B0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FMapMarkerQueuePair>                         mMapMarkerTransferQueue;                                 // 0x03C0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		class AFGActorRepresentationManager*                       mActorRepresentationManager;                             // 0x03D0(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UFGActorRepresentation*>                      mDynamicFogOfWarRevealActors;                            // 0x03D8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5LON[0x8];                                   // 0x03E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, class UHierarchicalInstancedStaticMeshComponent*> mMapMarkerComponents;                                    // 0x03F0(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<struct FHighlightedMarkerPair>                      mHighlightedMarkers;                                     // 0x0440(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3KBI[0x40];                                  // 0x0450(0x0040) MISSED OFFSET (PADDING)

	public:
		void UpdateMapMarker(const struct FMapMarker& MapMarker, bool localUpdateOnly);
		void SetMarkerHighlighted(const struct FMapMarker& MapMarker, bool highlighted);
		void RemoveMapMarker(const struct FMapMarker& MapMarker);
		void OnPlayerStateSlotDataUpdated(class AFGPlayerState* PlayerState);
		void OnActorRepresentationUpdated(class UFGActorRepresentation* actorRepresentation);
		void OnActorRepresentationRemoved(class UFGActorRepresentation* actorRepresentation);
		void OnActorRepresentationAdded(class UFGActorRepresentation* actorRepresentation);
		struct FLinearColor IsMarkerHighlighted(const struct FMapMarker& MapMarker, bool* out_IsHighlighted, bool* out_HighlightedByLocalPlayer);
		int32_t GetNumMapMarkers();
		int32_t GetMaxNumMapMarkers();
		void GetMapMarkers(TArray<struct FMapMarker>* out_mapMarkers);
		class UTexture2D* GetFogOfWarTexture();
		class AFGMapManager* STATIC_Get(class UObject* WorldContext);
		bool CanAddNewMapMarker();
		bool AddNewMapMarker(const struct FMapMarker& MapMarker, struct FMapMarker* out_NewMapMarker);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMapMarkerWrapper
	 * Size -> 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
	 */
	class UFGMapMarkerWrapper : public UObject
	{
	public:
		unsigned char                                              UnknownData_SWHE[0x58];                                  // 0x0028(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              mHitActor;                                               // 0x0080(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		struct FMapMarker GetMapMarker();
		bool GetIsNewMarker();
		class AActor* GetHitActor();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHighlightedMarker
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGHighlightedMarker : public UObject
	{
	public:
		unsigned char                                              UnknownData_ZWIL[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGActorRepresentation*                              mActorRepresentation;                                    // 0x0030(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                mStaticMeshComponent;                                    // 0x0038(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UNiagaraComponent*                                   mNiagaraComponent;                                       // 0x0040(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHighlightedMarker_Actor
	 * Size -> 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
	 */
	class UFGHighlightedMarker_Actor : public UFGHighlightedMarker
	{
	public:
		class UObject*                                             mActor;                                                  // 0x0048(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHighlightedMarker_MapMarker
	 * Size -> 0x0050 (FullSize[0x0098] - InheritedSize[0x0048])
	 */
	class UFGHighlightedMarker_MapMarker : public UFGHighlightedMarker
	{
	public:
		struct FMapMarker                                          mMapMarker;                                              // 0x0048(0x0050) SaveGame, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMapMarkerRepresentation
	 * Size -> 0x0050 (FullSize[0x0108] - InheritedSize[0x00B8])
	 */
	class UFGMapMarkerRepresentation : public UFGActorRepresentation
	{
	public:
		unsigned char                                              UnknownData_9BJX[0x50];                                  // 0x00B8(0x0050) MISSED OFFSET (PADDING)

	public:
		struct FMapMarker GetMapMarker();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMapObjectWidget
	 * Size -> 0x0020 (FullSize[0x02A0] - InheritedSize[0x0280])
	 */
	class UFGMapObjectWidget : public UUserWidget
	{
	public:
		class UFGActorRepresentation*                              mActorRepresentation;                                    // 0x0280(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGMapWidget*                                        mMapWidget;                                              // 0x0288(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAddedAfterMapOpened;                                    // 0x0290(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mFilteredVisibility;                                     // 0x0291(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_RGV2[0x6];                                   // 0x0292(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGMinimapCaptureActor*                              mMinimapCaptureActor;                                    // 0x0298(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void WhenAddedConstruct(bool markerCreatedByOwningPlayer);
		void SetHighlighted(bool highlighted);
		void OnObjectMoved(const struct FVector2D& normalizedLocation);
		void OnObjectFiltered(bool Visible);
		void OnMarkerHighlightUpdated(class UFGActorRepresentation* actorRepresentation, bool highlighted, class AFGPlayerState* PlayerState);
		void OnHighlightedUpdated(bool highlighted, bool IsHighlightedByLocalPlayer, const struct FLinearColor& Color);
		void OnActorRepresentationUpdated();
		void OnActorRepresentationFiltered(ERepresentationType representationType, bool Visible);
		struct FLinearColor IsHighlighted(bool* out_IsHighlighted, bool* out_HighlightedByLocalPlayer);
		bool CanBeHighlighted();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMapWidget
	 * Size -> 0x0020 (FullSize[0x02A0] - InheritedSize[0x0280])
	 */
	class UFGMapWidget : public UUserWidget
	{
	public:
		class UTexture2D*                                          mFogOfWarTexture;                                        // 0x0280(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UFGActorRepresentation*>                      mMapActors;                                              // 0x0288(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		class AFGActorRepresentationManager*                       mActorRepresentationManager;                             // 0x0298(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnObjectUpdatedOnMap(class UFGActorRepresentation* actorRepresentation);
		void OnObjectRemovedFromMap(class UFGActorRepresentation* actorRepresentation);
		void OnObjectAddedToMap(class UFGActorRepresentation* actorRepresentation, bool addedAfterMapOpened);
		void OnMapCentered(const struct FVector2D& normalizedWorldLocation);
		void OnActorRepresentationUpdated(class UFGActorRepresentation* actorRepresentation);
		void OnActorRepresentationRemoved(class UFGActorRepresentation* actorRepresentation);
		void OnActorRepresentationAdded(class UFGActorRepresentation* actorRepresentation);
		class UTexture2D* GetFogOfWarTexture();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMaterialEffectComponent
	 * Size -> 0x0068 (FullSize[0x0108] - InheritedSize[0x00A0])
	 */
	class UFGMaterialEffectComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_LHI4[0x28];                                  // 0x00A0(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMeshComponent*>                              mMeshes;                                                 // 0x00C8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  mMaterial;                                               // 0x00D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2ACH[0x6];                                   // 0x00E0(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mAutoDestroy;                                            // 0x00E6(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XX1R[0x1];                                   // 0x00E7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UMaterialInstanceDynamic*>                    mMids;                                                   // 0x00E8(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		TArray<struct FCachedMaterialArray>                        mOverrideMaterials;                                      // 0x00F8(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void SetMeshes(TArray<class UMeshComponent*> Meshes);
		void SetMaterialScalarParameterValue(const class FName& Name, float Value);
		void SetDuration(float Duration);
		void PreStarted();
		void OnUpdate(float DeltaTime);
		void OnStarted();
		void OnEnded();
		void GetMeshesBounds(bool onlyVisible, bool onlyColliding, struct FVector* out_origin, struct FVector* out_boxExtent);
		TArray<class UMeshComponent*> GetMeshes();
		float GetDuration();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMaterialEffect_Build
	 * Size -> 0x0088 (FullSize[0x0190] - InheritedSize[0x0108])
	 */
	class UFGMaterialEffect_Build : public UFGMaterialEffectComponent
	{
	public:
		class AActor*                                              mInstigator;                                             // 0x0108(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FItemAmount>                                 mCost;                                                   // 0x0110(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		float                                                      mSpeed;                                                  // 0x0120(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ICKP[0xC];                                   // 0x0124(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FTransform                                          mTransform;                                              // 0x0130(0x0060) IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		struct FTransform GetTransform();
		float GetSpeed();
		class AActor* GetInstigator();
		TArray<struct FItemAmount> GetCost();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMaterialFlowAnalysisFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGMaterialFlowAnalysisFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		struct FMaterialFlowGraph STATIC_PerformMaterialFlowAnalysis(TArray<class UClass*> Recipes, class AFGRecipeManager* recipeManager);
		TArray<struct FMaterialFlowNode> STATIC_GetGraphNodes(const struct FMaterialFlowGraph& Graph, int32_t Depth);
		int32_t STATIC_GetGraphDepth(const struct FMaterialFlowGraph& Graph);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMenuBase
	 * Size -> 0x0008 (FullSize[0x0288] - InheritedSize[0x0280])
	 */
	class UFGMenuBase : public UUserWidget
	{
	public:
		class UFGWidgetSwitcher*                                   mCachedOwner;                                            // 0x0280(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnMenuExitDone();
		void OnMenuExit(class UWidget* prevMenu, bool noAnimation);
		void OnMenuEnterDone();
		void OnMenuEnter(class UWidget* prevMenu);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMessage
	 * Size -> 0x00A0 (FullSize[0x00D0] - InheritedSize[0x0030])
	 */
	class UFGMessage : public UPrimaryDataAsset
	{
	public:
		class FText                                                mTitle;                                                  // 0x0030(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       mCanMessageBeRepeated;                                   // 0x0048(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_3D8X[0x7];                                   // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGAvailabilityDependency*                           mTrigger;                                                // 0x0050(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                mMessage;                                                // 0x0058(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              mSenderClass[0x30];                                      // 0x0070(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		TArray<struct FMessageDialogue>                            mDialogueData;                                           // 0x00A0(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      mSubtitleTimeMultiplier;                                 // 0x00B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_48Z1[0x4];                                   // 0x00B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                mOverrideText;                                           // 0x00B8(0x0018) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMessagePlayedDependency
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGMessagePlayedDependency : public UFGAvailabilityDependency
	{
	public:
		TArray<class UClass*>                                      mMessages;                                               // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		void GetMessages(TArray<class UClass*>* out_messages);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMessageSender
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UFGMessageSender : public UObject
	{
	public:
		class FText                                                mSenderName;                                             // 0x0028(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FText                                                mSenderMail;                                             // 0x0040(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UTexture2D*                                          mTexture;                                                // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        mSenderColor;                                            // 0x0060(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class UObject* STATIC_GetSenderDefaultObject(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMigratedActorsList
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGMigratedActorsList : public UObject
	{
	public:
		TArray<struct FMigratedActorFromTo>                        mMigratedActorData;                                      // 0x0028(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic

	public:
		bool STATIC_AddMigratedActor(class UClass* InClass, class FString* FromLevel, class FString* ToLevel, class FString* ActorName);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMigrationSettings
	 * Size -> 0x0090 (FullSize[0x00C8] - InheritedSize[0x0038])
	 */
	class UFGMigrationSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              mSchematicPurchasedDependencyClass[0x30];                // 0x0038(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mItemPickedUpDependencyClass[0x30];                      // 0x0068(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mResearchTreeUnlockedDependencyClass[0x30];              // 0x0098(0x0030) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHeightWaterUserData
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGHeightWaterUserData : public UAssetUserData
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHeightFoliageUserData
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGHeightFoliageUserData : public UAssetUserData
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGHeightHideUserData
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGHeightHideUserData : public UAssetUserData
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMinimapCaptureActor
	 * Size -> 0x0010 (FullSize[0x0320] - InheritedSize[0x0310])
	 */
	class AFGMinimapCaptureActor : public ASceneCapture2D
	{
	public:
		class UFGMapAreaTexture*                                   mMapAreaTexture;                                         // 0x0310(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QWJO[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (PADDING)

	public:
		class UFGMapAreaTexture* GetMapAreaTexture();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMultiplayerVerticalBox
	 * Size -> 0x0000 (FullSize[0x0178] - InheritedSize[0x0178])
	 */
	class UFGMultiplayerVerticalBox : public UVerticalBox
	{
	public:
		void Sort();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGMusicManager
	 * Size -> 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
	 */
	class UFGMusicManager : public UObject
	{
	public:
		float                                                      mUpdateInterval;                                         // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFactoryCloseDistance;                                   // 0x002C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasPlayerAlreadyVisitedArea;                            // 0x0030(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UX45[0x7];                                   // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSoftClassPath                                      mMusicManagerClassName;                                  // 0x0038(0x0020) ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FMVJ[0x10];                                  // 0x0058(0x0010) MISSED OFFSET (PADDING)

	public:
		void Stop();
		void SetSwitch(class UAkSwitchValue* SwitchValue, const class FString& SwitchGroup, const class FString& SwitchState);
		void SetRTPCValue(class UAkRtpc* RTPCValue, float Value, int32_t InterpolationTimeMs, const class FString& RTPC);
		void PostEvent(class UAkAudioEvent* AkEvent, int32_t CallbackMask, const class FScriptDelegate& PostEventCallback);
		void Play();
		void Pause();
		void OnPlayerNearBaseChanged(bool isNear);
		void OnPlayerEnteredArea(class AFGPlayerControllerBase* PlayerController, class UClass* mapArea);
		void OnCombatStatusChanged(bool inCombat);
		void NotifyInit(class UWorld* loadedWorld, class AWorldSettings* WorldSettings);
		bool IsInCombat();
		class UFGMusicManager* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGNavArea_Factory
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGNavArea_Factory : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGNavArea_HardNature
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGNavArea_HardNature : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGNavArea_Water
	 * Size -> 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
	 */
	class UFGNavArea_Water : public UNavArea
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGNetConstructionFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGNetConstructionFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSessionLookupClient
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGSessionLookupClient : public UInterface
	{
	public:
		void OnSessionNotFound();
		void OnSessionLookupProgress(ESessionLookupState State);
		void OnSessionLookupDone();
		void OnSessionFound(const struct FBlueprintSessionResult& Result);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSessionLookup
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UFGSessionLookup : public UObject
	{
	public:
		unsigned char                                              mClient[0x10];                                           // 0x0028(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		class UObject*                                             mWorldContext;                                           // 0x0038(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGLocalPlayer*                                      mLocalPlayer;                                            // 0x0040(0x0008) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              mSearchQuery;                                            // 0x0048(0x0010) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FOXH[0x8];                                   // 0x0058(0x0008) MISSED OFFSET (PADDING)

	public:
		bool StartLookup();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPresenceLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGPresenceLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_NetIdHasValidPresence(class UObject* WorldContext, const struct FUniqueNetIdRepl& NetId);
		bool STATIC_IsValid_OnlinePresence(const struct FOnlinePresence& A);
		bool STATIC_IsPlayingThisGame(const struct FOnlinePresence& Presence);
		bool STATIC_IsPlayingOtherGame(const struct FOnlinePresence& Presence);
		bool STATIC_IsOnline(const struct FOnlinePresence& Presence);
		class FString STATIC_GetSessionIDFromPresence(const struct FOnlinePresence& Presence);
		class FString STATIC_GetPresenceString(const struct FOnlinePresence& Presence);
		struct FOnlinePresence STATIC_GetPresenceFromNetId(class UObject* WorldContext, const struct FUniqueNetIdRepl& NetId);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGFriendsLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGFriendsLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_IsWaitingForData(class ULocalPlayer* friendOf, const struct FFGOnlineFriend& OnlineFriend);
		bool STATIC_IsValid_Friend(const struct FFGOnlineFriend& A);
		struct FUniqueNetIdRepl STATIC_GetFriendUniqueNetId(const struct FFGOnlineFriend& OnlineFriend);
		bool STATIC_GetFriendName(class ULocalPlayer* friendOf, const struct FFGOnlineFriend& OnlineFriend, class FString* out_displayName);
		struct FFGOnlineFriend STATIC_GetFriendFromNetId(class ULocalPlayer* friendOf, const struct FUniqueNetIdRepl& NetId);
		bool STATIC_EqualEqual_FriendFriend(const struct FFGOnlineFriend& A, const struct FFGOnlineFriend& B);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSessionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGSessionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_QuerySessionByID(class ULocalPlayer* LocalPlayer, const class FString& sessionOnlineID, const class FScriptDelegate& OnComplete);
		void STATIC_JoinSession(class APlayerController* Player, const struct FCommonSession& Session);
		bool STATIC_IsSessionValid(const struct FCommonSession& Session);
		ECantJoinReason STATIC_IsSessionJoinable(class UObject* WorldContext, const struct FCommonSession& Session);
		bool STATIC_IsInGameSession(class ULocalPlayer* LocalPlayer);
		ESessionVisibility STATIC_GetSessionVisibility(class UObject* WorldContext, const struct FCommonSession& Session);
		struct FFGOnlineSessionSettings STATIC_GetSessionSettingsForSession(class UObject* WorldContext, const struct FCommonSession& Session);
		class FString STATIC_GetSessionId(class UWorld* WorldContext, const struct FCommonSession& Session);
		void STATIC_GetPlayersInMySession(class ULocalPlayer* LocalPlayer, TArray<struct FUniqueNetIdRepl>* out_playersInSession);
		struct FCommonSession STATIC_GetMySession(class ULocalPlayer* LocalPlayer);
		int32_t STATIC_GetMaxNumberOfPlayers(class UObject* WorldContext, const struct FCommonSession& Session);
		bool STATIC_CheckIsCompatibleVersion(const struct FFGOnlineSessionSettings& Session);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGInviteLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGInviteLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_SendInviteToFriend(class ULocalPlayer* fromPlayer, const struct FFGOnlineFriend& toFriend);
		void STATIC_JoinInvite(class UObject* WorldContext, const struct FPendingInvite& invite);
		struct FBlueprintSessionResult STATIC_GetSessionFromInvite(const struct FPendingInvite& invite);
		void STATIC_GetPendingInvites(class UObject* WorldContext, TArray<struct FPendingInvite>* out_invites);
		struct FUniqueNetIdRepl STATIC_GetInviteSenderUniqueNetId(const struct FPendingInvite& invite);
		struct FPendingInvite STATIC_GetInviteFromSender(class UObject* WorldContext, const struct FUniqueNetIdRepl& Sender);
		void STATIC_DiscardInvite(class UObject* WorldContext, const struct FPendingInvite& invite);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGNetworkLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGNetworkLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_SubmitFeedback(const struct FUserFeedbackFrontEndData& frontEndFeedbackData, class APlayerController* PlayerController);
		void STATIC_QueryNATType(class UObject* WorldContext);
		bool STATIC_OpenWebURL(const class FString& URL);
		class FText STATIC_NATTypeToText(ECachedNATType NATType);
		bool STATIC_IsValid_UniqueNetId(const struct FUniqueNetIdRepl& A);
		ENetIdType STATIC_GetUniqueNetIdType(const struct FUniqueNetIdRepl& NetId);
		struct FUniqueNetIdRepl STATIC_GetUniqueID(class UFGLocalPlayer* LocalPlayer);
		bool STATIC_GetNameFromUniqueNetId(class ULocalPlayer* Querier, const struct FUniqueNetIdRepl& NetId, class FString* out_name);
		class FString STATIC_GetLocalBuildVersion();
		ECachedNATType STATIC_GetCachedNATType(class UObject* WorldContext);
		bool STATIC_EqualEqual_NetIdNetId(const struct FUniqueNetIdRepl& A, const struct FUniqueNetIdRepl& B);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGNewsFeedActor
	 * Size -> 0x0058 (FullSize[0x0350] - InheritedSize[0x02F8])
	 */
	class AFGNewsFeedActor : public AActor
	{
	public:
		class FScriptMulticastDelegate                             mOnNewsReceived;                                         // 0x02F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FText                                                mNewFeedText;                                            // 0x0308(0x0018) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class FText                                                mNewsFeedRequestFailedText;                              // 0x0320(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<struct FNewsFeedMap>                                mNewsFeedURLs;                                           // 0x0338(0x0010) ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3AJY[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGNoise
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UFGNoise : public UPrimaryDataAsset
	{
	public:
		float                                                      mMaxRange;                                               // 0x0030(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLoudness;                                               // 0x0034(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void STATIC_MakeNoiseOfType(class UClass* noiseClass, class AActor* Actor, const struct FVector& NoiseLocation);
		void MakeNoiseForActor(class AActor* Actor, const struct FVector& NoiseLocation);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGNoneDescriptor
	 * Size -> 0x0000 (FullSize[0x01A0] - InheritedSize[0x01A0])
	 */
	class UFGNoneDescriptor : public UFGItemDescriptor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGNotificationSettings
	 * Size -> 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
	 */
	class UFGNotificationSettings : public UDeveloperSettings
	{
	public:
		TArray<float>                                              mAutoSaveNotificationTimings;                            // 0x0038(0x0010) Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGObjectScanner
	 * Size -> 0x0080 (FullSize[0x0500] - InheritedSize[0x0480])
	 */
	class AFGObjectScanner : public AFGEquipment
	{
	public:
		class USkeletalMeshComponent*                              mScannerSkeletalMesh;                                    // 0x0480(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mBeepDelayMax;                                           // 0x0488(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mBeepDelayMin;                                           // 0x048C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDetectionRange;                                         // 0x0490(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mUpdateClosestObjectTime;                                // 0x0494(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              mClosestObject;                                          // 0x0498(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mClosestObjectInScanRange;                               // 0x04A0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IWZW[0x3];                                   // 0x04A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mNormalizedDistanceToClosestObject;                      // 0x04A4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mAngleToClosestObject;                                   // 0x04A8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_80K0[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mScannerMenuWidgetClass;                                 // 0x04B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  mScreenMaterial3P;                                       // 0x04B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  mScreenMaterial1P;                                       // 0x04C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGInteractWidget*                                   mScannerMenuWidget;                                      // 0x04C8(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UMaterialInstanceDynamic*                            mScreenMaterialInstance;                                 // 0x04D0(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCanvasRenderTarget2D*                               mScreenCanvasRenderTarget2D;                             // 0x04D8(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mCurrentScannableDescriptor;                             // 0x04E0(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_R5L3[0x18];                                  // 0x04E8(0x0018) MISSED OFFSET (PADDING)

	public:
		void SetScannableDescriptor(class UClass* newScannableDescriptor, EFGScannerCycleDirection cycleDirection);
		void Server_SetScannableDescriptor(class UClass* newScannableDescriptor, EFGScannerCycleDirection cycleDirection);
		void PlayCycleAnimation(EFGScannerCycleDirection cycleDirection);
		void PaintScannerScreen(class UCanvas* Canvas, int32_t Width, int32_t Height);
		void OnRep_CurrentScannableDescriptor();
		void OnRep_ClosestObject();
		void Multicast_PlayCycleAnimation(EFGScannerCycleDirection cycleDirection);
		void Multicast_PlayBeepAnimation();
		void K2_PlayScannerBeepVFX();
		void K2_OnScannableResourceChanged();
		void K2_OnClosestObjectStateChanged();
		bool HasValidCurrentDetails();
		class UClass* GetCurrentScannableDescriptor();
		void GetAvailableScannableDescriptors(TArray<class UClass*>* out_availableDescriptors);
		bool CycleForward();
		bool CycleBackward();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGOnlineBlueprintFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGOnlineBlueprintFunctionLibrary : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGOnlineSessionClient
	 * Size -> 0x00C0 (FullSize[0x02A0] - InheritedSize[0x01E0])
	 */
	class UFGOnlineSessionClient : public UOnlineSessionClient
	{
	public:
		class FScriptMulticastDelegate                             mOnCreateSessionStateChanged;                            // 0x01E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_QOA3[0xB0];                                  // 0x01F0(0x00B0) MISSED OFFSET (PADDING)

	public:
		void OpenMap_WaitForProductUserId();
		void OpenMap_WaitForPresence();
		ECreateSessionState GetCurrentCreateSessionState();
		void CreateOfflineSession_SetupServer(bool startOffline);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGOnlineStartupScreen
	 * Size -> 0x0020 (FullSize[0x02A0] - InheritedSize[0x0280])
	 */
	class UFGOnlineStartupScreen : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_OFRC[0x20];                                  // 0x0280(0x0020) MISSED OFFSET (PADDING)

	public:
		void PromptUserForOnlineIntegrationMode();
		void OnProgressUpdate(const class FText& DescriptionText);
		void OnlineIntegrationModeSelected(EOnlineIntegrationMode OnlineIntegrationMode);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGOptimizationSettings
	 * Size -> 0x00F0 (FullSize[0x0128] - InheritedSize[0x0038])
	 */
	class UFGOptimizationSettings : public UDeveloperSettings
	{
	public:
		TMap<EDistanceCullCategory, struct FCullSettings>          mCullDistances;                                          // 0x0038(0x0050) Edit, Config, NativeAccessSpecifierPublic
		unsigned char                                              mMaterialSwapList[0x50];                                 // 0x0088(0x0050) UNKNOWN PROPERTY: MapProperty
		unsigned char                                              UnknownData_IHBN[0x50];                                  // 0x00D8(0x0050) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGOptionInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGOptionInterface : public UInterface
	{
	public:
		void UnsubscribeToDynamicOptionUpdate(const class FString& cvar, const class FScriptDelegate& OptionUpdatedDelegate);
		void UnsubscribeToAllDynamicOptionUpdate(class UObject* BoundObject);
		void SubscribeToDynamicOptionUpdate(const class FString& cvar, const class FScriptDelegate& OptionUpdatedDelegate);
		void SetIntOptionValue(const class FString& cvar, int32_t NewValue);
		void SetFloatOptionValue(const class FString& cvar, float NewValue);
		void SetBoolOptionValue(const class FString& cvar, bool Value);
		void ResetAllSettingsToDefault();
		void ResetAllSettingsInCategory(class UClass* Category, class UClass* SubCategory);
		bool HasPendingApplyOptionValue(const class FString& cvar);
		bool HasAnyUnsavedOptionValueChanges();
		bool HasAnyPendingRestartOptionValue(const class FString& cvar);
		bool GetRequireSessionRestart();
		bool GetRequireGameRestart();
		int32_t GetIntUIDisplayValue(const class FString& cvar);
		int32_t GetIntOptionValue(const class FString& cvar);
		float GetFloatUIDisplayValue(const class FString& cvar);
		float GetFloatOptionValue(const class FString& cvar);
		TArray<struct FUserSettingCategoryMapping> GetCategorizedSettingWidgets(class UObject* WorldContext, class UUserWidget* owningWidget);
		bool GetBoolUIDisplayValue(const class FString& cvar);
		bool GetBoolOptionValue(const class FString& cvar);
		void ApplyChanges();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGOptionsLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGOptionsLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGOptionsSettings
	 * Size -> 0x01B0 (FullSize[0x01E8] - InheritedSize[0x0038])
	 */
	class UFGOptionsSettings : public UDeveloperSettings
	{
	public:
		TMap<EOptionType, class UClass*>                           mOptionTypeWidgetsClasses;                               // 0x0038(0x0050) Edit, Config, UObjectWrapper, NativeAccessSpecifierPublic
		class UClass*                                              mDropDownWidgetClass;                                    // 0x0088(0x0008) Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mOptionRowWidgetClass;                                   // 0x0090(0x0008) Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              mHologramColourParameterCollection[0x30];                // 0x0098(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		TMap<int32_t, float>                                       mVideoQualityBenchmarkMapping;                           // 0x00C8(0x0050) Edit, Config, NativeAccessSpecifierPublic
		unsigned char                                              mVideoQualityCategory[0x30];                             // 0x0118(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mPlayerRebindableMappingContexts[0x10];                  // 0x0148(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              mCtrlInputAction[0x30];                                  // 0x0158(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mShiftInputAction[0x30];                                 // 0x0188(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mAltInputAction[0x30];                                   // 0x01B8(0x0030) UNKNOWN PROPERTY: SoftObjectProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGOptionsValueController
	 * Size -> 0x00C8 (FullSize[0x0348] - InheritedSize[0x0280])
	 */
	class UFGOptionsValueController : public UUserWidget
	{
	public:
		struct FOptionRowData                                      mOptionRowData;                                          // 0x0280(0x00A0) BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class UFGUserSetting*                                      mUserSetting;                                            // 0x0320(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsDynamicOption;                                        // 0x0328(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AROA[0x7];                                   // 0x0329(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGDynamicOptionsRow*                                mParentOptionRow;                                        // 0x0330(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              mOptionInterface[0x10];                                  // 0x0338(0x0010) UNKNOWN PROPERTY: InterfaceProperty

	public:
		bool ShouldBeClickable();
		void OnRowUnhovered();
		void OnRowHovered();
		void OnOptionValueUpdated();
		void OnOptionReverted();
		void OnOptionClicked();
		void OnOptionApplied();
		void OnInitValueController();
		bool IsPendingRestart();
		bool IsPendingApply();
		bool IsOptionEditable();
		struct FOptionRowData GetOptionRowData();
		void GetOptionInterface();
		class FText GetCurrentSelectionText();
		bool GetBoolOptionValue();
		bool ChangeSelection(const class FText& currentKey, bool incrementSelection);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGOutlineComponent
	 * Size -> 0x0030 (FullSize[0x02D0] - InheritedSize[0x02A0])
	 */
	class UFGOutlineComponent : public USceneComponent
	{
	public:
		class UStaticMeshComponent*                                mOutlineProxy;                                           // 0x02A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AActor*                                              mActiveOutlineActor;                                     // 0x02A8(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      mActiveMultiOutlineActors;                               // 0x02B0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NQDH[0x10];                                  // 0x02C0(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateProxyOutlineMesh(class UStaticMesh* newOutlineMesh);
		void UpdateProxyOutlineLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
		void ShowProxyOutline(class UStaticMesh* outlineMesh, const struct FTransform& Transform, EOutlineColor Color);
		void ShowOutline(class AActor* actorToOutline, EOutlineColor Color);
		void ShowMultiActorOutline(TArray<class AActor*> actorsToOutline, EOutlineColor Color);
		bool IsOutlineVisible();
		void HideOutline();
		EOutlineColor GetOutlineColor();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGOverflowDescriptor
	 * Size -> 0x0000 (FullSize[0x01A0] - InheritedSize[0x01A0])
	 */
	class UFGOverflowDescriptor : public UFGItemDescriptor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGParachuteSettings
	 * Size -> 0x0020 (FullSize[0x0050] - InheritedSize[0x0030])
	 */
	class UFGParachuteSettings : public UDataAsset
	{
	public:
		float                                                      mMinimumVelocityForDeploy;                               // 0x0030(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mTerminalVelocityMultiplier;                             // 0x0034(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mLateralToTerminalConversionRatio;                       // 0x0038(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mStrafeMaxSpeed;                                         // 0x003C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mShiftStrafeMaxSpeed;                                    // 0x0040(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mBrakingDeceleration;                                    // 0x0044(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mBrakingExponent;                                        // 0x0048(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HSCM[0x4];                                   // 0x004C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGParachute
	 * Size -> 0x0020 (FullSize[0x04A0] - InheritedSize[0x0480])
	 */
	class AFGParachute : public AFGEquipment
	{
	public:
		class UFGParachuteSettings*                                mParachuteSettings;                                      // 0x0480(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mUseDistanceOverride;                                    // 0x0488(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsDeployed;                                             // 0x048C(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C46L[0x13];                                  // 0x048D(0x0013) MISSED OFFSET (PADDING)

	public:
		void Server_StopDeploy();
		void Server_Deploy();
		void OnRep_IsDeployed();
		void OnDeployStop();
		void OnDeployed();
		bool IsDeployed();
		void Client_NotifyDeployFailed();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPassengerSeat
	 * Size -> 0x0010 (FullSize[0x03F0] - InheritedSize[0x03E0])
	 */
	class AFGPassengerSeat : public AFGDriveablePawn
	{
	public:
		class AFGVehicle*                                          mOuterVehicle;                                           // 0x03E0(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MDJZ[0x8];                                   // 0x03E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UpdateCamera();
		class AFGVehicle* GetOuterVehicle();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPassthroughHologram
	 * Size -> 0x0038 (FullSize[0x06C0] - InheritedSize[0x0688])
	 */
	class AFGPassthroughHologram : public AFGFactoryHologram
	{
	public:
		unsigned char                                              UnknownData_TCQ8[0x8];                                   // 0x0688(0x0008) Fix Super Size
		float                                                      mSnappedBuildingThickness;                               // 0x0690(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_TGPU[0x4];                                   // 0x0694(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UStaticMeshComponent*>                        mMeshComponents;                                         // 0x0698(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class AFGBuildableFoundation*>                      mSnappedFoundations;                                     // 0x06A8(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HE1P[0x8];                                   // 0x06B8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPassthroughPipeBaseHologram
	 * Size -> 0x0000 (FullSize[0x06C0] - InheritedSize[0x06C0])
	 */
	class AFGPassthroughPipeBaseHologram : public AFGPassthroughHologram
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPassthroughPipeHyperHologram
	 * Size -> 0x0000 (FullSize[0x06C0] - InheritedSize[0x06C0])
	 */
	class AFGPassthroughPipeHyperHologram : public AFGPassthroughPipeBaseHologram
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPhotoModeManager
	 * Size -> 0x00A8 (FullSize[0x03A0] - InheritedSize[0x02F8])
	 */
	class AFGPhotoModeManager : public AFGSubsystem
	{
	public:
		class FScriptMulticastDelegate                             mOnSequencePlayUpdated;                                  // 0x02F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnSequencePlayStarted;                                  // 0x0308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnSequencePlayEnded;                                    // 0x0318(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AFGCharacterPlayer*                                  mCachedPlayer;                                           // 0x0328(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGPlayerController*                                 mCachedPlayerController;                                 // 0x0330(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_PA2F[0x68];                                  // 0x0338(0x0068) MISSED OFFSET (PADDING)

	public:
		void SetCurrentSequenceStart(const struct FFrameTime& newStart);
		void SetCurrentSequenceEnd(const struct FFrameTime& newEnd);
		void RemovePlayerRotation(const struct FFrameTime& FrameTime);
		void RemovePlayerLocation(const struct FFrameTime& FrameTime);
		void RemovePlayerFOV(const struct FFrameTime& FrameTime);
		void PlaySequence();
		bool IsAdvancedPhotoModeAvailable();
		struct FRotator GetRotationAtFrame(const struct FFrameTime& Time);
		struct FVector GetLocationAtFrame(const struct FFrameTime& Time);
		float GetFOVAtFrame(const struct FFrameTime& Time);
		struct FFrameTime GetCurrentSequenceStart();
		struct FFrameTime GetCurrentSequenceEnd();
		struct FFGSequence GetCurrentSequence();
		class AFGPhotoModeManager* STATIC_Get(class UObject* WorldContext);
		void EvaluateFrameDry(const struct FFrameTime& Time, struct FVector* out_location, struct FRotator* out_rotation, float* out_FOV);
		void EvaluateFrame(const struct FFrameTime& Time, struct FVector* out_location, struct FRotator* out_rotation, float* out_FOV);
		void ClearSequence();
		void AddCurrentPlayerRotation(const struct FFrameTime& FrameTime);
		void AddCurrentPlayerLocation(const struct FFrameTime& FrameTime);
		void AddCurrentPlayerLocAndRot(const struct FFrameTime& FrameTime);
		void AddCurrentPlayerFOV(const struct FFrameTime& FrameTime);
		void AddCurrentPlayerAllValues(const struct FFrameTime& FrameTime);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPhotoModeWidget
	 * Size -> 0x0000 (FullSize[0x02E8] - InheritedSize[0x02E8])
	 */
	class UFGPhotoModeWidget : public UFGInteractWidget
	{
	public:
		void ToggleSequencer();
		void TogglePhotoModeDebug();
		void ToggleMouseControl();
		void ToggleAdvancedPhotoMode();
		void TakePhoto();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPillarHologram
	 * Size -> 0x0068 (FullSize[0x06F0] - InheritedSize[0x0688])
	 */
	class AFGPillarHologram : public AFGBuildableHologram
	{
	public:
		class UStaticMeshComponent*                                mMeshComponent;                                          // 0x0688(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UInstancedStaticMeshComponent*                       mInstancedMeshComponent;                                 // 0x0690(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mForceVerticalSnapThreshold;                             // 0x0698(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mMaxZoop;                                                // 0x069C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mCurrentZoop;                                            // 0x06A0(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8IVB[0x36];                                  // 0x06A4(0x0036) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EPillarHologramBuildStep                                   mBuildStep;                                              // 0x06DA(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DPHE[0x5];                                   // 0x06DB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mBuildModeZoop;                                          // 0x06E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2FYK[0x8];                                   // 0x06E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_CurrentZoop();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeAttachmentHologram
	 * Size -> 0x0084 (FullSize[0x070C] - InheritedSize[0x0688])
	 */
	class AFGPipeAttachmentHologram : public AFGFactoryHologram
	{
	public:
		class UClass*                                              mBasePipeClass;                                          // 0x0688(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mPipeAttachmentInterfaceClass;                           // 0x0690(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPipeAttachmentBuildStep                                   mBuildStep;                                              // 0x0698(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FVUX[0x3];                                   // 0x0699(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mMaxValidTurnOffset;                                     // 0x069C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaxValidTurnAngle;                                      // 0x06A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EAxis                                                      mRotationAxis;                                           // 0x06A4(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIncrementSnappedConnectionOnScroll;                     // 0x06A5(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H2J9[0x2];                                   // 0x06A6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           mWallSnapOffset;                                         // 0x06A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasPipeRotationBuildStep;                               // 0x06B8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_R4QX[0x1F];                                  // 0x06B9(0x001F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildablePipeBase*                                mSnappedPipe;                                            // 0x06D8(0x0008) Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGPipeConnectionComponentBase*>              mPipeConnectionComponents;                               // 0x06E0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GOZJ[0x8];                                   // 0x06F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPipeConnectionComponentBase*                      mSnappedConnectionComponent;                             // 0x06F8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E1C4[0xC];                                   // 0x0700(0x000C) Fix size for supers

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeAttachmentSnapTargetInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGPipeAttachmentSnapTargetInterface : public UInterface
	{
	public:
		bool IsValidSnapTargetForAttachment(class UClass* attachmentClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeBuilder
	 * Size -> 0x0198 (FullSize[0x0740] - InheritedSize[0x05A8])
	 */
	class AFGPipeBuilder : public AFGVehicle
	{
	public:
		class UFloatingPawnMovement*                               mMovementComponent;                                      // 0x05A8(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     mPipeSupportLocation;                                    // 0x05B0(0x0008) Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGSplineHologram*                                   mSplineHologram;                                         // 0x05B8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGPipelineSupportHologram*                          mSupportHologram;                                        // 0x05C0(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mCurrentSplineSupportRecipeClass;                        // 0x05C8(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mCurrentSplineRecipeClass;                               // 0x05D0(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildablePipelineSupport*                         mInternalSplineSupport;                                  // 0x05D8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FHitResult                                          mHitResult;                                              // 0x05E0(0x00E8) IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FP9O[0x3C];                                  // 0x06C8(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mMoveTime;                                               // 0x0704(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         mHeightCurve;                                            // 0x0708(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mTrailClass;                                             // 0x0710(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGPipeBuilderTrail*                                 mTrail;                                                  // 0x0718(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FSplineSupportPair>                          mSplineAndSupportData;                                   // 0x0720(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IF3F[0x8];                                   // 0x0730(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mTrailDistance;                                          // 0x0738(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UFTY[0x4];                                   // 0x073C(0x0004) MISSED OFFSET (PADDING)

	public:
		void SpawnHolograms();
		void SetupSplineAndSupport();
		void SetRecipeFromIndex(int32_t newIndex);
		void SetHologramsActive(bool IsActive);
		void Server_UpdateHitResult(const struct FHitResult& inHitResult);
		void Server_SecondaryFire();
		void Server_PrimaryFire();
		void OnSecondaryFirePressed();
		void OnPrimaryFirePressed();
		class AFGPipeBuilderTrail* GetTrail();
		int32_t GetRecipeIndex();
		class USceneComponent* GetPipeSupportLocation();
		void ClearSplineAndSupport();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeBuilderTrail
	 * Size -> 0x0038 (FullSize[0x0330] - InheritedSize[0x02F8])
	 */
	class AFGPipeBuilderTrail : public AActor
	{
	public:
		TArray<class AFGBuildablePipeline*>                        mPipesToTraverse;                                        // 0x02F8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		class AFGBuildablePipeline*                                mCurrentPipeline;                                        // 0x0308(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USplineComponent*                                    mSpline;                                                 // 0x0310(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GC5B[0x8];                                   // 0x0318(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSpeed;                                                  // 0x0320(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MWTI[0xC];                                   // 0x0324(0x000C) MISSED OFFSET (PADDING)

	public:
		void EffectDone();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeConnectionComponentBase
	 * Size -> 0x0018 (FullSize[0x02C0] - InheritedSize[0x02A8])
	 */
	class UFGPipeConnectionComponentBase : public UFGConnectionComponent
	{
	public:
		unsigned char                                              UnknownData_QG70[0x4];                                   // 0x02A8(0x0004) Fix Super Size
		float                                                      mConnectorClearance;                                     // 0x02AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGPipeConnectionComponentBase*                      mConnectedComponent;                                     // 0x02B0(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mDisallowSnappingTo;                                     // 0x02B8(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HGSY[0x7];                                   // 0x02B9(0x0007) MISSED OFFSET (PADDING)

	public:
		bool IsConnected();
		float GetConnectorClearance();
		class UFGPipeConnectionComponentBase* GetConnection();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeConnectionComponent
	 * Size -> 0x0040 (FullSize[0x0300] - InheritedSize[0x02C0])
	 */
	class UFGPipeConnectionComponent : public UFGPipeConnectionComponentBase
	{
	public:
		class UFGInventoryComponent*                               mConnectionInventory;                                    // 0x02C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mInventoryAccessIndex;                                   // 0x02C8(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mPipeNetworkID;                                          // 0x02CC(0x0004) Edit, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mFluidDescriptor;                                        // 0x02D0(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3BA2[0x28];                                  // 0x02D8(0x0028) MISSED OFFSET (PADDING)

	public:
		void OnRep_FluidDescriptor();
		class UFGPipeConnectionComponent* GetPipeConnection();
		int32_t Factory_PushPipeOutput(float dt, const struct FInventoryStack& stack);
		bool Factory_PullPipeInput(float dt, struct FInventoryStack* out_stack, class UClass* Type, int32_t maxQuantity);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeConnectionComponentHyper
	 * Size -> 0x0000 (FullSize[0x02C0] - InheritedSize[0x02C0])
	 */
	class UFGPipeConnectionComponentHyper : public UFGPipeConnectionComponentBase
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeConnectionFactory
	 * Size -> 0x0070 (FullSize[0x0370] - InheritedSize[0x0300])
	 */
	class UFGPipeConnectionFactory : public UFGPipeConnectionComponent
	{
	public:
		struct FFluidBox                                           mFluidBox;                                               // 0x0300(0x005C) SaveGame, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      mFluidBoxVolume;                                         // 0x035C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mApplyAdditionalPressure;                                // 0x0360(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_B0HY[0xF];                                   // 0x0361(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeHyperAttachmentHologram
	 * Size -> 0x0004 (FullSize[0x0710] - InheritedSize[0x070C])
	 */
	class AFGPipeHyperAttachmentHologram : public AFGPipeAttachmentHologram
	{
	public:
		float                                                      mMinimumPipeSplitRemnantLength;                          // 0x070C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeHyperAttachmentSnapTargetInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGPipeHyperAttachmentSnapTargetInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeHyperInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGPipeHyperInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeHyperStart
	 * Size -> 0x0004 (FullSize[0x0740] - InheritedSize[0x073C])
	 */
	class AFGPipeHyperStart : public AFGBuildablePipeHyperPart
	{
	public:
		float                                                      mInitialMinSpeedFactor;                                  // 0x073C(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipelineAttachmentHologram
	 * Size -> 0x0034 (FullSize[0x0740] - InheritedSize[0x070C])
	 */
	class AFGPipelineAttachmentHologram : public AFGPipeAttachmentHologram
	{
	public:
		unsigned char                                              UnknownData_BQ6Y[0x4];                                   // 0x070C(0x0004) Fix Super Size
		struct FVector                                             mProducerArrowRelativeLocation;                          // 0x0710(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UStaticMeshComponent*>                        mProducerComponentArrows;                                // 0x0728(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9V8M[0x8];                                   // 0x0738(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipelineFlowIndicatorComponent
	 * Size -> 0x0010 (FullSize[0x0630] - InheritedSize[0x0620])
	 */
	class UFGPipelineFlowIndicatorComponent : public UStaticMeshComponent
	{
	public:
		class AFGBuildablePipeline*                                mPipeline;                                               // 0x0620(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XS9K[0x8];                                   // 0x0628(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnMaterialInstanceUpdated();
		void OnFluidDescriptorSet(class UClass* fluidDescriptor);
		class AFGBuildablePipeline* GetPipeline();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipelineHologram
	 * Size -> 0x0108 (FullSize[0x07B0] - InheritedSize[0x06A8])
	 */
	class AFGPipelineHologram : public AFGSplineHologram
	{
	public:
		unsigned char                                              UnknownData_5L7U[0x8];                                   // 0x06A8(0x0008) Fix Super Size
		class AFGPipelineSupportHologram*                          mChildPoleHologram[0x2];                                 // 0x06B0(0x0010) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGWallAttachmentHologram*                           mChildWallPoleHologram[0x2];                             // 0x06C0(0x0010) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGPipeConnectionComponentBase*                      mChildWallPoleConnection[0x2];                           // 0x06D0(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGPipeConnectionComponentBase*                      mConnectionComponents[0x2];                              // 0x06E0(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGPipeConnectionComponentBase*                      mSnappedConnectionComponents[0x2];                       // 0x06F0(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildablePipeline*                                mUpgradedPipeline;                                       // 0x0700(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mDefaultPipelineSupportRecipe;                           // 0x0708(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mDefaultPipelineWallSupportRecipe;                       // 0x0710(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mBendRadius;                                             // 0x0718(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mBendRadius2D;                                           // 0x071C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMinBendRadius;                                          // 0x0720(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaxSplineLength;                                        // 0x0724(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMeshComponent*                                mConnectionArrowComponent;                               // 0x0728(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class USplineMeshComponent*>                        mSplineMeshes;                                           // 0x0730(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UShapeComponent*>                             mCollisionMeshes;                                        // 0x0740(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class UClass*                                              mBuildModeAuto;                                          // 0x0750(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mBuildModeAuto2D;                                        // 0x0758(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mBuildModeNoodle;                                        // 0x0760(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mBuildModeHorzToVert;                                    // 0x0768(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class AFGBuildablePassthrough*>                     mSnappedPassthroughs;                                    // 0x0770(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		struct FVector                                             mPassthroughOverrideStartLocation;                       // 0x0780(0x0018) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh*                                         mMesh;                                                   // 0x0798(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8VGI[0x10];                                  // 0x07A0(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdateSplineComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipelineJunctionHologram
	 * Size -> 0x0000 (FullSize[0x0740] - InheritedSize[0x0740])
	 */
	class AFGPipelineJunctionHologram : public AFGPipelineAttachmentHologram
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipelinePumpHologram
	 * Size -> 0x0050 (FullSize[0x0790] - InheritedSize[0x0740])
	 */
	class AFGPipelinePumpHologram : public AFGPipelineAttachmentHologram
	{
	public:
		unsigned char                                              UnknownData_W55A[0x40];                                  // 0x0740(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mOffsetEstimationBinaryDivisionCount;                    // 0x0780(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mMaxJunctionRecursions;                                  // 0x0784(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaxTraversalDistance;                                   // 0x0788(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NV77[0x4];                                   // 0x078C(0x0004) MISSED OFFSET (PADDING)

	public:
		TArray<struct FTransform> STATIC_GetTransformsAtNormalizedDistanceAlongPath(const struct FPumpHeadLiftLocationPath& Path, float Distance);
		TArray<struct FTransform> STATIC_GetTransformsAtDistanceAlongPath(const struct FPumpHeadLiftLocationPath& Path, float Distance);
		TArray<struct FTransform> GetHeadLiftSnapTransforms();
		float STATIC_GetHeadLiftPathLength(const struct FPumpHeadLiftLocationPath& Path);
		TArray<struct FTransform> GetHeadLiftEndTransforms();
		struct FPumpHeadLiftLocationPath GetCurrentHeadLiftPath();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipelineSupportHologram
	 * Size -> 0x0088 (FullSize[0x0710] - InheritedSize[0x0688])
	 */
	class AFGPipelineSupportHologram : public AFGFactoryHologram
	{
	public:
		struct FPoleHeightMesh                                     mSupportMesh;                                            // 0x0688(0x0010) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		bool                                                       mCanAdjustVerticalAngle;                                 // 0x0698(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G8T8[0x7];                                   // 0x0699(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPipeConnectionComponentBase*                      mSnapConnection;                                         // 0x06A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mVerticalAngle;                                          // 0x06A8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mSupportLength;                                          // 0x06AC(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HX87[0x10];                                  // 0x06B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                mSupportMeshComponent;                                   // 0x06C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMeshComponent*                                mSupportTopPartMeshComponent;                            // 0x06C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USceneComponent*                                     mSupportLengthComponent;                                 // 0x06D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_P6QB[0x8];                                   // 0x06D8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UInstancedStaticMeshComponent*                       mInstancedMeshComponent;                                 // 0x06E0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mMaxZoopAmount;                                          // 0x06E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QBB1[0x4];                                   // 0x06EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mBuildModeZoop;                                          // 0x06F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mClearanceExtent;                                        // 0x06F8(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnRep_SupportMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeNetwork
	 * Size -> 0x0088 (FullSize[0x0380] - InheritedSize[0x02F8])
	 */
	class AFGPipeNetwork : public AInfo
	{
	public:
		unsigned char                                              UnknownData_FPAZ[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		int32_t                                                    mPipeNetworkID;                                          // 0x0300(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ABCP[0x4];                                   // 0x0304(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mFluidDescriptor;                                        // 0x0308(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BM62[0x8];                                   // 0x0310(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mPendingFluidDescriptor;                                 // 0x0318(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G4YE[0x20];                                  // 0x0320(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mFluidIntegrantScriptInterfaces[0x10];                   // 0x0340(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              UnknownData_V4X5[0x30];                                  // 0x0350(0x0030) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipePartHologram
	 * Size -> 0x0048 (FullSize[0x06D0] - InheritedSize[0x0688])
	 */
	class AFGPipePartHologram : public AFGFactoryHologram
	{
	public:
		struct FPoleHeightMesh                                     mSupportMesh;                                            // 0x0688(0x0010) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UFGPipeConnectionComponentBase*                      mSnapConnection;                                         // 0x0698(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8UB7[0x20];                                  // 0x06A0(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                mSupportMeshComponent;                                   // 0x06C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USceneComponent*                                     mSupportLengthComponent;                                 // 0x06C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnRep_SupportMesh();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeReservoirHologram
	 * Size -> 0x0008 (FullSize[0x0690] - InheritedSize[0x0688])
	 */
	class AFGPipeReservoirHologram : public AFGFactoryHologram
	{
	public:
		unsigned char                                              UnknownData_5CQ8[0x8];                                   // 0x0688(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPipeSubsystem
	 * Size -> 0x0088 (FullSize[0x0380] - InheritedSize[0x02F8])
	 */
	class AFGPipeSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_KUF2[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_LXWU[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, class AFGPipeNetwork*>                       mNetworks;                                               // 0x0308(0x0050) NativeAccessSpecifierPrivate
		TArray<class AFGPipeNetwork*>                              mDisplayDebugNetworkList;                                // 0x0358(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GSXR[0x18];                                  // 0x0368(0x0018) MISSED OFFSET (PADDING)

	public:
		void TrySetNetworkFluidDescriptor(int32_t networkID, class UClass* fluidDescriptor);
		class AFGPipeSubsystem* STATIC_GetPipeSubsystem(class UObject* WorldContext);
		void FlushPipeNetworkFromIntegrant(class AActor* integrantActor);
		void FlushIntegrant(class AActor* integrantActor);
		class AFGPipeNetwork* FindPipeNetwork(int32_t networkID);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPlanet
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGPlanet : public AActor
	{
	public:
		unsigned char                                              UnknownData_XHJ6[0x8];                                   // 0x02F8(0x0008) Fix Super Size

	public:
		void UpdatePreview();
		void SetPosition(float pct);
		void SetMovementMultiplier(float Multiplier);
		void EnableMovement(bool Enabled);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPlayerInput
	 * Size -> 0x00C0 (FullSize[0x0810] - InheritedSize[0x0750])
	 */
	class UFGPlayerInput : public UEnhancedPlayerInput
	{
	public:
		TMap<class UInputAction*, struct FFGCachedActionMappingContextMap> mDefaultKeyMappings;                                     // 0x0750(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate
		TMap<class FName, class UInputAction*>                     mInputActionNameLookupMap;                               // 0x07A0(0x0050) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BD1L[0x20];                                  // 0x07F0(0x0020) MISSED OFFSET (PADDING)

	public:
		void STATIC_GetActionMappings(class APlayerController* PlayerController, TArray<struct FEnhancedActionKeyMapping>* out_KeyMappings);
		class UInputAction* FindActionByMappableActionName(const class FName& ActionName);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPlayerNameTagWidget
	 * Size -> 0x0040 (FullSize[0x02C0] - InheritedSize[0x0280])
	 */
	class UFGPlayerNameTagWidget : public UUserWidget
	{
	public:
		class FString                                              mPlayerName;                                             // 0x0280(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        mPlayerColor;                                            // 0x0290(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsPlayerOnline;                                         // 0x02A0(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsPlayerCheckmarked;                                    // 0x02A1(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DCD5[0x6];                                   // 0x02A2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          mOverrideIcon;                                           // 0x02A8(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGHUD*                                              mCachedLocalHUD;                                         // 0x02B0(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mCachedIcon;                                             // 0x02B8(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnPlayerDataUpdated();
		void OnHiddenHUDModeChanged(bool HideHUD);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPlayerSettings
	 * Size -> 0x0158 (FullSize[0x0190] - InheritedSize[0x0038])
	 */
	class UFGPlayerSettings : public UDeveloperSettings
	{
	public:
		TArray<struct FPlayerColorData>                            mPlayerColors;                                           // 0x0038(0x0010) Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
		struct FLinearColor                                        mOfflinePlayerColor;                                     // 0x0048(0x0010) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                mNoCachedPlayerName;                                     // 0x0058(0x0018) Edit, Config, NativeAccessSpecifierPublic
		int32_t                                                    mDefaultPlayerInventorySlots;                            // 0x0070(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mDefaultArmEquipmentSlots;                               // 0x0074(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mDefaultUploadSlots;                                     // 0x0078(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5SU5[0x4];                                   // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mStartingItems[0x50];                                    // 0x0080(0x0050) UNKNOWN PROPERTY: MapProperty
		TMap<int32_t, struct FRecipeAmounts>                       mRecipesToGivePlayersPerTier;                            // 0x00D0(0x0050) Edit, Config, NativeAccessSpecifierPublic
		unsigned char                                              mDefaultWalkHeadBobCameraAnim[0x30];                     // 0x0120(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mDefaultSprintHeadBobCameraAnim[0x30];                   // 0x0150(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mDamageTypesToPreventDuringRespawn[0x10];                // 0x0180(0x0010) UNKNOWN PROPERTY: ArrayProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPlayerStartTradingPost
	 * Size -> 0x0000 (FullSize[0x0330] - InheritedSize[0x0330])
	 */
	class AFGPlayerStartTradingPost : public APlayerStart
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPlayerState
	 * Size -> 0x03A0 (FullSize[0x07B0] - InheritedSize[0x0410])
	 */
	class AFGPlayerState : public APlayerState
	{
	public:
		unsigned char                                              UnknownData_ZOZR[0x8];                                   // 0x0410(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             BuildableConstructedDelegate;                            // 0x0418(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnHotbarUpdatedForMaterialDescriptor;                   // 0x0428(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnPublicTodoListUpdated;                                // 0x0438(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnShoppingListUpdated;                                  // 0x0448(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnColorDataUpdated;                                     // 0x0458(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnActiveHotbarIndexChanged;                             // 0x0468(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnHotbarsAvailable;                                     // 0x0478(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		struct FInventoryToRespawnWith                             mInventoryToRespawnWith;                                 // 0x0488(0x00B0) SaveGame, NativeAccessSpecifierPublic
		TArray<struct FHotbar>                                     mHotbars;                                                // 0x0538(0x0010) ZeroConstructor, SaveGame, Deprecated, NativeAccessSpecifierPrivate
		TWeakObjectPtr<class UFGPlayerHotbar>                      mLastActivePlayerHotbar;                                 // 0x0548(0x0008) ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UFGPlayerHotbar*>                             mPlayerHotbars;                                          // 0x0550(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, Protected, NativeAccessSpecifierProtected
		int32_t                                                    mCurrentHotbarIndex;                                     // 0x0560(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D6SE[0x4];                                   // 0x0564(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSubCategoryMaterialDefault>                 mBuildableSubCategoryDefaultMatDesc;                     // 0x0568(0x0010) Net, ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		TArray<struct FSubCategoryMaterialDefault>                 mMaterialSubCategoryDefaultMatDesc;                      // 0x0578(0x0010) Net, ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mDefaultRecipeShortcuts;                                 // 0x0588(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		class UClass*                                              mDefaultEmoteShortcut;                                   // 0x0598(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mNewRecipes;                                             // 0x05A0(0x0010) Net, ZeroConstructor, SaveGame, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		int32_t                                                    mSlotNum;                                                // 0x05B0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FPlayerColorData                                    mPlayerColorData;                                        // 0x05B4(0x0020) Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FPlayerRules                                        mPlayerRules;                                            // 0x05D4(0x0005) Net, SaveGame, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected
		EPlayerHostilityMode                                       mCreatureHostilityMode;                                  // 0x05D9(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WZMM[0x6];                                   // 0x05DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class APawn*                                               mOwnedPawn;                                              // 0x05E0(0x0008) ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasReceivedInitialItems : 1;                            // 0x05E8(0x0001) BIT_FIELD SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsServerAdmin : 1;                                      // 0x05E8(0x0001) BIT_FIELD Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_N7FN[0x7];                                   // 0x05E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mVisitedAreas;                                           // 0x05F0(0x0010) Net, ZeroConstructor, SaveGame, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		struct FFactoryCustomizationColorSlot                      mCustomColorData;                                        // 0x0600(0x0028) Net, SaveGame, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FShoppingListSettings                               mShoppingListSettings;                                   // 0x0628(0x0008) Edit, Net, DisableEditOnInstance, SaveGame, NoDestructor, Protected, NativeAccessSpecifierProtected
		class UFGTutorialSubsystem*                                mTutorialSubsystem;                                      // 0x0630(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mTutorialSubsystemClass;                                 // 0x0638(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FMessageData>                                mMessageData;                                            // 0x0640(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mRememberedFirstTimeEquipmentClasses;                    // 0x0650(0x0010) Net, ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPrivate
		int32_t                                                    mNumArmSlots;                                            // 0x0660(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mOnlyShowAffordableRecipes;                              // 0x0664(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_DZUF[0x3];                                   // 0x0665(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mCollapsedItemCategories;                                // 0x0668(0x0010) Net, ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<ERepresentationType>                                mFilteredOutMapTypes;                                    // 0x0678(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		TArray<ERepresentationType>                                mFilteredOutCompassTypes;                                // 0x0688(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		TArray<ERepresentationType>                                mCollapsedMapCategories;                                 // 0x0698(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		class UClass*                                              mLastSelectedResourceSinkShopCategory;                   // 0x06A8(0x0008) ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mNumObservedInventorySlots;                              // 0x06B0(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C5OY[0x4];                                   // 0x06B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mFavoriteShopSchematics;                                 // 0x06B8(0x0010) Net, ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPrivate
		TMap<class UClass*, int32_t>                               mShoppingCart;                                           // 0x06C8(0x0050) Transient, NativeAccessSpecifierPrivate
		class FString                                              mPrivateTodoList;                                        // 0x0718(0x0010) Net, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGShoppingListComponent*                            mShoppingListComponent;                                  // 0x0728(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<class UClass*, class UFGFactoryClipboardSettings*>    mFactoryClipboard;                                       // 0x0730(0x0050) Transient, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mOpenedWidgetsThisSession;                               // 0x0780(0x0010) ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mOpenedWidgetsPersistent;                                // 0x0790(0x0010) Net, ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mPlayerSpecificSchematics;                               // 0x07A0(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, UObjectWrapper, NativeAccessSpecifierPrivate

	public:
		void UpdateNumObservedInventorySlots();
		void UpdateHotbarShortcutsForMaterialDesc(class UClass* newDefaultMaterialDesc);
		void SetWidgetHasBeenOpened(class UClass* Widget, bool save);
		void SetShoppingListSettings(const struct FShoppingListSettings& newShoppingListSettings);
		void SetShoppingCart(TMap<class UClass*, int32_t> shoppingCart);
		void SetSavedMatDescForMaterialCategory(class UClass* Category, class UClass* MaterialDesc, bool updateHotbarShortcuts);
		void SetSavedMatDescForBuildableCategory(class UClass* Category, class UClass* MaterialDesc, bool skipRep);
		void SetPublicTodoList(const class FString& newTodoList);
		void SetPrivateTodoList(const class FString& newTodoList);
		void SetPlayerCustomizationSlotData(const struct FFactoryCustomizationColorSlot& customColorData);
		void SetOnlyShowAffordableRecipes(bool Enabled);
		void SetMapCategoryCollapsed(ERepresentationType mapCategory, bool collapsed);
		void SetLastSelectedResourceSinkShopCategory(class UClass* selectedCategory);
		void SetKeepInventory(EPlayerKeepInventoryMode keepInventoryMode);
		void SetItemCategoryCollapsed(class UClass* itemCategory, bool collapsed);
		void SetHotbarIndex(int32_t newHotbarIndex);
		void SetCreatureHostility(EPlayerHostilityMode hostility);
		void Server_UpdateRecipeShortcut(class UFGPlayerHotbar* Hotbar, int32_t shortcutIndex, class UClass* newRecipe);
		void Server_UpdateNumObservedInventorySlots();
		void Server_SetWidgetHasBeenOpened(class UClass* Widget);
		void Server_SetShoppingListSettings(const struct FShoppingListSettings& newShoppingListSettings);
		void Server_SetSavedMatDescForMaterialCategory(class UClass* Category, class UClass* MaterialDesc);
		void Server_SetSavedMatDescForBuildableCategory(class UClass* Category, class UClass* MaterialDesc);
		void Server_SetPublicTodoList(const class FString& newTodoList);
		void Server_SetPrivateTodoList(const class FString& newTodoList);
		void Server_SetPlayerCustomizationSlotData(const struct FFactoryCustomizationColorSlot& customColorData);
		void Server_SetOnlyShowAffordableRecipes(bool Enabled);
		void Server_SetNoBuildCost(bool NoBuildCost);
		void Server_SetMapFilter(ERepresentationType representationType, bool Visible);
		void Server_SetMapCategoryCollapsed(ERepresentationType mapCategory, bool collapsed);
		void Server_SetKeepInventory(EPlayerKeepInventoryMode keepInventoryMode);
		void Server_SetItemCategoryCollapsed(class UClass* itemCategory, bool collapsed);
		void Server_SetGodMode(bool GodMode);
		void Server_SetFlightMode(bool FlightMode);
		void Server_SetCreatureHostility(EPlayerHostilityMode hostility);
		void Server_SetCompassFilter(ERepresentationType representationType, bool Visible);
		void Server_RemoveRecipe(class UClass* recipe);
		void Server_OnBlueprintRemoved(const class FString& BlueprintName);
		void SaveAsShopFavorite(class UClass* schematic);
		void RemoveRecipe(class UClass* recipe);
		void RemoveMessage(class UClass* InMessage);
		void RemoveAsShopFavorite(class UClass* schematic);
		void RemoveAllShopFavorites();
		void ReadMessage(class UClass* InMessage);
		void PasteFactoryClipboard(class UObject* Object);
		void OnRep_PlayerSpecificSchematics(TArray<class UClass*> previousPlayerSpecificSchematics);
		void OnRep_PlayerRules();
		void OnRep_PlayerHotbars();
		void OnRep_PlayerColorData();
		void OnRep_CurrentHotbarIndex();
		bool IsShopFavorite(class UClass* schematic);
		bool IsServerAdmin();
		bool GetWidgetHasBeenOpened(class UClass* Widget, bool* openedThisSession);
		class FString GetUsername();
		class FString GetUserID();
		struct FUniqueNetIdRepl GetUniqueNetId();
		class UFGTutorialSubsystem* GetTutorialSubsystem();
		bool GetTakeFromInventoryBeforeCentralStorage();
		int32_t GetSlotNum();
		struct FShoppingListSettings GetShoppingListSettings();
		class UFGShoppingListComponent* GetShoppingListComponent();
		TMap<class UClass*, int32_t> GetShoppingCart();
		TArray<class UClass*> GetShopFavorites();
		class UClass* GetSavedMatDescForMaterialCategory(class UClass* Category);
		class UClass* GetSavedMatDescForBuildableCategory(class UClass* Category, class UClass* SubCategory);
		class FString GetPublicTodoList();
		class FString GetPrivateTodoList();
		struct FPlayerRules GetPlayerRules();
		struct FLinearColor GetPingColor();
		bool GetOnlyShowAffordableRecipes();
		int32_t GetNumObservedInventorySlots();
		int32_t GetNumHotbars();
		int32_t GetNumArmSlots();
		void GetNewRecipes(TArray<class UClass*>* out_newRecipes);
		struct FLinearColor GetNametagColor();
		bool GetMapCategoryCollapsed(ERepresentationType mapCategory);
		class UClass* GetLastSelectedResourceSinkShopCategory();
		class UFGPlayerHotbar* GetHotbarAtIndex(int32_t hotbarIndex);
		struct FFactoryCustomizationColorSlot GetCustomColorData();
		EPlayerHostilityMode GetCreatureHostility();
		TArray<ERepresentationType> GetCollapsedMapCategories();
		TArray<class UClass*> GetCollapsedItemCategories();
		TArray<struct FShoppingListRecipeEntry> GetAndClearShoppingListForMigration();
		TArray<class UClass*> GetAllMessages(EMessageType MessageType);
		TArray<struct FMessageData> GetAllMessageData();
		void GetAllHotbars(TArray<class UFGPlayerHotbar*>* out_hotbars);
		int32_t GetActiveHotbarIndex();
		class UFGPlayerHotbar* GetActiveHotbar();
		int32_t FindHotbarIndex(class UFGPlayerHotbar* Hotbar);
		void CopyFactoryClipboard(class UObject* Object);
		void Client_UpdatePublicTodoList(const class FString& updatedTodoList);
		void Client_OnRecipeConstructed(class UClass* recipe, int32_t numConstructed);
		void Client_OnBlueprintRemoved(const class FString& BlueprintName);
		void AddMessage(class UClass* InMessage);
		void AddArmSlots(int32_t slotsToAdd);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPlayerHotbar
	 * Size -> 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
	 */
	class UFGPlayerHotbar : public UObject
	{
	public:
		unsigned char                                              UnknownData_Q5LR[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnHotbarSlotUpdated;                                    // 0x0030(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnHotbarSlotUnbound;                                    // 0x0040(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_X9UH[0x30];                                  // 0x0050(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGHotbarShortcut*>                           mShortcuts;                                              // 0x0080(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OUIA[0x10];                                  // 0x0090(0x0010) MISSED OFFSET (PADDING)

	public:
		void SetRecipeShortcutAtIndex(int32_t Index, class UClass* recipe, bool silent);
		void SetFactoryCustomizationShortcutAtIndex(int32_t Index, class UClass* Customization, bool silent);
		void SetEmoteAtIndex(int32_t Index, class UClass* inEmote, bool silent);
		void SetBlueprintAtIndex(int32_t Index, const class FString& BlueprintName, bool silent);
		void RemoveShortcutAtIndex(int32_t Index, bool silent);
		void OnRep_Shortcuts();
		class UFGHotbarShortcut* K2_CreateShortcutAtIndex(int32_t Index, class UClass* InClass, bool silent);
		class UFGHotbarShortcut* GetShortcutAtIndex(int32_t Index);
		int32_t GetNumShortcuts();
		void CopyFromHotbar(class UFGPlayerHotbar* otherHotbar, int32_t filterIndex);
		void CollapseDuplicateShortcuts(int32_t Index);
		void Client_NotifyShortcutUnbound(int32_t shortcutIndex);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPointDamageType
	 * Size -> 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
	 */
	class UFGPointDamageType : public UFGDamageType
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPoleConnectionsWidget
	 * Size -> 0x0008 (FullSize[0x0288] - InheritedSize[0x0280])
	 */
	class UFGPoleConnectionsWidget : public UUserWidget
	{
	public:
		class UFGCircuitConnectionComponent*                       mConnection;                                             // 0x0280(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetConnection(class UFGCircuitConnectionComponent* Connection);
		class UFGCircuitConnectionComponent* GetConnection();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPoleDescriptor
	 * Size -> 0x0010 (FullSize[0x01B8] - InheritedSize[0x01A8])
	 */
	class UFGPoleDescriptor : public UFGBuildingDescriptor
	{
	public:
		TArray<struct FPoleHeightMesh>                             mHeightMeshes;                                           // 0x01A8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void STATIC_GetHeightMeshes(class UClass* InClass, TArray<struct FPoleHeightMesh>* out_heightMeshes);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPopupConnectAccounts
	 * Size -> 0x0018 (FullSize[0x02A8] - InheritedSize[0x0290])
	 */
	class UFGPopupConnectAccounts : public UFGPopupWidgetContent
	{
	public:
		class FName                                                mCurrentPlatform;                                        // 0x0290(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EEosAccountConnectionResult                                mConnectionResult;                                       // 0x0298(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsWaitingForEOSConnectLoginResponse;                    // 0x0299(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UU2Q[0xE];                                   // 0x029A(0x000E) MISSED OFFSET (PADDING)

	public:
		void UnlinkCurrentAccount();
		void OnWaitingForEOSConnectLoginUpdated(bool waiting);
		void OnNativeWaitingForEOSConnectLoginUpdated();
		void OnNativeConnectAccountsEvent(const class FName& currentPlatform, EEosAccountConnectionResult Result);
		void OnConnectAccountsEvent();
		void LogOutEpicAndCreateNewAccountConnection();
		void LogoutEpicAccountAndContinue();
		void LoginAndConnectOtherEpicAccount();
		void LoginAndConnectAccount();
		void CreateNewAccountConnection();
		void ContinueWithoutMultiplayer();
		void ContinueWithoutConnectingAccount();
		void ContinueWithAndHookUpSteamToEOSAfterEpicLogout();
		void ConnectAccount();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPopupInstigatorInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGPopupInstigatorInterface : public UInterface
	{
	public:
		void WidgetFactory(class UClass* PopupClass, TArray<class UUserWidget*>* out_widgets);
		void NotifyPopupClosed(class UClass* PopupClass, int32_t exitCode);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPopupUnlinkAccount
	 * Size -> 0x0010 (FullSize[0x02A0] - InheritedSize[0x0290])
	 */
	class UFGPopupUnlinkAccount : public UFGPopupWidgetContent
	{
	public:
		bool                                                       mUnlinkResult;                                           // 0x0290(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8E7X[0x3];                                   // 0x0291(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FName                                                mSubsystemToUnlink;                                      // 0x0294(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VZ7D[0x4];                                   // 0x029C(0x0004) MISSED OFFSET (PADDING)

	public:
		void UnlinkAccount();
		void OnWaitForResult();
		void OnUnlinkComplete(bool Result);
		void NativeUnlinkComplete(bool Result);
		void LinkAccount();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPopupWidget
	 * Size -> 0x0038 (FullSize[0x0320] - InheritedSize[0x02E8])
	 */
	class UFGPopupWidget : public UFGInteractWidget
	{
	public:
		unsigned char                                              UnknownData_NLQX[0x4];                                   // 0x02E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptDelegate                                      mPopupConfirmClickedDelegate;                            // 0x02EC(0x0010) ZeroConstructor, InstancedReference, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptDelegate                                      mPopupClosedDelegate;                                    // 0x02FC(0x0010) ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_RJC4[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UObject*                                             mInstigator;                                             // 0x0310(0x0008) Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGPopupWidgetContent*                               mContent;                                                // 0x0318(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void CallPopupConfirmClicked();
		void CallPopupClosedClicked(bool confirm);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPortableMiner
	 * Size -> 0x0048 (FullSize[0x0340] - InheritedSize[0x02F8])
	 */
	class AFGPortableMiner : public AActor
	{
	public:
		unsigned char                                              UnknownData_FT4A[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_C5J1[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mExtractCycleTime;                                       // 0x0308(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NXIX[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGResourceNode*                                     mExtractResourceNode;                                    // 0x0310(0x0008) BlueprintVisible, Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGInventoryComponent*                               mOutputInventory;                                        // 0x0318(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mCurrentExtractProgress;                                 // 0x0320(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_VIJU[0x4];                                   // 0x0324(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mInteractWidgetClass;                                    // 0x0328(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mInventorySize;                                          // 0x0330(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsProducing;                                            // 0x0334(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G0MV[0xB];                                   // 0x0335(0x000B) MISSED OFFSET (PADDING)

	public:
		void OnRep_IsProducing();
		bool IsProducing();
		class UFGInventoryComponent* GetOutputInventory();
		float GetExtractionProgress();
		float GetExtractCycleTime();
		TArray<struct FInventoryStack> GetDismantleInventoryReturns();
		bool CanProduce();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPortableMinerDispenser
	 * Size -> 0x0030 (FullSize[0x04B0] - InheritedSize[0x0480])
	 */
	class AFGPortableMinerDispenser : public AFGEquipment
	{
	public:
		TArray<EResourceForm>                                      mAllowedResourceForms;                                   // 0x0480(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		float                                                      mPlaceDistanceMax;                                       // 0x0490(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_CLGC[0x4];                                   // 0x0494(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstance*                                   mValidPlacementMaterial;                                 // 0x0498(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInstance*                                   mInvalidPlacementMaterial;                               // 0x04A0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_DWT0[0x8];                                   // 0x04A8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SpawnPortableMiner(class AFGResourceNode* ResourceNode);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPowerCircuit
	 * Size -> 0x00B8 (FullSize[0x0118] - InheritedSize[0x0060])
	 */
	class UFGPowerCircuit : public UFGCircuit
	{
	public:
		unsigned char                                              UnknownData_ZKNQ[0x28];                                  // 0x0060(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPowerProductionCapacity;                                // 0x0088(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mPowerProduced;                                          // 0x008C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mPowerConsumed;                                          // 0x0090(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaximumPowerConsumption;                                // 0x0094(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasPower;                                               // 0x0098(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasBatteries;                                           // 0x0099(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NCIZ[0x2];                                   // 0x009A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mBatterySumPowerStore;                                   // 0x009C(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mBatterySumPowerStoreCapacity;                           // 0x00A0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mBatterySumPowerInput;                                   // 0x00A4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTimeToBatteriesEmpty;                                   // 0x00A8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTimeToBatteriesFull;                                    // 0x00AC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsFuseTriggered;                                        // 0x00B0(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_32SR[0x7];                                   // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPowerCircuitStats                                  mPowerStats;                                             // 0x00B8(0x0058) Net, NativeAccessSpecifierPrivate
		float                                                      mPowerStoreAtBatteryDepletionStart;                      // 0x0110(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTimeSinceLastWarning;                                   // 0x0114(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void ResetFuse();
		bool IsFuseTriggered();
		bool HasPower();
		bool HasBatteries();
		float GetTimeToBatteriesFull();
		float GetTimeToBatteriesEmpty();
		void GetStats(struct FPowerCircuitStats* out_stats);
		void STATIC_GetProductionCapacityPoints(const struct FPowerCircuitStats& Stats, TArray<float>* out_points);
		void STATIC_GetProducedPoints(const struct FPowerCircuitStats& Stats, TArray<float>* out_points);
		float GetPowerProductionCapacity();
		int32_t STATIC_GetNumGraphPoint(const struct FPowerCircuitStats& Stats);
		void STATIC_GetMaximumConsumptionPoints(const struct FPowerCircuitStats& Stats, TArray<float>* out_points);
		bool STATIC_GetGraphPointAtIndex(const struct FPowerCircuitStats& Stats, int32_t idx, struct FPowerGraphPoint* out_item);
		void STATIC_GetConsumedPoints(const struct FPowerCircuitStats& Stats, TArray<float>* out_points);
		float GetBatterySumPowerStorePercent();
		float GetBatterySumPowerStoreCapacity();
		float GetBatterySumPowerStore();
		float GetBatterySumPowerOutput();
		float GetBatterySumPowerInput();
		void STATIC_GetBatteryPowerOutputPoints(const struct FPowerCircuitStats& Stats, TArray<float>* out_points);
		void STATIC_GetBatteryPowerInputPoints(const struct FPowerCircuitStats& Stats, TArray<float>* out_points);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPowerCircuitGroup
	 * Size -> 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
	 */
	class UFGPowerCircuitGroup : public UFGCircuitGroup
	{
	public:
		TArray<class UFGPowerCircuit*>                             mCircuits;                                               // 0x0028(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_R61S[0x78];                                  // 0x0038(0x0078) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPowerCircuitWidget
	 * Size -> 0x0018 (FullSize[0x0298] - InheritedSize[0x0280])
	 */
	class UFGPowerCircuitWidget : public UUserWidget
	{
	public:
		class FScriptDelegate                                      mGetPowerCircuitEvent;                                   // 0x0280(0x0010) Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGPowerCircuit*                                     mPowerCircuit;                                           // 0x0290(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void IsPowerCircuitValidChanged(bool isPowerCircuitValid);
		class UFGPowerCircuit* GetPowerCircuit__DelegateSignature();
		class UFGPowerCircuit* GetPowerCircuit();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPowerConnectionComponent
	 * Size -> 0x0020 (FullSize[0x0340] - InheritedSize[0x0320])
	 */
	class UFGPowerConnectionComponent : public UFGCircuitConnectionComponent
	{
	public:
		unsigned char                                              UnknownData_5ACJ[0x8];                                   // 0x0320(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGPowerInfoComponent*                               mPowerInfo;                                              // 0x0328(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EPowerConnectionType                                       mPowerConnectionType;                                    // 0x0330(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasPower;                                               // 0x0331(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VGKF[0xE];                                   // 0x0332(0x000E) MISSED OFFSET (PADDING)

	public:
		void SetPowerInfo(class UFGPowerInfoComponent* powerInfo);
		bool HasPower();
		class UFGPowerInfoComponent* GetPowerInfo();
		EPowerConnectionType GetPowerConnectionType();
		class UFGPowerCircuit* GetPowerCircuit();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBatteryInfo
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFGBatteryInfo : public UObject
	{
	public:
		unsigned char                                              UnknownData_W1H1[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPowerInfoComponent
	 * Size -> 0x0048 (FullSize[0x00E8] - InheritedSize[0x00A0])
	 */
	class UFGPowerInfoComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_2LT0[0x1C];                                  // 0x00A0(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mCircuitID;                                              // 0x00BC(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTargetConsumption;                                      // 0x00C0(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_7BKH[0x4];                                   // 0x00C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mActualConsumption;                                      // 0x00C8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mBaseProduction;                                         // 0x00CC(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mDynamicProductionCapacity;                              // 0x00D0(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mDynamicProductionDemandFactor;                          // 0x00D4(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGBatteryInfo*                                      mBatteryInfo;                                            // 0x00D8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       UnknownData_9SKW : 1;                                    // 0x00E0(0x0001) BIT_FIELD (PADDING)
		bool                                                       mIsFuseTriggered : 1;                                    // 0x00E0(0x0001) BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsFullBlast : 1;                                        // 0x00E0(0x0001) BIT_FIELD Net, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_92BQ[0x7];                                   // 0x00E1(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetTargetConsumption(float newConsumption);
		void SetFullBlast(bool IsFullBlast);
		void SetDynamicProductionCapacity(float newProduction);
		void SetBaseProduction(float newProduction);
		bool IsFuseTriggered();
		bool IsFullBlast();
		bool IsConnected();
		bool HasPower();
		float GetTargetConsumption();
		float GetRegulatedDynamicProduction();
		class UFGPowerCircuit* GetPowerCircuit();
		float GetDynamicProductionDemandFactor();
		float GetDynamicProductionCapacity();
		float GetBaseProduction();
		float GetActualConsumption();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPowerPoleHologram
	 * Size -> 0x0048 (FullSize[0x06D0] - InheritedSize[0x0688])
	 */
	class AFGPowerPoleHologram : public AFGBuildableHologram
	{
	public:
		class UStaticMeshComponent*                                mPowerConnectionMesh;                                    // 0x0688(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HG7H[0x8];                                   // 0x0690(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGCircuitConnectionComponent*                       mSnapConnection;                                         // 0x0698(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGCircuitConnectionComponent*                       mPowerTowerSnapConnection;                               // 0x06A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableWire*                                    mSnapWire;                                               // 0x06A8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGWireHologram*                                     mWireHologramIn;                                         // 0x06B0(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGWireHologram*                                     mWireHologramOut;                                        // 0x06B8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mDefaultPowerLineRecipe;                                 // 0x06C0(0x0008) Edit, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildablePowerPole*                               mUpgradeTarget;                                          // 0x06C8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWallAttachmentHologram
	 * Size -> 0x0000 (FullSize[0x06C0] - InheritedSize[0x06C0])
	 */
	class AFGWallAttachmentHologram : public AFGGenericBuildableHologram
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPowerPoleWallHologram
	 * Size -> 0x0010 (FullSize[0x06D0] - InheritedSize[0x06C0])
	 */
	class AFGPowerPoleWallHologram : public AFGWallAttachmentHologram
	{
	public:
		class UStaticMeshComponent*                                mPowerConnectionMesh;                                    // 0x06B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGCircuitConnectionComponent*                       mSnapConnection;                                         // 0x06C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildablePowerPole*                               mUpgradeTarget;                                          // 0x06C8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPowerSwitchHologram
	 * Size -> 0x0008 (FullSize[0x0690] - InheritedSize[0x0688])
	 */
	class AFGPowerSwitchHologram : public AFGBuildableHologram
	{
	public:
		class AFGBuildableCircuitSwitch*                           mUpgradeTarget;                                          // 0x0688(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPowerTowerHologram
	 * Size -> 0x0008 (FullSize[0x0690] - InheritedSize[0x0688])
	 */
	class AFGPowerTowerHologram : public AFGFactoryHologram
	{
	public:
		unsigned char                                              UnknownData_CO0K[0x8];                                   // 0x0688(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPrefabSignInteract
	 * Size -> 0x0008 (FullSize[0x02F0] - InheritedSize[0x02E8])
	 */
	class UFGPrefabSignInteract : public UFGInteractWidget
	{
	public:
		unsigned char                                              UnknownData_9ZNK[0x8];                                   // 0x02E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetPrefabLayout(class UClass* PrefabLayout);
		void SetElementText(class FString* ElementName, const class FString& newText);
		void SetElementIconID(class FString* ElementName, int32_t IconID);
		void GetAvailablePrefabLayouts(TArray<class UClass*>* out_prefabLayouts);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPriorityPowerSwitchInfo
	 * Size -> 0x0078 (FullSize[0x0370] - InheritedSize[0x02F8])
	 */
	class AFGPriorityPowerSwitchInfo : public AInfo
	{
	public:
		class FScriptMulticastDelegate                             mOnSwitchNameChangedDelegate;                            // 0x02F8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnIsSwitchOnChangedDelegate;                            // 0x0308(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnSwitchPriorityChangedDelegate;                        // 0x0318(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnCircuitsChangedDelegate;                              // 0x0328(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnSwitchRemovedDelegate;                                // 0x0338(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_W4ON[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              mSwitchName;                                             // 0x0350(0x0010) Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mSwitchPriority;                                         // 0x0360(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsSwitchOn;                                             // 0x0364(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_17GT[0x3];                                   // 0x0365(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mCircuitGroupID0;                                        // 0x0368(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mCircuitGroupID1;                                        // 0x036C(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetSwitchOn(bool On);
		void SetPriority(int32_t Priority);
		void OnSwitchRemoved__DelegateSignature();
		void OnSwitchPriorityChanged__DelegateSignature(int32_t Priority);
		void OnSwitchPriorityChanged(int32_t Priority);
		void OnSwitchNameChanged__DelegateSignature(const class FString& Name);
		void OnSwitchBuildingTagChanged(bool HasTag, const class FString& Tag);
		void OnRep_SwitchPriority();
		void OnRep_SwitchName();
		void OnRep_IsSwitchOn();
		void OnRep_GroupIDX();
		void OnIsSwitchOnChanged__DelegateSignature(bool IsSwitchOn);
		void OnIsSwitchOnChanged();
		void OnCircuitsChanged__DelegateSignature(int32_t circuitID0, int32_t circuitID1);
		void OnCircuitsChanged();
		bool IsSwitchOn();
		class FString GetSwitchName();
		int32_t GetPriority();
		int32_t GetCircuitGroupID1();
		int32_t GetCircuitGroupID0();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGProductionIndicatorComponent
	 * Size -> 0x0028 (FullSize[0x00C8] - InheritedSize[0x00A0])
	 */
	class UFGProductionIndicatorComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_7YNR[0x10];                                  // 0x00A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            mIndicatorMaterial;                                      // 0x00B0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6Y39[0x10];                                  // 0x00B8(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGProductionIndicatorInstanceComponent
	 * Size -> 0x0068 (FullSize[0x06C0] - InheritedSize[0x0658])
	 */
	class UFGProductionIndicatorInstanceComponent : public UFGColoredInstanceMeshProxy
	{
	public:
		struct FFGIndicatorReaction                                mStateNoneData;                                          // 0x0658(0x0014) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FFGIndicatorReaction                                mStateActiveData;                                        // 0x066C(0x0014) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FFGIndicatorReaction                                mStateActiveWithCrystalData;                             // 0x0680(0x0014) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FFGIndicatorReaction                                mStateErrorData;                                         // 0x0694(0x0014) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FFGIndicatorReaction                                mStateStandbyData;                                       // 0x06A8(0x0014) Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IV1Y[0x4];                                   // 0x06BC(0x0004) MISSED OFFSET (PADDING)

	public:
		void OnProductionStatusChanged(EProductionStatus newStatus);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGProductionIndicatorInstanceManager
	 * Size -> 0x0080 (FullSize[0x0320] - InheritedSize[0x02A0])
	 */
	class UFGProductionIndicatorInstanceManager : public USceneComponent
	{
	public:
		class UHierarchicalInstancedStaticMeshComponent*           mInstanceComponents[0x5];                                // 0x02A0(0x0028) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_W3MU[0x58];                                  // 0x02C8(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGProfileSpline
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGProfileSpline : public AActor
	{
	public:
		unsigned char                                              UnknownData_U0YH[0x8];                                   // 0x02F8(0x0008) Fix Super Size

	public:
		void StartProfile();
		struct FTransform GetCurrentView();
		float GetCurrentDuration();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGProjectileMovementComponent
	 * Size -> 0x0038 (FullSize[0x0280] - InheritedSize[0x0248])
	 */
	class UFGProjectileMovementComponent : public UProjectileMovementComponent
	{
	public:
		struct FVector                                             mHomingTargetLocation;                                   // 0x0248(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FVector                                             mHomingTargetDirection;                                  // 0x0260(0x0018) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHasHomingTargetLocation;                                // 0x0278(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_11RL[0x7];                                   // 0x0279(0x0007) MISSED OFFSET (PADDING)

	public:
		void SetHomingTargetLocation(const struct FVector& TargetLocation);
		void SetHomingTargetDirection(const struct FVector& targetDirection);
		void ClearHomingTargetLocation();
		void ClearHomingTargetDirection();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGProximitySubsystem
	 * Size -> 0x0088 (FullSize[0x0380] - InheritedSize[0x02F8])
	 */
	class AFGProximitySubsystem : public AActor
	{
	public:
		class AFGPlayerController*                                 mOwningController;                                       // 0x02F8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USceneComponent*                                     mRootComponent;                                          // 0x0300(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FMapAreaParticleCollection>                  mMapAreaParticleCollection;                              // 0x0308(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<class UDecalComponent*>                             mPooledDecals;                                           // 0x0318(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		int32_t                                                    mMaxNumDecals;                                           // 0x0328(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mRegionSize;                                             // 0x032C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_56NS[0x50];                                  // 0x0330(0x0050) MISSED OFFSET (PADDING)

	public:
		void STATIC_StaticRemoveFactoryBuildingToProximitySystem(class AActor* Actor, float Weight);
		void STATIC_StaticRegisterFactoryBuildingToProximitySystem(class AActor* Actor, float Weight);
		void RemoveFactoryBuildingToProximitySystem(const struct FVector& Location, float Weight);
		void RegisterFactoryBuildingToProximitySystem(const struct FVector& Location, float Weight);
		void OnPawnChanged(class APawn* NewPawn);
		void OnEnteredMapArea(class AFGPlayerControllerBase* PlayerController, class UClass* NewArea);
		bool IsNearBase(const struct FVector& Location, float Range, int32_t MinimumRequiredBuildables, bool bIgnoreWeight);
		class AFGProximitySubsystem* STATIC_GetProximitySubsystem(class UObject* World);
		class UParticleSystem* GetParticleSystemFromMapArea(class UClass* inArea);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGPushNotificationWidget
	 * Size -> 0x0000 (FullSize[0x0280] - InheritedSize[0x0280])
	 */
	class UFGPushNotificationWidget : public UUserWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGQuickSwitchGroup
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGQuickSwitchGroup : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRadarTowerRepresentation
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class UFGRadarTowerRepresentation : public UFGActorRepresentation
	{
	public:
		TArray<struct FScanObjectPair>                             mFoundActors;                                            // 0x00B8(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPublic

	public:
		void GetFoundWeakSignals(TArray<struct FScanObjectPair>* out_FoundWeakSignals);
		void GetFoundFlora(TArray<class UClass*>* out_FoundFlora);
		void GetFoundFauna(TArray<class UClass*>* out_FoundFauna);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRadialDamageType
	 * Size -> 0x0010 (FullSize[0x0070] - InheritedSize[0x0060])
	 */
	class UFGRadialDamageType : public UFGDamageType
	{
	public:
		float                                                      mDamageRadius;                                           // 0x0060(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mShouldRemoveFoliage;                                    // 0x0064(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_A0S2[0x3];                                   // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDamageImpulseFalloff;                                   // 0x0068(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mDestructibleImpulseFalloff;                             // 0x006C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRadiationInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGRadiationInterface : public UInterface
	{
	public:
		void ReceiveRadiation(float Amount, float Duration, const struct FVector& Direction, class UClass* DamageType);
		bool CanReceiveRadiation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRadiationSettings
	 * Size -> 0x0078 (FullSize[0x00B0] - InheritedSize[0x0038])
	 */
	class UFGRadiationSettings : public UDeveloperSettings
	{
	public:
		class UClass*                                              mRadiationDamageType;                                    // 0x0038(0x0008) Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMaxIntensity;                                           // 0x0040(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMinDamageInterval;                                      // 0x0044(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMaxDamageInterval;                                      // 0x0048(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mDamagePerInterval;                                      // 0x004C(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMinDistanceToSource;                                    // 0x0050(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMinRadiationThreshold;                                  // 0x0054(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mRadiationFalloffByDistance;                             // 0x0058(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5MA2[0x4];                                   // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<EResourcePurity, int32_t>                             mNodeRadiationPurityAmounts;                             // 0x0060(0x0050) Edit, Config, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRadioactiveActor
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGRadioactiveActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_Y6FY[0x8];                                   // 0x02F8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRadioactivitySubsystem
	 * Size -> 0x00F8 (FullSize[0x03F0] - InheritedSize[0x02F8])
	 */
	class AFGRadioactivitySubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_I3KX[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_GPLM[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UObject*, struct FRadioactiveSource>            mSources;                                                // 0x0310(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_X6S5[0x30];                                  // 0x0360(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      mPotentiallyAffectedActors;                              // 0x0390(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class AActor*>                                      mAffectedActors;                                         // 0x03A0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O07Q[0x40];                                  // 0x03B0(0x0040) MISSED OFFSET (PADDING)

	public:
		void SetEmitterByID_Blueprint(class UObject* SourceObject, class USceneComponent* AttachRoot, const struct FVector& attachLocation, float Decay, int32_t UID);
		void SetEmitter_Blueprint(class UObject* SourceObject, class USceneComponent* AttachRoot, const struct FVector& attachLocation, float Decay);
		void RemoveEmitter_Blueprint(class UObject* SourceObject);
		void OnActorSpawned(class AActor* SpawnedActor);
		void OnActorDestroyed(class AActor* DestroyedActor);
		class AFGRadioactivitySubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadBridgeHologram
	 * Size -> 0x00D8 (FullSize[0x0780] - InheritedSize[0x06A8])
	 */
	class AFGRailroadBridgeHologram : public AFGSplineHologram
	{
	public:
		unsigned char                                              UnknownData_DCXK[0x8];                                   // 0x06A8(0x0008) Fix Super Size
		class AFGBuildableFoundation*                              mSnappedFoundation[0x2];                                 // 0x06B0(0x0010) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ZHGV[0xC0];                                  // 0x06C0(0x00C0) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGRailroadFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_IsValid(const struct FRailroadTrackPosition& Position);
		void STATIC_GetWorldLocationAndDirection(const struct FRailroadTrackPosition& Position, struct FVector* out_location, struct FVector* out_direction);
		class AFGBuildableRailroadTrack* STATIC_GetTrack(const struct FRailroadTrackPosition& Position);
		void STATIC_DrawDebugTrackPosition(const struct FRailroadTrackPosition& Position, const struct FColor& Color, bool isPersistentLines);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadSignalHologram
	 * Size -> 0x0018 (FullSize[0x06A0] - InheritedSize[0x0688])
	 */
	class AFGRailroadSignalHologram : public AFGBuildableHologram
	{
	public:
		class UFGRailroadTrackConnectionComponent*                 mSnappedConnection;                                      // 0x0688(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableRailroadSignal*                          mUpgradeTarget;                                          // 0x0690(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2HTF[0x8];                                   // 0x0698(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadRemoteCallObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGRailroadRemoteCallObject : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGRailroadRemoteCallObject;              // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SJU1[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void Server_RerailTrain(class AFGTrain* train);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadSubsystem
	 * Size -> 0x0118 (FullSize[0x0410] - InheritedSize[0x02F8])
	 */
	class AFGRailroadSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_UZQT[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		float                                                      mConnectDistance;                                        // 0x0300(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_1B65[0x4];                                   // 0x0304(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mSwitchControlClass;                                     // 0x0308(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mTrainClass;                                             // 0x0310(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mBlockVisualizationDistance;                             // 0x0318(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_S0JP[0x4];                                   // 0x031C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FLinearColor>                                mBlockVisualizationColors;                               // 0x0320(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GZQT[0x18];                                  // 0x0330(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class FString>                                      mStationNames;                                           // 0x0348(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_B7QB[0x10];                                  // 0x0358(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<int32_t, struct FTrackGraph>                          mTrackGraphs;                                            // 0x0368(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class AFGTrainStationIdentifier*>                   mTrainStationIdentifiers;                                // 0x03B8(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		TArray<class AFGTrain*>                                    mTrains;                                                 // 0x03C8(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VA83[0x10];                                  // 0x03D8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGTrainScheduler*                                   mTrainScheduler;                                         // 0x03E8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UObject*>                                     mBlockVisualizationRequesters;                           // 0x03F0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XP9X[0x10];                                  // 0x0400(0x0010) MISSED OFFSET (PADDING)

	public:
		void SortTrains(TArray<class AFGTrain*>* Trains);
		void OnTrainsCollided(class AFGTrain* first, class AFGTrain* Second);
		void GetTrainStations(int32_t trackID, TArray<class AFGTrainStationIdentifier*>* out_stations);
		void GetTrains(int32_t trackID, TArray<class AFGTrain*>* out_trains);
		void GetAllTrainStations(TArray<class AFGTrainStationIdentifier*>* out_stations);
		void GetAllTrains(TArray<class AFGTrain*>* out_trains);
		class AFGRailroadSubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadSwitchControlHologram
	 * Size -> 0x0008 (FullSize[0x0690] - InheritedSize[0x0688])
	 */
	class AFGRailroadSwitchControlHologram : public AFGBuildableHologram
	{
	public:
		class UFGRailroadTrackConnectionComponent*                 mControlledConnection;                                   // 0x0688(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadTimeTable
	 * Size -> 0x0028 (FullSize[0x0320] - InheritedSize[0x02F8])
	 */
	class AFGRailroadTimeTable : public AInfo
	{
	public:
		unsigned char                                              UnknownData_1APC[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_DT66[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FTimeTableStop>                              mStops;                                                  // 0x0308(0x0010) Edit, Net, ZeroConstructor, EditConst, SaveGame, NativeAccessSpecifierPrivate
		int32_t                                                    mCurrentStop;                                            // 0x0318(0x0004) Edit, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JDVJ[0x4];                                   // 0x031C(0x0004) MISSED OFFSET (PADDING)

	public:
		bool SetStops(TArray<struct FTimeTableStop> stops);
		void SetCurrentStop(int32_t Index);
		void RemoveStop(int32_t Index);
		void PurgeInvalidStops();
		bool IsValidStop(int32_t Index);
		void IncrementCurrentStop();
		void GetStops(TArray<struct FTimeTableStop>* out_stops);
		struct FTimeTableStop GetStop(int32_t Index);
		int32_t GetNumStops();
		int32_t GetMaxNumStops();
		void GetDockingRuleSetForStop(int32_t Index, struct FTrainDockingRuleSet* out_ruleSet);
		int32_t GetCurrentStop();
		bool AddStop(int32_t Index, const struct FTimeTableStop& Stop);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadTrackConnectionComponent
	 * Size -> 0x0058 (FullSize[0x0300] - InheritedSize[0x02A8])
	 */
	class UFGRailroadTrackConnectionComponent : public UFGConnectionComponent
	{
	public:
		class FScriptMulticastDelegate                             mOnConnectionSwitchedDelegate;                           // 0x02A8(0x0010) ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic
		struct FRailroadTrackPosition                              mTrackPosition;                                          // 0x02B8(0x0010) Net, NativeAccessSpecifierPrivate
		TArray<class UFGRailroadTrackConnectionComponent*>         mConnectedComponents;                                    // 0x02C8(0x0010) ExportObject, Net, ZeroConstructor, SaveGame, ContainsInstancedReference, NativeAccessSpecifierPrivate
		int32_t                                                    mSwitchPosition;                                         // 0x02D8(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F1TP[0x4];                                   // 0x02DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableRailroadSwitchControl*                   mSwitchControl;                                          // 0x02E0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableRailroadStation*                         mStation;                                                // 0x02E8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableRailroadSignal*                          mFacingSignal;                                           // 0x02F0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableRailroadSignal*                          mTrailingSignal;                                         // 0x02F8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnConnectionSwitched__DelegateSignature(int32_t NewPosition, int32_t numPositions);
		class UFGRailroadTrackConnectionComponent* GetConnection(int32_t Position);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadTrackHologram
	 * Size -> 0x00A8 (FullSize[0x0750] - InheritedSize[0x06A8])
	 */
	class AFGRailroadTrackHologram : public AFGSplineHologram
	{
	public:
		class UClass*                                              mDefaultSwitchControlRecipe;                             // 0x06A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMinLength;                                              // 0x06B0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaxLength;                                              // 0x06B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMinBendRadius;                                          // 0x06B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaxGrade;                                               // 0x06BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mSnapDistance;                                           // 0x06C0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_O8R1[0x4];                                   // 0x06C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGRailroadTrackConnectionComponent*                 mConnectionComponents[0x2];                              // 0x06C8(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGRailroadTrackConnectionComponent*                 mSnappedConnectionComponents[0x2];                       // 0x06D8(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_24EX[0x20];                                  // 0x06E8(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USplineMeshComponent*>                        mSplineMeshes;                                           // 0x0708(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_I8YV[0x10];                                  // 0x0718(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMesh*                                         mMesh;                                                   // 0x0728(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ASGH[0x8];                                   // 0x0730(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGRailroadSwitchControlHologram*                    mSwitchControls[0x2];                                    // 0x0738(0x0010) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8G6N[0x8];                                   // 0x0748(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_VehicleDerailed
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_VehicleDerailed : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadVehicleAnim
	 * Size -> 0x0A88 (FullSize[0x0DD0] - InheritedSize[0x0348])
	 */
	class UFGRailroadVehicleAnim : public UAnimInstance
	{
	public:
		class UCurveFloat*                                         mBrakeCurve;                                             // 0x0348(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGRailroadVehicle*                                  mVehicle;                                                // 0x0350(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGLocomotive*                                       mLocomotive;                                             // 0x0358(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FAnimInstanceProxyRailroadVehicle                   mProxy;                                                  // 0x0360(0x09F0) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_O25I[0x8];                                   // 0x0D50(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialInstanceDynamic*                            mTrainMaterial;                                          // 0x0D58(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class FName>                                        mBrakeSocketNames;                                       // 0x0D60(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<class UParticleSystemComponent*>                    mBrakeEffects;                                           // 0x0D70(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class FName>                                        mSteamSocketNames;                                       // 0x0D80(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		TArray<class UParticleSystemComponent*>                    mSteamEffects;                                           // 0x0D90(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     mBrakeSparkTemplate;                                     // 0x0DA0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     mSteamTemplate;                                          // 0x0DA8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UAkAudioEvent*                                       mBrakeSound;                                             // 0x0DB0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystem*                                     mHandBrakeVfxTemplate;                                   // 0x0DB8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UParticleSystemComponent*                            mHandBrakeVfxComponent;                                  // 0x0DC0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YFJH[0x8];                                   // 0x0DC8(0x0008) MISSED OFFSET (PADDING)

	public:
		void TriggerHandBrakeVfx();
		void SetUsingHandBrake(bool InValue);
		void SetupHandBrakeEffects();
		void RemoveHandBrakeEffects();
		void RemoveBrakeEffects();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadVehicleHologram
	 * Size -> 0x0020 (FullSize[0x0500] - InheritedSize[0x04E0])
	 */
	class AFGRailroadVehicleHologram : public AFGVehicleHologram
	{
	public:
		unsigned char                                              UnknownData_8TMT[0x4];                                   // 0x04E0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mLength;                                                 // 0x04E4(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FRailroadTrackPosition                              mTrackPosition;                                          // 0x04E8(0x0010) NativeAccessSpecifierPrivate
		class AFGRailroadVehicle*                                  mSnappedVehicle;                                         // 0x04F8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRailroadVehicleRerailHologram
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class AFGRailroadVehicleRerailHologram : public AActor
	{
	public:
		unsigned char                                              UnknownData_411Z[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_IN16[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRainOcclusionActor
	 * Size -> 0x00E8 (FullSize[0x03E0] - InheritedSize[0x02F8])
	 */
	class AFGRainOcclusionActor : public AActor
	{
	public:
		TMap<class UStaticMesh*, class UInstancedStaticMeshComponent*> mCustomOccluderShapes;                                   // 0x02F8(0x0050) Edit, ExportObject, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic
		class UInstancedStaticMeshComponent*                       mBoxShapedOccluder;                                      // 0x0348(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInstancedStaticMeshComponent*                       mRampShapeOccluder;                                      // 0x0350(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UInstancedStaticMeshComponent*                       mTriangleShapeOccluder;                                  // 0x0358(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mNumEntriesToHandlePerFrame;                             // 0x0360(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_KPSL[0x74];                                  // 0x0364(0x0074) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       bIsActive;                                               // 0x03D8(0x0001) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_WKJE[0x7];                                   // 0x03D9(0x0007) MISSED OFFSET (PADDING)

	public:
		void STATIC_SetupStaticMeshComponentFlags(class UStaticMeshComponent* Component);
		void SetUpdateRainOccluders(bool bActive);
		void RemoveShape(class AFGBuildable* buildable);
		void AddShape(class AFGBuildable* buildable);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRampHologram
	 * Size -> 0x0010 (FullSize[0x0730] - InheritedSize[0x0720])
	 */
	class AFGRampHologram : public AFGFoundationHologram
	{
	public:
		unsigned char                                              UnknownData_ECQ1[0x10];                                  // 0x0720(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRecipeManager
	 * Size -> 0x0048 (FullSize[0x0340] - InheritedSize[0x02F8])
	 */
	class AFGRecipeManager : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_DLY3[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class FScriptMulticastDelegate                             mOnRecipeAvailable;                                      // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      mAvailableRecipes;                                       // 0x0310(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mAvailableCustomizationRecipes;                          // 0x0320(0x0010) Net, ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mAvailableBuildings;                                     // 0x0330(0x0010) ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate

	public:
		void OnRep_AvailableRecipes();
		bool IsRecipeAvailable(class UClass* recipeClass);
		bool IsCustomizationRecipeAvailable(class UClass* recipeClass);
		bool IsBuildingAvailable(class UClass* BuildableClass);
		void GetAvailableRecipesForProducer(class UClass* forProducer, TArray<class UClass*>* out_recipes);
		void GetAllAvailableRecipes(TArray<class UClass*>* out_recipes);
		void GetAllAvailableCustomizationRecipes(TArray<class UClass*>* out_recipes);
		void GetAffordableRecipesForProducer(class AFGCharacterPlayer* Player, class UClass* forProducer, TArray<class UClass*>* out_recipes);
		class AFGRecipeManager* STATIC_Get(class UObject* WorldContext);
		TArray<class UClass*> FindRecipesByProduct(class UClass* product);
		TArray<class UClass*> FindRecipesByIngredient(class UClass* ingredient);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRecipeProducerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGRecipeProducerInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRecipeShortcut
	 * Size -> 0x0008 (FullSize[0x0060] - InheritedSize[0x0058])
	 */
	class UFGRecipeShortcut : public UFGHotbarShortcut
	{
	public:
		class UClass*                                              mRecipeToActivate;                                       // 0x0058(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetRecipe(class UClass* recipe, bool silent);
		void OnRep_Recipe();
		void OnRecipeUnlocked(class UClass* recipeClass);
		class UClass* GetRecipe();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRecipeUnlockedDependency
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFGRecipeUnlockedDependency : public UFGAvailabilityDependency
	{
	public:
		TArray<class UClass*>                                      mRecipes;                                                // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       mRequireAllRecipesToBeUnlocked;                          // 0x0038(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5C9T[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		void GetRecipes(TArray<class UClass*>* out_recipes);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRenderTargetStage
	 * Size -> 0x0028 (FullSize[0x0320] - InheritedSize[0x02F8])
	 */
	class AFGRenderTargetStage : public AActor
	{
	public:
		unsigned char                                              UnknownData_CFH1[0x4];                                   // 0x02F8(0x0004) Fix Super Size
		int32_t                                                    mDynamicRenderTargetSizeY;                               // 0x02FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EPixelFormat                                               mDynamicPixelFormat;                                     // 0x0300(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AK9O[0x7];                                   // 0x0301(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneCaptureComponent2D*                            mSceneCaptureComponent;                                  // 0x0308(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class USceneComponent*                                     mStage;                                                  // 0x0310(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mDynamicRenderTarget : 1;                                // 0x0318(0x0001) BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4Y9B[0x7];                                   // 0x0319(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateRenderedComponents();
		void SetView(const struct FItemView& View);
		void SetPreviewDistance(float Distance);
		class USceneComponent* GetStage();
		class UTextureRenderTarget2D* GetRenderTarget();
		void EndCapture();
		void CaptureOnce();
		void BeginCapture();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActor
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class AFGReplicationDetailActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_QKHL[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class AFGBuildable*                                        mOwningBuildable;                                        // 0x0300(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_0YY8[0x8];                                   // 0x0308(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActor_BuildableFactory
	 * Size -> 0x0010 (FullSize[0x0320] - InheritedSize[0x0310])
	 */
	class AFGReplicationDetailActor_BuildableFactory : public AFGReplicationDetailActor
	{
	public:
		unsigned char                                              UnknownData_563G[0x8];                                   // 0x0310(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGInventoryComponent*                               mInventoryPotential;                                     // 0x0318(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void OnRep_Inventory();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRepDetailActor_Extractor
	 * Size -> 0x0010 (FullSize[0x0330] - InheritedSize[0x0320])
	 */
	class AFGRepDetailActor_Extractor : public AFGReplicationDetailActor_BuildableFactory
	{
	public:
		class UFGInventoryComponent*                               mOutputInventory;                                        // 0x0320(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CVO4[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDependencyActorInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGReplicationDependencyActorInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActorOwnerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGReplicationDetailActorOwnerInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActor_CargoPlatform
	 * Size -> 0x0010 (FullSize[0x0330] - InheritedSize[0x0320])
	 */
	class AFGReplicationDetailActor_CargoPlatform : public AFGReplicationDetailActor_BuildableFactory
	{
	public:
		class UFGInventoryComponent*                               mCargoInventory;                                         // 0x0320(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2X35[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActor_DockingStation
	 * Size -> 0x0010 (FullSize[0x0330] - InheritedSize[0x0320])
	 */
	class AFGReplicationDetailActor_DockingStation : public AFGReplicationDetailActor_BuildableFactory
	{
	public:
		class UFGInventoryComponent*                               mCargoInventory;                                         // 0x0320(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGInventoryComponent*                               mFuelInventory;                                          // 0x0328(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActor_DroneStation
	 * Size -> 0x0020 (FullSize[0x0340] - InheritedSize[0x0320])
	 */
	class AFGReplicationDetailActor_DroneStation : public AFGReplicationDetailActor_BuildableFactory
	{
	public:
		class UFGInventoryComponent*                               mInputInventory;                                         // 0x0320(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGInventoryComponent*                               mOutputInventory;                                        // 0x0328(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGInventoryComponent*                               mBatteryInventory;                                       // 0x0330(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2BWI[0x8];                                   // 0x0338(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActor_GeneratorFuel
	 * Size -> 0x0008 (FullSize[0x0328] - InheritedSize[0x0320])
	 */
	class AFGReplicationDetailActor_GeneratorFuel : public AFGReplicationDetailActor_BuildableFactory
	{
	public:
		class UFGInventoryComponent*                               mFuelInventory;                                          // 0x0320(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActor_GeneratorNuclear
	 * Size -> 0x0008 (FullSize[0x0330] - InheritedSize[0x0328])
	 */
	class AFGReplicationDetailActor_GeneratorNuclear : public AFGReplicationDetailActor_GeneratorFuel
	{
	public:
		class UFGInventoryComponent*                               mWasteInventory;                                         // 0x0328(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActor_Manufacturing
	 * Size -> 0x0020 (FullSize[0x0340] - InheritedSize[0x0320])
	 */
	class AFGReplicationDetailActor_Manufacturing : public AFGReplicationDetailActor_BuildableFactory
	{
	public:
		class UFGInventoryComponent*                               mInputInventory;                                         // 0x0320(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGInventoryComponent*                               mOutputInventory;                                        // 0x0328(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCurrentManufacturingProgress;                           // 0x0330(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ICOG[0xC];                                   // 0x0334(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActor_PowerStorage
	 * Size -> 0x0010 (FullSize[0x0330] - InheritedSize[0x0320])
	 */
	class AFGReplicationDetailActor_PowerStorage : public AFGReplicationDetailActor_BuildableFactory
	{
	public:
		float                                                      mPowerStore;                                             // 0x0320(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mPowerInput;                                             // 0x0324(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_4TG2[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActor_ResourceSink
	 * Size -> 0x0010 (FullSize[0x0330] - InheritedSize[0x0320])
	 */
	class AFGReplicationDetailActor_ResourceSink : public AFGReplicationDetailActor_BuildableFactory
	{
	public:
		class UFGInventoryComponent*                               mCouponInventory;                                        // 0x0320(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YITF[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationDetailActor_Storage
	 * Size -> 0x0010 (FullSize[0x0330] - InheritedSize[0x0320])
	 */
	class AFGReplicationDetailActor_Storage : public AFGReplicationDetailActor_BuildableFactory
	{
	public:
		class UFGInventoryComponent*                               mStorageInventory;                                       // 0x0320(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WNJ6[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationGraph
	 * Size -> 0x01D0 (FullSize[0x0750] - InheritedSize[0x0580])
	 */
	class UFGReplicationGraph : public UReplicationGraph
	{
	public:
		TArray<class UClass*>                                      mSpatializedClasses;                                     // 0x0580(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      mNonSpatializedClasses;                                  // 0x0590(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      mAlwaysRelevantClasses;                                  // 0x05A0(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		class UReplicationGraphNode_GridSpatialization2D*          mGridNode;                                               // 0x05B0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UReplicationGraphNode_GridSpatialization2D*          mPrioritizedGridNode;                                    // 0x05B8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UReplicationGraphNode_GridSpatialization2D*          mConveyorFrequencyNode;                                  // 0x05C0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UReplicationGraphNode_ActorList*                     mAlwaysRelevantNode;                                     // 0x05C8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGReplicationGraphNode_ConditionallyAlwaysRelevant* mConditionalRelevancyNode;                               // 0x05D0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UFGReplicationGraphNode_PlayerStateFrequencyLimiter* mPlayerStateNode;                                        // 0x05D8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FConnectionAlwaysRelevant_NodePair>          mAlwaysRelevantForConnectionList;                        // 0x05E0(0x0010) ZeroConstructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_04DD[0x50];                                  // 0x05F0(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mPersistentDependencyClasses[0x50];                      // 0x0640(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              UnknownData_OU4O[0xA8];                                  // 0x0690(0x00A8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      mActorsWithoutNetConnection;                             // 0x0738(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JCR7[0x8];                                   // 0x0748(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationGraphNode_ConditionallyAlwaysRelevant
	 * Size -> 0x0010 (FullSize[0x00E0] - InheritedSize[0x00D0])
	 */
	class UFGReplicationGraphNode_ConditionallyAlwaysRelevant : public UReplicationGraphNode_ActorList
	{
	public:
		unsigned char                                              UnknownData_UB90[0x10];                                  // 0x00D0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationGraphNode_ConveyorSpatialFrequency
	 * Size -> 0x0070 (FullSize[0x01B0] - InheritedSize[0x0140])
	 */
	class UFGReplicationGraphNode_ConveyorSpatialFrequency : public UReplicationGraphNode_GridCell
	{
	public:
		unsigned char                                              UnknownData_BNTY[0x70];                                  // 0x0140(0x0070) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationGraphNode_PlayerStateFrequencyLimiter
	 * Size -> 0x0028 (FullSize[0x0078] - InheritedSize[0x0050])
	 */
	class UFGReplicationGraphNode_PlayerStateFrequencyLimiter : public UReplicationGraphNode
	{
	public:
		unsigned char                                              UnknownData_JEXE[0x28];                                  // 0x0050(0x0028) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGReplicationGraphNode_AlwaysRelevant_ForConnection
	 * Size -> 0x0218 (FullSize[0x0358] - InheritedSize[0x0140])
	 */
	class UFGReplicationGraphNode_AlwaysRelevant_ForConnection : public UReplicationGraphNode_AlwaysRelevant_ForConnection
	{
	public:
		unsigned char                                              UnknownData_2IDB[0x218];                                 // 0x0140(0x0218) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResearchMachine
	 * Size -> 0x0030 (FullSize[0x02D0] - InheritedSize[0x02A0])
	 */
	class UFGResearchMachine : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_3YN0[0x8];                                   // 0x02A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mCurrentResearchRecipe;                                  // 0x02A8(0x0008) Net, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGCharacterPlayer*                                  mPlayerUsingMachine;                                     // 0x02B0(0x0008) Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMeshComponent*                                mResearchingMeshComponent;                               // 0x02B8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UStaticMesh*                                         mResearchingMesh;                                        // 0x02C0(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UCurveFloat*                                         mItemScaleCurve;                                         // 0x02C8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetResearchRecipe(class UClass* researchRecipe);
		void SetResearchMeshCurveScale(class UCurveFloat* curveScale);
		void SetResearchMeshComponent(class UStaticMeshComponent* StaticMeshComponent);
		void SetMachineUser(class AFGCharacterPlayer* Player);
		void OnResearchStarted(class UClass* schematic);
		void OnResearchConcluded(class UClass* schematic);
		void OnRep_ResearchMesh();
		bool IsResearchBeingConducted();
		class UStaticMeshComponent* GetResearchMeshComponent();
		class AFGCharacterPlayer* GetMachineUser();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResearchManager
	 * Size -> 0x00D8 (FullSize[0x03D0] - InheritedSize[0x02F8])
	 */
	class AFGResearchManager : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_SIRJ[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class FScriptMulticastDelegate                             ResearchStartedDelegate;                                 // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ResearchCompletedDelegate;                               // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ResearchStateChangedDelegate;                            // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ResearchResultsClaimedDelegate;                          // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ResearchTreeUnlockedDelegate;                            // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_86Z2[0x18];                                  // 0x0350(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mCanConductMultipleResearch;                             // 0x0368(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3ULB[0x7];                                   // 0x0369(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mAvailableResearchTrees;                                 // 0x0370(0x0010) Net, ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mUnlockedResearchTrees;                                  // 0x0380(0x0010) Net, ZeroConstructor, SaveGame, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<struct FResearchData>                               mCompletedResearch;                                      // 0x0390(0x0010) Net, ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		TArray<struct FResearchTime>                               mOngoingResearch;                                        // 0x03A0(0x0010) Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected
		TArray<struct FResearchTime>                               mSavedOngoingResearch;                                   // 0x03B0(0x0010) ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		bool                                                       mIsActivated;                                            // 0x03C0(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_L8U3[0x7];                                   // 0x03C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mMAMClass;                                               // 0x03C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void SetActivated(bool inActivate);
		void OnResearchTimerComplete(class UClass* schematic);
		void OnRep_OngoingResearch();
		void OnBuildingBuiltGlobal(class AFGBuildable* buildable);
		void Multicast_ResearchCompleted(class UClass* research);
		bool STATIC_IsTreeFullyResearched(class UObject* WorldContextObject, class UClass* reserachTree, class UClass* schematicToIgnore);
		bool IsResesearchTreeUnlocked(class UClass* researchTree);
		bool IsResearchComplete(class UClass* schematic);
		bool IsResearchBeingConducted(class UClass* schematic);
		bool IsAnyResearchBeingConducted();
		bool IsActivated();
		bool InitiateResearch(class UFGInventoryComponent* playerInventory, class UClass* schematic, class UClass* InitiatingResearchTree);
		class UClass* GetResearchBeingConducted();
		void GetPendingRewards(class UClass* schematic, TArray<class UClass*>* out_rewards);
		float GetOngoingResearchTimeLeft(class UClass* schematic);
		class UClass* GetInitiatingResearchTree(class UClass* schematic);
		EResearchState GetCurrentResearchState();
		void GetAllResearchTrees(TArray<class UClass*>* out_ResearchTrees);
		void GetAllCompletedResearch(TArray<class UClass*>* out_schematics);
		class AFGResearchManager* STATIC_Get(class UObject* WorldContext);
		bool ContainsAnyCompletedResearch();
		bool ClaimResearchResults(class AFGCharacterPlayer* instigatorPlayer, class UClass* schematic, int32_t selectedRewardIndex);
		bool CanResearchBeInitiated(class UClass* schematic);
		bool CanConductMultipleResearch();
		bool CanAffordResearch(class UFGInventoryComponent* playerInventory, class UClass* schematic);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResearchRecipe
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UFGResearchRecipe : public UFGRecipe
	{
	public:
		TArray<class UClass*>                                      mTriggerItems;                                           // 0x00B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       mIsRepeatable;                                           // 0x00C0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mRewardUsesDropPackage;                                  // 0x00C1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J36N[0x6];                                   // 0x00C2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mUnlockedResearch[0x10];                                 // 0x00C8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              mUnlockedSchematics[0x10];                               // 0x00D8(0x0010) UNKNOWN PROPERTY: ArrayProperty
		int32_t                                                    mDecorPoints;                                            // 0x00E8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mStructurePoints;                                        // 0x00EC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mExcludeFromBuild;                                       // 0x00F0(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ODBH[0x7];                                   // 0x00F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FAssetBundleData                                    mAssetBundleData;                                        // 0x00F8(0x0010) NativeAccessSpecifierPrivate

	public:
		bool STATIC_IsValidResearchRecipeReward(const struct FResearchRecipeReward& recipeReward);
		bool STATIC_IsResearchRepeatable(class UClass* InClass);
		struct FResearchRecipeReward STATIC_GetResearcResults(class UClass* InClass);
		TArray<class UClass*> STATIC_GetResearchTriggerItems(class UClass* InClass);
		float STATIC_GetResearchTime(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResearchTree
	 * Size -> 0x0188 (FullSize[0x01B0] - InheritedSize[0x0028])
	 */
	class UFGResearchTree : public UObject
	{
	public:
		class FText                                                mPreUnlockDisplayName;                                   // 0x0028(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FText                                                mDisplayName;                                            // 0x0040(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FText                                                mPreUnlockDescription;                                   // 0x0058(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FText                                                mPostUnlockDescription;                                  // 0x0070(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SRST[0x8];                                   // 0x0088(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FSlateBrush                                         mResearchTreeIcon;                                       // 0x0090(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UFGAvailabilityDependency*>                   mUnlockDependencies;                                     // 0x0160(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<class UFGAvailabilityDependency*>                   mVisibilityDependencies;                                 // 0x0170(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<EEvents>                                            mRelevantEvents;                                         // 0x0180(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TArray<class UFGResearchTreeNode*>                         mNodes;                                                  // 0x0190(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FAssetBundleData                                    mAssetBundleData;                                        // 0x01A0(0x0010) NativeAccessSpecifierPrivate

	public:
		void STATIC_SetNodes(class UClass* InClass, TArray<class UFGResearchTreeNode*> Nodes);
		TArray<class UFGAvailabilityDependency*> STATIC_GetUnlockDependencies(class UClass* InClass);
		struct FSlateBrush STATIC_GetResearchTreeIcon(class UClass* InClass);
		TArray<EEvents> STATIC_GetRelevantEvents(class UClass* InClass);
		class FText STATIC_GetPreUnlockDisplayName(class UClass* InClass);
		class FText STATIC_GetPreUnlockDescription(class UClass* InClass);
		class FText STATIC_GetPostUnlockDescription(class UClass* InClass);
		TArray<class UFGResearchTreeNode*> STATIC_GetNodes(class UClass* InClass);
		class FText STATIC_GetDisplayName(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResearchTreeNode
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGResearchTreeNode : public UObject
	{
	public:
		class UClass* GetNodeSchematic();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResearchTreeUnlockedDependency
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFGResearchTreeUnlockedDependency : public UFGAvailabilityDependency
	{
	public:
		unsigned char                                              mResearchTrees[0x10];                                    // 0x0028(0x0010) UNKNOWN PROPERTY: ArrayProperty
		bool                                                       mRequireAllTreesToBeUnlocked;                            // 0x0038(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9IBL[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		void GetResearchTrees(TArray<class UClass*>* out_ResearchTrees);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceNodeBase
	 * Size -> 0x00C4 (FullSize[0x03BC] - InheritedSize[0x02F8])
	 */
	class AFGResourceNodeBase : public AFGStaticReplicatedActor
	{
	public:
		unsigned char                                              UnknownData_KFOI[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_X2QE[0x18];                                  // 0x0300(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mResourceClass;                                          // 0x0318(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UDecalComponent*                                     mDecalComponent;                                         // 0x0320(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       mBoxComponent;                                           // 0x0328(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsOccupied;                                             // 0x0330(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IBCJ[0x7];                                   // 0x0331(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UObject*>                                     mRevealedOnMapBy;                                        // 0x0338(0x0010) ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
		unsigned char                                              mReplicatedMapReveals;                                   // 0x0348(0x0001) Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V9Q7[0x7];                                   // 0x0349(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGResourceNodeRepresentation*                       mResourceNodeRepresentation;                             // 0x0350(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_E21J[0x1];                                   // 0x0358(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mAllowDecal;                                             // 0x0359(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_T6HF[0x6];                                   // 0x035A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UParticleSystem*                                     mHighlightParticleSystemTemplate;                        // 0x0360(0x0008) Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UParticleSystemComponent*                            mHighlightParticleSystemComponent;                       // 0x0368(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mDoSpawnParticle;                                        // 0x0370(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4ROQ[0x7];                                   // 0x0371(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mMeshActor[0x30];                                        // 0x0378(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		bool                                                       mAddToSignificanceManager;                               // 0x03A8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HDHG[0x3];                                   // 0x03A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mSignificanceRange;                                      // 0x03AC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_KTI3[0xC];                                   // 0x03B0(0x000C) Fix size for supers

	public:
		void SetIsOccupied(bool occupied);
		void RemoveResourceNodeScan_Replicated();
		void RemoveResourceNodeScan_Local();
		void OnRep_MapReveals();
		void OnRep_IsOccupied();
		void OnIsOccupiedChanged(bool newIsOccupied);
		bool IsSignificant();
		bool IsOccupied();
		bool HasAnyResources();
		EResourceNodeType GetResourceNodeType();
		class FText GetResourceName();
		class UClass* GetResourceClass();
		struct FVector GetPlacementLocation(const struct FVector& HitLocation);
		class AActor* GetMeshActor();
		float GetExtractionSpeedMultiplier();
		int32_t ExtractResource(int32_t Amount);
		bool CanPlaceResourceExtractor();
		bool CanBecomeOccupied();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceNode
	 * Size -> 0x002C (FullSize[0x03E8] - InheritedSize[0x03BC])
	 */
	class AFGResourceNode : public AFGResourceNodeBase
	{
	public:
		int32_t                                                    mResourcesLeft;                                          // 0x03BC(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanPlaceResourceExtractor;                              // 0x03C0(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZGNY[0x3];                                   // 0x03C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mExtractMultiplier;                                      // 0x03C4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FPurityTextPair>                             mPurityTextArray;                                        // 0x03C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NT7T[0x10];                                  // 0x03D8(0x0010) Fix size for supers

	public:
		void ToggleResourcePickUI(class AFGCharacterPlayer* Player);
		void InitResource(class UClass* ResourceClass, EResourceAmount Amount, EResourcePurity Purity);
		EResourceAmount GetResourceAmount();
		class FText GetResoucesLeftText();
		class FText GetResoucePurityText();
		EResourcePurity GetResoucePurity();
		int32_t GetExtractMultiplier();
		void ExtractResourceAndGiveToPlayer(class AFGCharacterPlayer* toPlayer, int32_t Amount);
		void ClearWidget();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceDeposit
	 * Size -> 0x0078 (FullSize[0x0460] - InheritedSize[0x03E8])
	 */
	class AFGResourceDeposit : public AFGResourceNode
	{
	public:
		struct FResourceDepositPackage                             mResourceDepositPackage;                                 // 0x03E8(0x0048) NativeAccessSpecifierPrivate
		int32_t                                                    mResourceDepositTableIndex;                              // 0x0430(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsEmptied;                                              // 0x0434(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0L7T[0x3];                                   // 0x0435(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mMineAmount;                                             // 0x0438(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasInitializedVisuals;                                  // 0x043C(0x0001) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M02H[0x3];                                   // 0x043D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UStaticMeshComponent*                                mDepositMeshComponent;                                   // 0x0440(0x0008) Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mOverrideResourceClass;                                  // 0x0448(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mCanBeRadioactive;                                       // 0x0450(0x0001) Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_M1GH[0xF];                                   // 0x0451(0x000F) MISSED OFFSET (PADDING)

	public:
		void PlayDepletedEffect(class UClass* Descriptor);
		void OnRep_ResourceDepositTableIndex();
		void OnRep_ResourceDepositEmptied();
		bool IsDepositEmpty();
		int32_t GetMineAmount();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceDescriptor
	 * Size -> 0x0058 (FullSize[0x01F8] - InheritedSize[0x01A0])
	 */
	class UFGResourceDescriptor : public UFGItemDescriptor
	{
	public:
		class UStaticMesh*                                         mDepositMesh;                                            // 0x01A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInstance*                                   mDepositMaterial;                                        // 0x01A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterial*                                           mDecalMaterial;                                          // 0x01B0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDecalSize;                                              // 0x01B8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FLinearColor                                        mPingColor;                                              // 0x01BC(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCollectSpeedMultiplier;                                 // 0x01CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mCompassTexture;                                         // 0x01D0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     mManualMiningParticle;                                   // 0x01D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     mFactoryMiningParticle;                                  // 0x01E0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UParticleSystem*                                     mDestroyedParticle;                                      // 0x01E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mManualMiningAudioName;                                  // 0x01F0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		struct FLinearColor STATIC_GetPingColor(class UClass* InClass);
		class UParticleSystem* STATIC_GetManualMiningParticle(class UClass* InClass);
		class FName STATIC_GetManualMiningAudioName(class UClass* InClass);
		class UParticleSystem* STATIC_GetFactoryMiningParticle(class UClass* InClass);
		class UParticleSystem* STATIC_GetDestroyedParticle(class UClass* InClass);
		class UStaticMesh* STATIC_GetDepositMesh(class UClass* InClass);
		class UMaterialInstance* STATIC_GetDepositMaterial(class UClass* InClass);
		float STATIC_GetDecalSize(class UClass* InClass);
		class UMaterial* STATIC_GetDecalMaterial(class UClass* InClass);
		class UTexture2D* STATIC_GetCompasTexture(class UClass* InClass);
		float STATIC_GetCollectSpeedMultiplier(class UClass* InClass);
		bool STATIC_CanBeHandMined(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceDescriptorGeyser
	 * Size -> 0x0000 (FullSize[0x01F8] - InheritedSize[0x01F8])
	 */
	class UFGResourceDescriptorGeyser : public UFGResourceDescriptor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceMiner
	 * Size -> 0x0030 (FullSize[0x04B0] - InheritedSize[0x0480])
	 */
	class AFGResourceMiner : public AFGEquipment
	{
	public:
		float                                                      mMiningCycleDuration;                                    // 0x0480(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mMaximumHoldDurationToToggle;                            // 0x0484(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mOverrideEquipment;                                      // 0x0488(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3N7Z[0x7];                                   // 0x0489(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGResourceNode*                                     mPendingResourceNode;                                    // 0x0490(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGResourceNode*                                     mActiveResourceNode;                                     // 0x0498(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_U0TU[0x10];                                  // 0x04A0(0x0010) MISSED OFFSET (PADDING)

	public:
		void StopMiningIfNotToggleBased();
		void Server_MiningCycleCompleted();
		void Server_GiveMiningRewards();
		void Server_ClientStartedMining(class AFGResourceNode* ResourceNode);
		void Server_AttemptAutoEquipAndStartMining(class AFGResourceNode* ResourceNode);
		void OnRep_ActiveResourceNode(class AFGResourceNode* oldResourceNode);
		void OnPendingResourceNodeChanged(class AFGResourceNode* oldResourceNode);
		void Multicast_MiningCycleCompleted();
		void LocalCompleteMiningCycle();
		void K2_OnStoppedMining(class AFGResourceNode* oldResourceNode);
		void K2_OnStartedMining();
		void K2_OnMiningCycleCompleted();
		bool IsMining();
		class AFGResourceNode* GetMiningResourceNode();
		void ForceStopMining();
		void Client_StartServerGuidedMining(class AFGResourceNode* ResourceNode);
		void Client_ForceStopMining();
		void AttemptAutoEquipAndStartMining(class AFGResourceNode* ResourceNode);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_NodeFullInventory
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_NodeFullInventory : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_NonConveyorResource
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_NonConveyorResource : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceNodeFrackingCore
	 * Size -> 0x0014 (FullSize[0x03D0] - InheritedSize[0x03BC])
	 */
	class AFGResourceNodeFrackingCore : public AFGResourceNodeBase
	{
	public:
		unsigned char                                              UnknownData_81EZ[0x4];                                   // 0x03BC(0x0004) Fix Super Size
		unsigned char                                              UnknownData_9JB7[0x10];                                  // 0x03C0(0x0010) MISSED OFFSET (PADDING)

	public:
		void GetSatellites(TArray<class AFGResourceNodeFrackingSatellite*>* out_Satellites);
		int32_t GetNumOccupiedSatellites(int32_t* numSatellites);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceNodeFrackingSatellite
	 * Size -> 0x0018 (FullSize[0x0400] - InheritedSize[0x03E8])
	 */
	class AFGResourceNodeFrackingSatellite : public AFGResourceNode
	{
	public:
		class AFGResourceNodeFrackingCore*                         mCore;                                                   // 0x03E8(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EFrackingSatelliteState                                    mState;                                                  // 0x03F0(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MTA5[0xF];                                   // 0x03F1(0x000F) MISSED OFFSET (PADDING)

	public:
		void OnStateChanged(EFrackingSatelliteState State, bool isFirstTimeActivated);
		void OnRep_State();
		EFrackingSatelliteState GetState();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceNodeGeyser
	 * Size -> 0x0018 (FullSize[0x0400] - InheritedSize[0x03E8])
	 */
	class AFGResourceNodeGeyser : public AFGResourceNode
	{
	public:
		TArray<class AFGBuildableGeneratorGeoThermal*>             mAttachedGeoThermals;                                    // 0x03E8(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EMQD[0x8];                                   // 0x03F8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceNodeRepresentation
	 * Size -> 0x0010 (FullSize[0x00C8] - InheritedSize[0x00B8])
	 */
	class UFGResourceNodeRepresentation : public UFGActorRepresentation
	{
	public:
		class AFGResourceNodeBase*                                 mResourceNode;                                           // 0x00B8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2XWE[0x8];                                   // 0x00C0(0x0008) MISSED OFFSET (PADDING)

	public:
		bool IsOccupied();
		bool IsCluster();
		class AFGResourceNodeBase* GetResourceNode();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceScanner
	 * Size -> 0x0040 (FullSize[0x04C0] - InheritedSize[0x0480])
	 */
	class AFGResourceScanner : public AFGEquipment
	{
	public:
		class UClass*                                              mResourceDescriptorToScanFor;                            // 0x0480(0x0008) ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mNrOfClosestClustersToMark;                              // 0x0488(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mLastPressedTimeStamp;                                   // 0x048C(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mHoldDownDurationForUI;                                  // 0x0490(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsPressingScan;                                         // 0x0494(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsWaitingForSelectionUI;                                // 0x0495(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H9IU[0x2];                                   // 0x0496(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDistBetweenNodesInCluster;                              // 0x0498(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mUnclusterRange;                                         // 0x049C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRepresentationLifeSpan;                                 // 0x04A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_W9KK[0x4];                                   // 0x04A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FNodeClusterData>                            mNodeClusters;                                           // 0x04A8(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_VG2L[0x8];                                   // 0x04B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void ShowResourceDescriptorSelectUI();
		void SetResourceDescriptorToScanFor(class UClass* InClass);
		void SetPressingScan(bool isPressingScan);
		void Server_ScanReleased();
		void PlayClusterEffects(TArray<struct FNodeClusterData> clusters);
		TArray<class UClass*> GetScannableResources();
		class UClass* GetResourceDescriptorToScanFor();
		void CreateResourceNodeRepresentations(const struct FNodeClusterData& cluster);
		void CloseResourceDescriptorSelectUI();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceSettings
	 * Size -> 0x0160 (FullSize[0x0198] - InheritedSize[0x0038])
	 */
	class UFGResourceSettings : public UDeveloperSettings
	{
	public:
		TArray<struct FResourceDepositPackage>                     mResourceDepositTable;                                   // 0x0038(0x0010) Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
		TArray<struct FInt32Interval>                              mResourceAmount;                                         // 0x0048(0x0010) Edit, EditFixedSize, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<float>                                              mPurityMultiplier;                                       // 0x0058(0x0010) Edit, EditFixedSize, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              mWaterResourceDescriptor[0x30];                          // 0x0068(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mDefaultItemMesh[0x30];                                  // 0x0098(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		TMap<int32_t, EStackSize>                                  mStackSizes;                                             // 0x00C8(0x0050) Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              mItemDropClass[0x30];                                    // 0x0118(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mGeyserPowerOutputCurves[0x50];                          // 0x0148(0x0050) UNKNOWN PROPERTY: MapProperty

	public:
		int32_t GetStackSizeFromEnum(EStackSize StackSize);
		struct FResourceDepositPackage STATIC_GetResourceDepositDataFromClass(class UClass* desiredResourceClass, int32_t* out_resourceDepositPackageIdx, class AActor* WorldContext);
		struct FResourceDepositPackage STATIC_GetRandomResourceDepositData(int32_t* out_resourceDepositPackageIdx, bool canBeRadioActive);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceSinkCreditDescriptor
	 * Size -> 0x0000 (FullSize[0x01A0] - InheritedSize[0x01A0])
	 */
	class UFGResourceSinkCreditDescriptor : public UFGItemDescriptor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceSinkSettings
	 * Size -> 0x01E0 (FullSize[0x0218] - InheritedSize[0x0038])
	 */
	class UFGResourceSinkSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              mPointsDataTable[0x30];                                  // 0x0038(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mRewardLevelsDataTable[0x30];                            // 0x0068(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mExplorationPointsDataTable[0x30];                       // 0x0098(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mExplorationRewardLevelsDataTable[0x30];                 // 0x00C8(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		int32_t                                                    mMaxPointsForItem;                                       // 0x00F8(0x0004) Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KHSS[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              mPointCalculationExpression;                             // 0x0100(0x0010) Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              mCouponClass[0x30];                                      // 0x0110(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		int32_t                                                    mNumGlobalHistoryPoints;                                 // 0x0140(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_UCBW[0x4];                                   // 0x0144(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UClass*, class UClass*>                         mFailedSinkMessages;                                     // 0x0148(0x0050) Edit, Config, UObjectWrapper, NativeAccessSpecifierPublic
		class UClass*                                              mGenericFailedSinkMessage;                               // 0x0198(0x0008) Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mCyberCouponSchematic;                                   // 0x01A0(0x0008) Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class UClass*, class UClass*>                         mCustomRewards;                                          // 0x01A8(0x0050) Edit, Config, UObjectWrapper, NativeAccessSpecifierPublic
		float                                                      mMultiplier;                                             // 0x01F8(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mExponent;                                               // 0x01FC(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mNumLevels;                                              // 0x0200(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mDefaultNumRepeats;                                      // 0x0204(0x0004) Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      mExcludedDescriptors;                                    // 0x0208(0x0010) Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		void STATIC_GetRewardLevelsDataTablePtr();
		class UDataTable* STATIC_GetRewardLevelsDataTable();
		void STATIC_GetPointsDataTablePtr();
		class UDataTable* STATIC_GetPointsDataTable();
		void STATIC_GetExplorationRewardLevelsDataTablePtr();
		class UDataTable* STATIC_GetExplorationRewardLevelsDataTable();
		void STATIC_GetExplorationPointsDataTablePtr();
		class UDataTable* STATIC_GetExplorationPointsDataTable();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGResourceSinkSubsystem
	 * Size -> 0x02E8 (FullSize[0x05E0] - InheritedSize[0x02F8])
	 */
	class AFGResourceSinkSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_9589[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class UClass*                                              mCouponClass;                                            // 0x0300(0x0008) ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<int64_t>                                            mTotalPoints;                                            // 0x0308(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		int64_t                                                    mTotalResourceSinkPoints;                                // 0x0318(0x0008) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SDLO[0x70];                                  // 0x0320(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            mLastSeenPointLevel;                                     // 0x0390(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_57B0[0x8];                                   // 0x03A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<int32_t>                                            mCurrentPointLevels;                                     // 0x03A8(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		int32_t                                                    mCurrentPointLevel;                                      // 0x03B8(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mNumResourceSinkCoupons;                                 // 0x03BC(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FResourceSinkHistory>                        mGlobalPointHistoryValues;                               // 0x03C0(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		TArray<int32_t>                                            mGlobalPointHistory;                                     // 0x03D0(0x0010) ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NIX3[0x8];                                   // 0x03E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UClass*, struct FResourceSinkValuePair32>       mCachedResourceSinkPoints;                               // 0x03E8(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_HBNA[0xA0];                                  // 0x0438(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UClass*, class UClass*>                         mFailedItemSinkMessages;                                 // 0x04D8(0x0050) Transient, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mItemsFailedToSink;                                      // 0x0528(0x0010) ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPrivate
		bool                                                       mAnyGenericItemsFailedToSink;                            // 0x0538(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsCouponEverSunk;                                       // 0x0539(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_MVTY[0x6];                                   // 0x053A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mNotYetSunkenItemsWithCustomReward[0x50];                // 0x0540(0x0050) UNKNOWN PROPERTY: SetProperty
		unsigned char                                              mSunkenItemsWithCustomReward[0x50];                      // 0x0590(0x0050) UNKNOWN PROPERTY: SetProperty

	public:
		void TriggerCyberCoupon();
		void TriggerCustomReward(class UClass* Item);
		bool PurchaseResourceSinkSchematics(class UFGInventoryComponent* playerInventory, TArray<class UClass*> Schematics);
		bool HasTrackGivenCouponSinceLastCheck(EResourceSinkTrack resourceSinkTrack);
		float GetProgressionTowardsNextCoupon(EResourceSinkTrack resourceSinkTrack);
		int64_t GetNumTotalPoints(EResourceSinkTrack resourceSinkTrack);
		int64_t GetNumPointsToNextCoupon(EResourceSinkTrack resourceSinkTrack);
		int32_t GetNumCoupons();
		TArray<int32_t> GetGlobalPointHistory(EResourceSinkTrack resourceSinkTrack);
		class UClass* GetCouponClass();
		int32_t GetCostOfSchematics(TArray<class UClass*> Schematics);
		class AFGResourceSinkSubsystem* STATIC_Get(class UObject* WorldContext);
		bool FindResourceSinkPointsForItem(class UClass* itemDescriptor, int32_t* out_numPoints, EResourceSinkTrack* out_itemTrack);
		bool CanAffordResourceSinkSchematics(class UFGInventoryComponent* playerInventory, TArray<class UClass*> Schematics);
		void AddResourceSinkCoupons(int32_t numCoupons, bool sendTelemetryData, ECouponSource couponSource);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRiver
	 * Size -> 0x0108 (FullSize[0x0400] - InheritedSize[0x02F8])
	 */
	class AFGRiver : public AActor
	{
	public:
		TArray<class UBoxComponent*>                               mOverlappingShapes;                                      // 0x02F8(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class USplineMeshComponent*>                        mSplineMeshComponents;                                   // 0x0308(0x0010) Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class USplineComponent*                                    mSplineComponent;                                        // 0x0318(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UStaticMesh*                                         mSplineMesh;                                             // 0x0320(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSegmentLengthMultiplier;                                // 0x0328(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mVolumePrecision;                                        // 0x032C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mVolumeHeightOffset;                                     // 0x0330(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDefaultFlowRate;                                        // 0x0334(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialInterface*                                  mBaseMaterial;                                           // 0x0338(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TMap<class FString, float>                                 mScalarParameters;                                       // 0x0340(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		TMap<class FString, struct FLinearColor>                   mVectorParameters;                                       // 0x0390(0x0050) Edit, Protected, NativeAccessSpecifierProtected
		struct FVector2D                                           BuoyancyScale;                                           // 0x03E0(0x0010) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      BuoyancyMaxIntensity;                                    // 0x03F0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CMMN[0x4];                                   // 0x03F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialParameterCollection*                        mDataCollection;                                         // 0x03F8(0x0008) Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetupMaterialValues(class UMaterialInstanceDynamic* Material);
		void OnBoxBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRiverSpline
	 * Size -> 0x0028 (FullSize[0x0320] - InheritedSize[0x02F8])
	 */
	class AFGRiverSpline : public AActor
	{
	public:
		class UAkAudioEvent*                                       mAudioEvent;                                             // 0x02F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mEmitterInterval;                                        // 0x0300(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AAHZ[0x4];                                   // 0x0304(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGSoundSplineComponent*                             mSoundSplineComponent;                                   // 0x0308(0x0008) ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mShouldHaveAudio;                                        // 0x0310(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9JAV[0xF];                                   // 0x0311(0x000F) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRoadConnectionComponent
	 * Size -> 0x0008 (FullSize[0x02B0] - InheritedSize[0x02A8])
	 */
	class UFGRoadConnectionComponent : public UFGConnectionComponent
	{
	public:
		unsigned char                                              UnknownData_O6CO[0x8];                                   // 0x02A8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGRoadHologram
	 * Size -> 0x0038 (FullSize[0x06E0] - InheritedSize[0x06A8])
	 */
	class AFGRoadHologram : public AFGSplineHologram
	{
	public:
		unsigned char                                              UnknownData_29M0[0x8];                                   // 0x06A8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_Q2A4[0x10];                                  // 0x06B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGRoadConnectionComponent*                          mConnectionComponents[0x2];                              // 0x06C0(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGRoadConnectionComponent*                          mSnappedConnectionComponents[0x2];                       // 0x06D0(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSaveInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGSaveInterface : public UInterface
	{
	public:
		bool ShouldSave();
		void PreSaveGame(int32_t saveVersion, int32_t GameVersion);
		void PreLoadGame(int32_t saveVersion, int32_t GameVersion);
		void PostSaveGame(int32_t saveVersion, int32_t GameVersion);
		void PostLoadGame(int32_t saveVersion, int32_t GameVersion);
		bool NeedTransform();
		void GatherDependencies(TArray<class UObject*>* out_dependentObjects);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSessionSaveStructWrapper
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGSessionSaveStructWrapper : public UObject
	{
	public:
		struct FSessionSaveStruct                                  SessionSaveStruct;                                       // 0x0028(0x0020) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSaveHeaderWrapper
	 * Size -> 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
	 */
	class UFGSaveHeaderWrapper : public UObject
	{
	public:
		struct FSaveHeader                                         SaveHeader;                                              // 0x0028(0x00A8) BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSaveManagerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGSaveManagerInterface : public UInterface
	{
	public:
		void UploadSave(const struct FSaveHeader& save, const class FScriptDelegate& completeDelegate, const class FScriptDelegate& ProgressDelegate);
		void UnbindOnSavesChanged(const class FScriptDelegate& OnRefreshSaves);
		void SaveGame(const class FString& saveName, const class FScriptDelegate& completeDelegate);
		class USessionMigrationSequence* LoadSaveFile(const struct FSaveHeader& SaveGame, TMap<class FString, class FString> Options, class APlayerController* Player);
		bool IsTransferInProgress();
		bool IsSaveManagerAvailable();
		bool IsEnumeratingLocalSaves();
		void EnumerateSessions(const class FScriptDelegate& completeDelegate);
		void DeleteSaveSession(const struct FSessionSaveStruct& Session, const class FScriptDelegate& completeDelegate);
		void DeleteSaveFile(const struct FSaveHeader& SaveGame, const class FScriptDelegate& completeDelegate);
		void BindOnSavesChanged(const class FScriptDelegate& OnRefreshSaves);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSaveSession
	 * Size -> 0x0340 (FullSize[0x0368] - InheritedSize[0x0028])
	 */
	class UFGSaveSession : public UObject
	{
	public:
		unsigned char                                              UnknownData_PO4Y[0x188];                                 // 0x0028(0x0188) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AActor*>                                      mSpawnedActors;                                          // 0x01B0(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Y9U4[0x160];                                 // 0x01C0(0x0160) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mAutosaveInterval;                                       // 0x0320(0x0004) ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mNumRotatingAutosaves;                                   // 0x0324(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_XEQB[0x40];                                  // 0x0328(0x0040) MISSED OFFSET (PADDING)

	public:
		void SetModMetadata(const class FString& newMetadata);
		void OnRuntimeSpawnedActorDestroyed(class AActor* DestroyedActor);
		void OnLevelRemovedFromWorld(class ULevel* inLevel, class UWorld* InWorld);
		void OnLevelPlacedActorDestroyed(class AActor* DestroyedActor);
		void OnLevelAddedToWorld(class ULevel* inLevel, class UWorld* InWorld);
		void OnAutosaveIntervalUpdated(const class FString& cvar);
		void OnActorSpawned(class AActor* SpawnedActor);
		int32_t STATIC_GetVersion(struct FSaveHeader* Header);
		class FString STATIC_GetSessionName(struct FSaveHeader* Header);
		class FString STATIC_GetSessionId(struct FSaveHeader* Header);
		ESessionVisibility STATIC_GetSaveSessionVisibility(struct FSaveHeader* Header);
		class FString STATIC_GetSaveSessionName(struct FSessionSaveStruct* Session);
		class FString STATIC_GetSaveSessionID(struct FSessionSaveStruct* Session);
		struct FDateTime STATIC_GetSaveDateTime(struct FSaveHeader* Header);
		int32_t STATIC_GetPlayDurationSeconds(struct FSaveHeader* Header);
		class FString STATIC_GetName(struct FSaveHeader* Header);
		class FString GetModMetadata();
		class FString STATIC_GetMapOptions(struct FSaveHeader* Header);
		class FString STATIC_GetMapName(struct FSaveHeader* Header);
		class FString STATIC_GetLoadedHeaderMetadata(struct FSaveHeader* Header);
		bool STATIC_GetIsModded(struct FSaveHeader* Header);
		bool STATIC_GetIsCreativeModeEnabled(struct FSaveHeader* Header);
		int32_t STATIC_GetBuildVersion(struct FSaveHeader* Header);
		class UFGSaveSession* STATIC_Get(class UObject* WorldContext);
		void Autosave();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSaveSystem
	 * Size -> 0x0098 (FullSize[0x00C0] - InheritedSize[0x0028])
	 */
	class UFGSaveSystem : public UObject
	{
	public:
		unsigned char                                              UnknownData_FYWN[0x78];                                  // 0x0028(0x0078) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FMapRedirector>                              mMapRedirectors;                                         // 0x00A0(0x0010) ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected
		int32_t                                                    mMaxNumBackupSaves;                                      // 0x00B0(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_GM3H[0xC];                                   // 0x00B4(0x000C) MISSED OFFSET (PADDING)

	public:
		void STATIC_SortSessions(TArray<struct FSessionSaveStruct>* Sessions, ESaveSortMode SortMode, ESaveSortDirection sortDirection);
		void STATIC_SortSaves(TArray<struct FSaveHeader>* saves, ESaveSortMode SortMode, ESaveSortDirection sortDirection);
		bool STATIC_IsValidSaveName(const class FString& saveName);
		bool IsSessionNameUsed(const class FString& SessionName);
		void STATIC_GroupSavesPerSession(TArray<struct FSaveHeader> saves, TArray<struct FSessionSaveStruct>* out_groupedBySession);
		ESaveState STATIC_GetSaveState(const struct FSaveHeader& SaveGame);
		ESaveExists STATIC_GetCachedSaveExistsInSessions(TArray<struct FSessionSaveStruct> Sessions, const class FString& saveName, int32_t CurrentSession);
		ESaveExists STATIC_GetCachedSaveExists(TArray<struct FSaveHeader> cachedSaves, const class FString& saveName, const class FString& currentSessionName);
		class UFGSaveSystem* STATIC_Get(class UObject* WorldContext);
		ESaveModCheckResult STATIC_CheckModdedSaveCompatibility(const struct FSaveHeader& SaveGame, class FText* outCustomMessage);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGScannableDetails
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGScannableDetails : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGScannableDetailsHostileCreature
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGScannableDetailsHostileCreature : public UFGScannableDetails
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGScannableDetailsRegrowingPickups
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGScannableDetailsRegrowingPickups : public UFGScannableDetails
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGScannableDetailsHarddrive
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGScannableDetailsHarddrive : public UFGScannableDetails
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGScannableSettings
	 * Size -> 0x0060 (FullSize[0x0098] - InheritedSize[0x0038])
	 */
	class UFGScannableSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              mAdditionalHostileCreatureClasses[0x10];                 // 0x0038(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              mStartingScannableObjects[0x50];                         // 0x0048(0x0050) UNKNOWN PROPERTY: MapProperty

	public:
		TArray<class UClass*> GetStartingScannableObjects(class UObject* scannerObject);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGScannableSubsystem
	 * Size -> 0x0048 (FullSize[0x0340] - InheritedSize[0x02F8])
	 */
	class AFGScannableSubsystem : public AFGSubsystem
	{
	public:
		TArray<class AFGBuildableRadarTower*>                      mRadarTowers;                                            // 0x02F8(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<struct FWorldScannableData>                         mAvailableItemPickups;                                   // 0x0308(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<class AFGDropPod*>                                  mUnlootedDropPods;                                       // 0x0318(0x0010) Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		TArray<class AFGCreatureSpawner*>                          mScannableCreatureSpawners;                              // 0x0328(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_G82A[0x8];                                   // 0x0338(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnLevelPlacedActorDestroyed(class AActor* DestroyedActor);
		class AFGScannableSubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSchematic
	 * Size -> 0x01C8 (FullSize[0x01F0] - InheritedSize[0x0028])
	 */
	class UFGSchematic : public UObject
	{
	public:
		ESchematicType                                             mType;                                                   // 0x0028(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V3ZT[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                mDisplayName;                                            // 0x0030(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FText                                                mDescription;                                            // 0x0048(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mSchematicCategory;                                      // 0x0060(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mSubCategories;                                          // 0x0068(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		float                                                      mMenuPriority;                                           // 0x0078(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mTechTier;                                               // 0x007C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FItemAmount>                                 mCost;                                                   // 0x0080(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mTimeToComplete;                                         // 0x0090(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_21U1[0x4];                                   // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mRelevantShopSchematics;                                 // 0x0098(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       mIsPlayerSpecific;                                       // 0x00A8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_28TR[0x7];                                   // 0x00A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UFGUnlock*>                                   mUnlocks;                                                // 0x00B0(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		struct FSlateBrush                                         mSchematicIcon;                                          // 0x00C0(0x00D0) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          mSmallSchematicIcon;                                     // 0x0190(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UFGAvailabilityDependency*>                   mSchematicDependencies;                                  // 0x0198(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		bool                                                       mDependenciesBlocksSchematicAccess;                      // 0x01A8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mHiddenUntilDependenciesMet;                             // 0x01A9(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FLVI[0x6];                                   // 0x01AA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<EEvents>                                            mRelevantEvents;                                         // 0x01B0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mDependsOnSchematic;                                     // 0x01C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mAdditionalSchematicDependencies;                        // 0x01C8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		struct FAssetBundleData                                    mAssetBundleData;                                        // 0x01D8(0x0010) NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_A2HQ[0x8];                                   // 0x01E8(0x0008) MISSED OFFSET (PADDING)

	public:
		void STATIC_SortByMenuPriority(TArray<class UClass*>* Schematics);
		bool STATIC_IsRepeatPurchasesAllowed(class UClass* InClass);
		bool STATIC_IsIncludedInBuild(class UClass* InClass);
		TArray<class UFGUnlock*> STATIC_GetUnlocks(class UClass* InClass);
		ESchematicType STATIC_GetType(class UClass* InClass);
		float STATIC_GetTimeToComplete(class UClass* InClass);
		int32_t STATIC_GetTechTier(class UClass* InClass);
		void STATIC_GetSubCategories(class UClass* InClass, TArray<class UClass*>* out_subCategories);
		class UTexture2D* STATIC_GetSmallIcon(class UClass* InClass);
		ESchematicState STATIC_GetSchematicState(class UClass* InClass, class UObject* WorldContext);
		class FText STATIC_GetSchematicDisplayName(class UClass* InClass);
		class FText STATIC_GetSchematicDescription(class UClass* InClass);
		void STATIC_GetSchematicDependencies(class UClass* InClass, TArray<class UFGAvailabilityDependency*>* out_schematicDependencies);
		class UClass* STATIC_GetSchematicCategory(class UClass* InClass);
		void STATIC_GetRelevantUnlockedShopSchematics(class UObject* WorldContext, class UClass* InClass, TArray<class UClass*>* out_schematics);
		void STATIC_GetRelevantShopSchematics(class UClass* InClass, TArray<class UClass*>* out_schematics);
		TArray<EEvents> STATIC_GetRelevantEvents(class UClass* InClass);
		float STATIC_GetMenuPriority(class UClass* InClass);
		struct FSlateBrush STATIC_GetItemIcon(class UClass* InClass);
		bool STATIC_GetIsPlayerSpecific(class UClass* InClass);
		bool STATIC_GetHiddenUntilDependenciesMet(class UClass* InClass);
		TArray<struct FItemAmount> STATIC_GetCost(class UClass* InClass);
		bool STATIC_CanGiveAccessToSchematic(class UClass* InClass, class UObject* WorldContext);
		bool STATIC_AreSchematicDependenciesMet(class UClass* InClass, class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSchematicCategory
	 * Size -> 0x0000 (FullSize[0x0120] - InheritedSize[0x0120])
	 */
	class UFGSchematicCategory : public UFGCategory
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSchematicManager
	 * Size -> 0x00D8 (FullSize[0x03D0] - InheritedSize[0x02F8])
	 */
	class AFGSchematicManager : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_0P0Z[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class FScriptMulticastDelegate                             PurchasedSchematicDelegate;                              // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PaidOffOnSchematicDelegate;                              // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             PurchasedSchematicInstigatorDelegate;                    // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_BICN[0x18];                                  // 0x0330(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mAllSchematics;                                          // 0x0348(0x0010) ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mAvailableSchematics;                                    // 0x0358(0x0010) Net, ZeroConstructor, SaveGame, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class UClass*>                                      mPurchasedSchematics;                                    // 0x0368(0x0010) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<struct FSchematicCost>                              mPaidOffSchematic;                                       // 0x0378(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, Protected, NativeAccessSpecifierProtected
		class UClass*                                              mActiveSchematic;                                        // 0x0388(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnActiveSchematicChanged;                               // 0x0390(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		float                                                      mShipLandTimeStamp;                                      // 0x03A0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mShipLandTimeStampSave;                                  // 0x03A4(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CSFV[0x10];                                  // 0x03A8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mHasTechTierLimit;                                       // 0x03B8(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_EPUQ[0x3];                                   // 0x03B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mMaxAllowedTechTier;                                     // 0x03BC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_H1JJ[0x8];                                   // 0x03C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mShipReturnedMessage;                                    // 0x03C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SubmitMilestoneTelemetry(class UClass* activeSchematic);
		bool SetActiveSchematic(class UClass* newActiveSchematic);
		bool PayOffOnSchematic(class UClass* schematic, TArray<struct FItemAmount>* Amount);
		void OnRep_PurchasedSchematic(TArray<class UClass*> lastPurchasedSchematics);
		void OnRep_PaidOffOnSchematic();
		void OnRep_ActiveSchematic();
		void LaunchShip();
		bool IsShipAtTradingPost();
		bool IsSchematicPurchased(class UClass* SchematicClass, class APlayerController* owningPlayerController);
		bool IsSchematicPaidOff(class UClass* schematic);
		void GiveAccessToSchematic(class UClass* SchematicClass, class AFGCharacterPlayer* accessInstigator, bool blockTelemetry);
		void GetVisibleSchematicCategoryData(ESchematicType schematicType, TArray<struct FSchematicCategoryData>* out_schematicCategoryData);
		float GetTimeUntilShipReturn();
		TArray<struct FItemAmount> GetRemainingCostFor(class UClass* schematic);
		void GetPurchasedSchematicsOfTypes(TArray<ESchematicType> Types, TArray<class UClass*>* out_schematics);
		TArray<struct FItemAmount> GetPaidOffCostFor(class UClass* schematic);
		int32_t GetMaxAllowedTechTier();
		int32_t GetHighestAvailableTechTier();
		TArray<struct FItemAmount> GetCostFor(class UClass* schematic);
		void GetAvailableSchematicsOfTypes(TArray<ESchematicType> Types, TArray<class UClass*>* out_schematics);
		void GetAvailableSchematics(TArray<class UClass*>* out_schematics);
		void GetAllVisibleSchematicsOfType(ESchematicType Type, TArray<class UClass*>* out_schematics);
		void GetAllSchematicsOfTypeFilteredOnDependency(ESchematicType Type, TArray<class UClass*>* out_schematics);
		void GetAllSchematicsOfType(ESchematicType Type, TArray<class UClass*>* out_schematics);
		void GetAllSchematics(TArray<class UClass*>* out_schematics);
		void GetAllPurchasedSchematics(TArray<class UClass*>* out_schematics);
		class UClass* GetActiveSchematic();
		class AFGSchematicManager* STATIC_Get(class UObject* WorldContext);
		bool CanSetAsActiveSchematic(class UClass* inSchematic);
		void AddAvailableSchematic(class UClass* schematicClassToAdd);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSchematicPurchasedDependency
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFGSchematicPurchasedDependency : public UFGAvailabilityDependency
	{
	public:
		TArray<class UClass*>                                      mSchematics;                                             // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       mRequireAllSchematicsToBePurchased;                      // 0x0038(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_UCCQ[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (PADDING)

	public:
		void GetSchematics(TArray<class UClass*>* out_schematics);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSequencerWidget
	 * Size -> 0x0010 (FullSize[0x0290] - InheritedSize[0x0280])
	 */
	class UFGSequencerWidget : public UUserWidget
	{
	public:
		unsigned char                                              UnknownData_WPFG[0x8];                                   // 0x0280(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGPhotoModeManager*                                 mCachedPhotoModeManager;                                 // 0x0288(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void ToggleMouseControl();
		void SetCurrentFrameTime(const struct FFrameTime& newFrameTime);
		void OnSequencerUpdated();
		void OnCursorMoved();
		void MoveCursorForward();
		void MoveCursorBackward();
		struct FFrameTime GetCurrentFrameTime();
		void DiscardInput();
		void DeleteSelectedNodes();
		void AddCurrentPlayerRotation();
		void AddCurrentPlayerLocRotFOV();
		void AddCurrentPlayerLocation();
		void AddCurrentPlayerFOV();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBaseServerInteractionHandler
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFGBaseServerInteractionHandler : public UObject
	{
	public:
		unsigned char                                              UnknownData_3MD7[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWorld*                                              World;                                                   // 0x0030(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class APlayerController*                                   OwningPlayer;                                            // 0x0038(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class FText STATIC_GetServerMessageDescription(EServerMessage Message);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGServerBeaconClient
	 * Size -> 0x0208 (FullSize[0x0590] - InheritedSize[0x0388])
	 */
	class AFGServerBeaconClient : public AOnlineBeaconClient
	{
	public:
		unsigned char                                              UnknownData_4FD7[0x8];                                   // 0x0388(0x0008) Fix Super Size
		unsigned char                                              UnknownData_EYBU[0x8];                                   // 0x0390(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mUIProxy[0x10];                                          // 0x0398(0x0010) UNKNOWN PROPERTY: InterfaceProperty
		unsigned char                                              UnknownData_KZ2T[0x1E0];                                 // 0x03A8(0x01E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGServerObject*                                     mServerInfoObject;                                       // 0x0588(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdateServerName(const class FString& NewName);
		void UpdateAuthToken(const struct FServerAuthenticationToken& Cookie);
		void TryPassword_Server(const class FString& HashedPassword, EPrivilegeLevel MinimumTargetPrivilege);
		void TryPassword(const class FString& Password, EPrivilegeLevel MinimumTargetPrivilege);
		void Shutdown_Server();
		void SetClientPassword_Server(const class FString& NewJoinPassword);
		void SetClientPassword(const class FString& Password);
		void SetAutoSaveOnDisconnect(bool AutoSaveOnDisconnect);
		void SetAutoPause(bool AutoPause);
		void SetAutoLoadSessionName(const class FString& SessionName);
		void SetAdminPassword_Server(const class FString& NewHashedPassword);
		void SetAdminPassword(const class FString& Password);
		void ServerMessage(EServerMessage Message);
		void ServerHello(const class FString& ServerName, const struct FServerAuthenticationToken& Cookie);
		void SaveGameResponse(const struct FGuid& RequestID, bool Success, const class FText& ErrorMessage);
		void SaveGameRequest(const struct FGuid& RequestID, const class FString& saveName);
		void Response_WriteRawBufferToSaveFile_Server(const struct FGuid& BufferID, bool Success, const class FText& Error);
		void Response_EnumerateSessions(const struct FGuid& RequestID, bool Success, TArray<struct FSessionSaveStruct> Sessions, int32_t CurrentSessionIx);
		void RequestSetClientPassword();
		void RequestSetAdminPassword();
		void RequestPassword(EPrivilegeLevel MinimumPrivilege);
		void RequestCreateGame();
		void Request_WriteRawBufferToSaveFile_Server(const struct FGuid& BufferID, const class FString& saveName, bool CleanTransfer);
		void Request_EnumerateSessions(const struct FGuid& RequestID);
		void RenameServer(const class FString& ServerName);
		void QueryServerState_Server();
		void PasswordRejected();
		void Notify_SavesCollectionChanged();
		void LoadSaveFile(const struct FSaveHeader& SaveGame, TArray<class FString> OptionsKeys, TArray<class FString> OptionsValues);
		void LargeDataTransfer_Cleanup_C2S(const struct FGuid& TransferID);
		void LargeDataTransfer_Chunk_C2S(const struct FGuid& TransferID, int32_t ChunkIx, TArray<unsigned char> ChunkData);
		void LargeDataTransfer_Begin_C2S(const struct FGuid& TransferID, int32_t TransferSize);
		void LargeDataTransfer_AcknowledgeChunk_C2S(const struct FGuid& TransferID, int32_t ChunkIx);
		void LargeDataTransfer_AcknowledgeBegin_C2S(const struct FGuid& TransferID);
		void JoinGameResponse(int32_t ListenPort, const struct FServerEntryToken& Ticket);
		void JoinGameRequest_Server();
		void GreetAsUnclaimedServer();
		void GameStateUpdate(const struct FServerGameState& Response);
		void DeleteSaveSessionResponse(const struct FGuid& RequestID, bool Success);
		void DeleteSaveSessionRequest(const struct FGuid& RequestID, const struct FSessionSaveStruct& Session);
		void DeleteSaveFileResponse(const struct FGuid& RequestID, bool Success);
		void DeleteSaveFileRequest(const struct FGuid& RequestID, const struct FSaveHeader& SaveGame);
		void CreateGame_Server(const class FString& Name, const class FString& StartLoc);
		void CreateGame(const class FString& Name, const class FString& StartLoc);
		void CommandCompleted(const struct FGuid& ID, const class FString& Result);
		void Command_Server(const struct FGuid& ID, const class FString& Command);
		void ClientHello(const struct FServerAuthenticationToken& Cookie);
		void ChangeClientPassword();
		void ChangeAdminPassword();
		void CancelOperation();
		void BasicSettingsUpdate(const struct FServerBasicSettings& BasicSettings);
		void AuthenticationRequest(const struct FServerAuthenticationToken& CurrentAuth, EPrivilegeLevel MinimumPrivilege);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGServerBeaconHostObject
	 * Size -> 0x0000 (FullSize[0x0320] - InheritedSize[0x0320])
	 */
	class AFGServerBeaconHostObject : public AOnlineBeaconHostObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGServerManager
	 * Size -> 0x0070 (FullSize[0x00A0] - InheritedSize[0x0030])
	 */
	class UFGServerManager : public ULocalPlayerSubsystem
	{
	public:
		unsigned char                                              UnknownData_4FZ1[0x18];                                  // 0x0030(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnServerAdded;                                           // 0x0048(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnServerAboutToBeRemoved;                                // 0x0058(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UFGServerObject*>                             mServers;                                                // 0x0068(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_X16B[0x28];                                  // 0x0078(0x0028) MISSED OFFSET (PADDING)

	public:
		void RemoveServer(class UFGServerObject* Server);
		int32_t STATIC_GetClientNetCL();
		void AddServer(const class FString& Address, int32_t Port, const class FScriptDelegate& OnceAdded);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGServerManagerSettings
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGServerManagerSettings : public UFGSettings
	{
	public:
		class UClass*                                              mServerInteractionHandlerClass;                          // 0x0028(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGServerObject
	 * Size -> 0x0190 (FullSize[0x01B8] - InheritedSize[0x0028])
	 */
	class UFGServerObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_0EP4[0x18];                                  // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              ServerName;                                              // 0x0040(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              Address;                                                 // 0x0050(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FQ95[0x10];                                  // 0x0060(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FServerAuthenticationToken                          AuthenticationToken;                                     // 0x0070(0x0018) BlueprintVisible, BlueprintReadOnly, SaveGame, Protected, NativeAccessSpecifierProtected
		struct FServerGameState                                    GameState;                                               // 0x0088(0x0030) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		struct FServerBasicSettings                                BasicSettings;                                           // 0x00B8(0x0018) BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected
		TArray<class FString>                                      BeforeDNSLookupAddresses;                                // 0x00D0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected
		class FString                                              Alias;                                                   // 0x00E0(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    QueryPort;                                               // 0x00F0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EServerState                                               ServerState;                                             // 0x00F4(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_YUL4[0x3];                                   // 0x00F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mAverageRoundtripTimeMs;                                 // 0x00F8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_9M75[0x4];                                   // 0x00FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              mServerConsole;                                          // 0x0100(0x0010) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    ServerNetCL;                                             // 0x0110(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_NDH9[0xC];                                   // 0x0114(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGServerBeaconClient*                               ServerConnection;                                        // 0x0120(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              mStateListeners[0x10];                                   // 0x0128(0x0010) UNKNOWN PROPERTY: ArrayProperty
		unsigned char                                              UnknownData_IHLL[0x14];                                  // 0x0138(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mWaitingForConsoleResult : 1;                            // 0x014C(0x0001) BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SFOA[0x6B];                                  // 0x014D(0x006B) MISSED OFFSET (PADDING)

	public:
		void UnregisterStateListener();
		void SetAutoSaveOnDisconnect(bool Autosave);
		void SetAutoPause(bool AutoPause);
		void SetAutoLoadSessionName(const class FString& SessionName);
		void RegisterStateListener();
		class FString PullCommandFromHistory(bool GoBackInTime);
		bool Join();
		bool IsConnected();
		EBeaconConnectionState GetConnectionState();
		EServerComplexState GetComplexState();
		void FetchGameState();
		void EnsureConnected();
		void CreateGame(const class FString& SessionName, const class FString& startingLocation, bool JoinOnceLoaded);
		void ConsoleCommand(const class FString& Command);
		void ChangeServerName(const class FString& NewServerName);
		void ChangeClientPassword();
		void ChangeAdminPassword();
		void Authenticate(EPrivilegeLevel MinimumTargetedPrivilege);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGServerSubsystem
	 * Size -> 0x0058 (FullSize[0x0088] - InheritedSize[0x0030])
	 */
	class UFGServerSubsystem : public UGameInstanceSubsystem
	{
	public:
		unsigned char                                              UnknownData_T2GQ[0x18];                                  // 0x0030(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mAutoPause;                                              // 0x0048(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mAutoSaveOnDisconnect;                                   // 0x0049(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mUsePacketRouting;                                       // 0x004A(0x0001) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C2GH[0x5];                                   // 0x004B(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGServerSocket*                                     mServerSocket;                                           // 0x0050(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGServerSettings*                                   mSettings;                                               // 0x0058(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGServerBeaconHostObject*                           mBeaconHostObject;                                       // 0x0060(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_LKHF[0x20];                                  // 0x0068(0x0020) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGServerSocket
	 * Size -> 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
	 */
	class UFGServerSocket : public UObject
	{
	public:
		float                                                      RouteTimeout;                                            // 0x0028(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DesiredSendBufferSize;                                   // 0x002C(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DesiredReceiveBufferSize;                                // 0x0030(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DesiredRouteSendBufferSize;                              // 0x0034(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    DesiredRouteReceiveBufferSize;                           // 0x0038(0x0004) ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KIKY[0x24];                                  // 0x003C(0x0024) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGServerStateListener
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGServerStateListener : public UInterface
	{
	public:
		void BP_OnServerStateChanged(class UFGServerObject* Server, EServerState State);
		void BP_OnServerRenamed(class UFGServerObject* Server, const class FString& Name);
		void BP_OnServerGameStateChanged(class UFGServerObject* Server, const struct FServerGameState& GameState);
		void BP_OnServerConnectionStateChanged(class UFGServerObject* Server, EBeaconConnectionState ConnectionState);
		void BP_OnServerComplexStateChanged(class UFGServerObject* Server, EServerComplexState State);
		void BP_OnServerBasicSettingsUpdate(class UFGServerObject* Server, const struct FServerBasicSettings& BasicSettings);
		void BP_OnServerAuthenticationChanged(class UFGServerObject* Server, const struct FServerAuthenticationToken& AuthToken);
		void BP_OnNewServerConsoleOutput(class UFGServerObject* Server, const class FString& ConsoleOutput);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGServerSettings
	 * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
	 */
	class UFGServerSettings : public USaveGame
	{
	public:
		class FString                                              mServerName;                                             // 0x0028(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              mAutoLoadSessionName;                                    // 0x0038(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              mAdminPassword;                                          // 0x0048(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              mClientPassword;                                         // 0x0058(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FString                                              mServerSecret;                                           // 0x0068(0x0010) ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSessionInfoWidget
	 * Size -> 0x0008 (FullSize[0x0288] - InheritedSize[0x0280])
	 */
	class UFGSessionInfoWidget : public UUserWidget
	{
	public:
		struct FCommonSession                                      mSession;                                                // 0x0280(0x0008) BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate

	public:
		void SetSession(const struct FCommonSession& Session);
		void OnSessionUpdate(const struct FFGOnlineSessionSettings& Session);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSettingsManagerInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGSettingsManagerInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSharedPostProcessSettings
	 * Size -> 0x06F8 (FullSize[0x0720] - InheritedSize[0x0028])
	 */
	class UFGSharedPostProcessSettings : public UObject
	{
	public:
		unsigned char                                              UnknownData_18T0[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPostProcessSettings                                mPostProcessSettings;                                    // 0x0030(0x06E0) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mBlendRadius;                                            // 0x0710(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mBlendWeight;                                            // 0x0714(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mPriority;                                               // 0x0718(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HO7S[0x4];                                   // 0x071C(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGShoppingListComponent
	 * Size -> 0x00D8 (FullSize[0x0178] - InheritedSize[0x00A0])
	 */
	class UFGShoppingListComponent : public UActorComponent
	{
	public:
		unsigned char                                              UnknownData_FUCU[0x8];                                   // 0x00A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnShoppingListUpdated;                                  // 0x00A8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnShoppingListCleared;                                  // 0x00B8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnShoppingListObjectAdded;                              // 0x00C8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnShoppingListObjectUpdated;                            // 0x00D8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnShoppingListObjectRemoved;                            // 0x00E8(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic
		TMap<class UObject*, class UFGShoppingListObject*>         mShoppingListObjects;                                    // 0x00F8(0x0050) Transient, NativeAccessSpecifierPrivate
		TArray<struct FShoppingListBlueprintEntry>                 mShoppingListBlueprints;                                 // 0x0148(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPrivate
		TArray<struct FShoppingListRecipeEntry>                    mShoppingListRecipes;                                    // 0x0158(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_Z56B[0x10];                                  // 0x0168(0x0010) MISSED OFFSET (PADDING)

	public:
		void Server_SetNumRecipeClassInShoppingList(class UClass* recipeClass, int32_t totalAmount);
		void Server_SetNumBlueprintsInShoppingList(const class FString& BlueprintName, int32_t totalAmount);
		void Server_ClearShoppingList();
		void OnRep_ShoppingListRecipes();
		void OnRep_ShoppingListBlueprints();
		void GetShoppingListObjects(TArray<class UFGShoppingListObject*>* out_ShoppingListObjects);
		class UFGShoppingListObject* GetShoppingListObjectFromObject(class UObject* Object, bool* out_Result);
		class UFGShoppingListObject* GetShoppingListObjectFromClass(class UClass* ObjectClass, bool* out_Result);
		TArray<struct FItemAmount> GetShoppingListCost();
		class UFGShoppingListComponent* STATIC_GetShoppingListComponent(class APlayerController* PlayerController);
		void ClearShoppingList();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGShoppingListObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGShoppingListObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_GIP2[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetAmount(int32_t totalAmount);
		void IncreaseAmount(int32_t amountToAdd);
		class FString GetShoppingListNameAsString();
		class FText GetShoppingListName();
		int32_t GetAmount();
		void DecreaseAmount(int32_t amountToRemove);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGShoppingListObject_Class
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UFGShoppingListObject_Class : public UFGShoppingListObject
	{
	public:
		class UClass*                                              mSubclass;                                               // 0x0030(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetSubClass(class UClass* SubClass);
		class UClass* GetSubclass();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGShoppingListObject_Object
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UFGShoppingListObject_Object : public UFGShoppingListObject
	{
	public:
		class UObject*                                             mObject;                                                 // 0x0030(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetObject(class UObject* Object);
		class UObject* GetObject();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGShoppingListObjectBlueprint
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UFGShoppingListObjectBlueprint : public UFGShoppingListObject
	{
	public:
		class UFGBlueprintDescriptor*                              mBlueprintDescriptor;                                    // 0x0030(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetBlueprintDescriptor(class UFGBlueprintDescriptor* blueprintDescriptor);
		class UFGBlueprintDescriptor* GetBlueprintDescriptor();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGShoppingListObjectRecipe
	 * Size -> 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
	 */
	class UFGShoppingListObjectRecipe : public UFGShoppingListObject
	{
	public:
		class UClass*                                              mRecipe;                                                 // 0x0030(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void SetRecipe(class UClass* recipe);
		class UClass* GetRecipe();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignificanceInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGSignificanceInterface : public UInterface
	{
	public:
		void UpdateSignificanceTickRate(float NewTickRate, bool bTickEnabled);
		void UpdateMeshLodLevels(int32_t newLodLevel);
		void SetupForSignificance();
		void LostSignificance_Native();
		void LostSignificance();
		float GetSignificanceRange();
		void GainedSignificance_Native();
		void GainedSignificance();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignificanceManager
	 * Size -> 0x0050 (FullSize[0x01F8] - InheritedSize[0x01A8])
	 */
	class UFGSignificanceManager : public USignificanceManagerAccelerated
	{
	public:
		bool                                                       mIsEnabled;                                              // 0x01A8(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_2QHE[0x17];                                  // 0x01A9(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGBuildableFactory*>                         mPreviousSignificantFactories;                           // 0x01C0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class AFGBuildableConveyorBase*>                    mPreviousSignificantConveyorBases;                       // 0x01D0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class AFGBuildablePipeBase*>                        mPreviousSignificantPipelines;                           // 0x01E0(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_E812[0x8];                                   // 0x01F0(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGSignInterface : public UInterface
	{
	public:
		struct FVector2D GetWorldDimensions();
		class UClass* GetSignTypeDescriptor();
		struct FVector2D GetSignDimensions();
		struct FVector2D GetGridSquareDimensions();
		class AFGBuildable* GetBuildable();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGSignLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_GetTextElementNameMapFromSignDescriptor(class UClass* signTypeClass, TMap<class FString, class FString>* textElementMap);
		void STATIC_GetPrefabLayoutsFromSignDescriptor(class UClass* signTypeClass, TArray<class UClass*>* prefabArray);
		void STATIC_GetIconElementNameMapFromSignDescriptor(class UClass* signTypeClass, TMap<class FString, class UObject*>* iconElementMap);
		void STATIC_GetDefaultColorsFromSignDescriptor(class UClass* signTypeClass, struct FLinearColor* ForegroundColor, struct FLinearColor* BackgroundColor, struct FLinearColor* AuxiliaryColor);
		void STATIC_GetCanvasDimensionsFromSignDescriptor(class UClass* signTypeClass, struct FVector2D* signDimensions);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignPixelInstanceManager
	 * Size -> 0x0060 (FullSize[0x0300] - InheritedSize[0x02A0])
	 */
	class UFGSignPixelInstanceManager : public USceneComponent
	{
	public:
		class UHierarchicalInstancedStaticMeshComponent*           mInstanceComponent;                                      // 0x02A0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OHK4[0x58];                                  // 0x02A8(0x0058) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignPoleHologram
	 * Size -> 0x0008 (FullSize[0x06F0] - InheritedSize[0x06E8])
	 */
	class AFGSignPoleHologram : public AFGPoleHologram
	{
	public:
		unsigned char                                              UnknownData_WQ0O[0x8];                                   // 0x06E8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignDataRemoteCallObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGSignDataRemoteCallObject : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGSignDataRemoteCallObject;              // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0DFB[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void Server_SetSignData(const struct FClientSetSignData& clientData);
		void Server_RequestSignData(const struct FSignRPC_Data& signRPCData);
		void Client_RequestSignDataResponse(const struct FSignRPC_Data& signRPCData);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignSubsystem
	 * Size -> 0x00E8 (FullSize[0x03E0] - InheritedSize[0x02F8])
	 */
	class AFGSignSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_QQWA[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		TArray<class AFGBuildableWidgetSign*>                      mAllWidgetSigns;                                         // 0x0300(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<struct FSortedPendingSign>                          mPendingSortedSigns;                                     // 0x0310(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TMap<uint32_t, struct FMappedSignData>                     mUniqueSignToRenderTargetSetup;                          // 0x0320(0x0050) ContainsInstancedReference, NativeAccessSpecifierPrivate
		class AActor*                                              mSignPixelInstanceActor;                                 // 0x0370(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TMap<int32_t, class UFGSignPixelInstanceManager*>          mPixelInstanceManagerMap;                                // 0x0378(0x0050) ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_49VS[0x18];                                  // 0x03C8(0x0018) MISSED OFFSET (PADDING)

	public:
		class AFGSignSubsystem* STATIC_GetSignSubsystem(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignTypeDescriptor
	 * Size -> 0x00F0 (FullSize[0x0118] - InheritedSize[0x0028])
	 */
	class UFGSignTypeDescriptor : public UObject
	{
	public:
		struct FVector2D                                           mSignCanvasDimensions;                                   // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        mDefaultForegroundColor;                                 // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        mDefaultBackgroundColor;                                 // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FLinearColor                                        mDefaultAuxiliaryColor;                                  // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TMap<class FString, class FString>                         mTextElementNameMap;                                     // 0x0068(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TMap<class FString, class UObject*>                        mIconElementNameMap;                                     // 0x00B8(0x0050) Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      mPrefabArray;                                            // 0x0108(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		bool IsValidElementName(const class FString& ElementName);
		TMap<class FString, class FString> GetTextElementNameMap();
		struct FVector2D GetSignCanvasDimensions();
		TArray<class UClass*> GetPrefabArray();
		TMap<class FString, class UObject*> GetIconElementNameMap();
		struct FLinearColor GetDefaultForegroundColor();
		struct FLinearColor GetDefaultBackgroundColor();
		struct FLinearColor GetDefaultAuxiliaryColor();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSignPrefabWidget
	 * Size -> 0x0198 (FullSize[0x0418] - InheritedSize[0x0280])
	 */
	class UFGSignPrefabWidget : public UUserWidget
	{
	public:
		bool                                                       bContainsIcon;                                           // 0x0280(0x0001) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_FEIM[0x7];                                   // 0x0281(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FPrefabSignData                                     mPrefabSignData;                                         // 0x0288(0x00F0) Edit, BlueprintVisible, Transient, ExposeOnSpawn, NativeAccessSpecifierPublic
		TMap<class FString, class URichTextBlock*>                 mNameToTextWidget;                                       // 0x0378(0x0050) BlueprintVisible, ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TMap<class FString, class UImage*>                         mNameToIconWidget;                                       // 0x03C8(0x0050) BlueprintVisible, ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected

	public:
		void SetNameToTextWidgetMap(TMap<class FString, class URichTextBlock*>* textWidgetMap);
		void SetNameToIconWidgetMap(TMap<class FString, class UImage*>* iconWidgetMap);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSimulatedWheeledVehicle
	 * Size -> 0x0000 (FullSize[0x0380] - InheritedSize[0x0380])
	 */
	class AFGSimulatedWheeledVehicle : public ASkeletalMeshActor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSkySphere
	 * Size -> 0x0B98 (FullSize[0x0E90] - InheritedSize[0x02F8])
	 */
	class AFGSkySphere : public AActor
	{
	public:
		unsigned char                                              UnknownData_1U08[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class UMaterialInterface*                                  mDefaultMaterial;                                        // 0x0300(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  mDefaultLowSpecMaterial;                                 // 0x0308(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMesh*                                         mDefaultMesh;                                            // 0x0310(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UStaticMeshComponent*                                mSkyMeshComponent;                                       // 0x0318(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mCurrentSelectedWeather;                                 // 0x0320(0x0004) Edit, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_6VC8[0x4];                                   // 0x0324(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<TWeakObjectPtr<class AFGWeatherReaction>>           mWeatherReactionActors;                                  // 0x0328(0x0010) ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic
		TArray<struct FWeatherChanceEntry>                         mWeatherStateList;                                       // 0x0338(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		int32_t                                                    mDefaultWeatherEntry;                                    // 0x0348(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FFloatInterval                                      mWeatherChangeDelayTime;                                 // 0x034C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_OQZZ[0xC];                                   // 0x0354(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class USceneCaptureComponent2D*                            mRainOcclusionSceneCapture2DComponent;                   // 0x0360(0x0008) Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UTextureRenderTarget2D*                              mRainOcclusionRT;                                        // 0x0368(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialParameterCollection*                        mRainOcclusionMaterialParameterCollection;               // 0x0370(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialParameterCollection*                        mTimeOfDayCollection;                                    // 0x0378(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FRandomStream                                       mWeatherSeed;                                            // 0x0380(0x0008) ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic
		class AFGRainOcclusionActor*                               mRainOcclusionActor;                                     // 0x0388(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mDefaultRainOcclusionActorClass;                         // 0x0390(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F3F2[0x4];                                   // 0x0398(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mRainCaptureDistance;                                    // 0x039C(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mSceneCaptureGridSnap;                                   // 0x03A0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E785[0x4];                                   // 0x03A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FRuntimeCurveLinearColor                            mSunLightColorCurve;                                     // 0x03A8(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mSunIntensity;                                           // 0x05B0(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mSunRotationPitch;                                       // 0x0638(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mMoonLightColorCurve;                                    // 0x06C0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mMoonIntensity;                                          // 0x08C8(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mMoonRotationPitch;                                      // 0x0950(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mOcclusionTintColor;                                     // 0x09D8(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		struct FRuntimeCurveLinearColor                            mSkyLightColor;                                          // 0x0BE0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected
		class ADirectionalLight*                                   mCurrentLight;                                           // 0x0DE8(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ASkyLight*                                           mSkyLight;                                               // 0x0DF0(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ADirectionalLight*                                   mSunLight;                                               // 0x0DF8(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class ADirectionalLight*                                   mMoonLight;                                              // 0x0E00(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AVolumetricCloud*                                    mClouds;                                                 // 0x0E08(0x0008) Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRotator                                            mSunOriginRotation;                                      // 0x0E10(0x0018) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            mSunRotationAxis;                                        // 0x0E28(0x0018) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            mMoonOriginRotation;                                     // 0x0E40(0x0018) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		struct FRotator                                            mMoonRotationAxis;                                       // 0x0E58(0x0018) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		float                                                      mDayTickRate;                                            // 0x0E70(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mNightTickRate;                                          // 0x0E74(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGTimeOfDaySubsystem*                               mCachedTimeOfDaySubSystem;                               // 0x0E78(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_J4ME[0x10];                                  // 0x0E80(0x0010) MISSED OFFSET (PADDING)

	public:
		void UpdatePreview();
		void UpdateMaterial(bool bWithVolumetricClouds);
		void UpdateLightRotation();
		void UpdateGlobalMaterialCollection();
		void UpdateCurvesFromTime();
		void TryUpdateSceneCaptureLocation(bool bForce);
		void SetWeatherState(int32_t NewTypeID);
		void STATIC_SetDirectionalLightIntensityMultiplierOverride(float Multiplier);
		void SetCloudShadowIntensity(float NewValue);
		void OnRep_OnWeatherChanged(int32_t oldState);
		struct FWeatherChanceEntry GetNewWeatherState();
		float STATIC_GetFloatCurveValue(const struct FRuntimeFloatCurve& Curve, float Time);
		float STATIC_GetDirectionalLightIntensityMultiplierOverride();
		int32_t GetCurrentWeatherStateID();
		struct FWeatherChanceEntry GetCurrentWeatherState();
		struct FLinearColor STATIC_GetColorCurveValue(const struct FRuntimeCurveLinearColor& Curve, float Time);
		float GetCloudShadowIntensity();
		bool STATIC_DoesWeatherEffectNeedOcclusion(const struct FWeatherChanceEntry& Type);
		bool CanUpdatePreview();
		bool CanUpdate();
		struct FRotator CalculateLightRotation(const struct FRotator& OriginalRotation, const struct FRotator& RotationAxis, const struct FRuntimeFloatCurve& LightRotationCurve);
		void CalculateDominantLight();
		void ApplySkySphereSettings(const struct FSkySphereSettings& Settings);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSoundSplineComponent
	 * Size -> 0x0010 (FullSize[0x04B0] - InheritedSize[0x04A0])
	 */
	class UFGSoundSplineComponent : public UAkComponent
	{
	public:
		float                                                      mEmitterInterval;                                        // 0x04A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_MEEC[0xC];                                   // 0x04A4(0x000C) MISSED OFFSET (PADDING)

	public:
		void SetEmitterInterval(float newEmitterInterval);
		float GetEmitterInterval(float newEmitterInterval);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSpaceElevatorHologram
	 * Size -> 0x0008 (FullSize[0x0690] - InheritedSize[0x0688])
	 */
	class AFGSpaceElevatorHologram : public AFGFactoryHologram
	{
	public:
		unsigned char                                              UnknownData_DXCL[0x8];                                   // 0x0688(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSplineBuildableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGSplineBuildableInterface : public UInterface
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSplineComponent
	 * Size -> 0x0088 (FullSize[0x06F0] - InheritedSize[0x0668])
	 */
	class UFGSplineComponent : public USplineComponent
	{
	public:
		class UStaticMesh*                                         mSplineMesh;                                             // 0x0668(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mSplineMeshLength;                                       // 0x0670(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mGenerateCollisions;                                     // 0x0674(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_O0HV[0x3];                                   // 0x0675(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mCollisionSpacing;                                       // 0x0678(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_52NN[0x4];                                   // 0x067C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mCollisionExtent;                                        // 0x0680(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FVector                                             mCollisionOffset;                                        // 0x0698(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UMaterialInterface*                                  mOverrideMaterial;                                       // 0x06B0(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GX4F[0x8];                                   // 0x06B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class USplineMeshComponent*>                        mSplineMeshComponents;                                   // 0x06C0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class USplineMeshComponent*>                        mCustomDepthSplineMeshComponents;                        // 0x06D0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UShapeComponent*>                             mSplineCollisionComponents;                              // 0x06E0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		void UpdateSplineMeshes();
		void SetOverrideMaterial(class UMaterialInterface* Material);
		void DrawDebugSpline(const struct FColor& Color1, const struct FColor& Color2, float Thickness);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSplineMeshGenerationLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGSplineMeshGenerationLibrary : public UBlueprintFunctionLibrary
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSplinePath
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGSplinePath : public AActor
	{
	public:
		class USplineComponent*                                    mSpline;                                                 // 0x02F8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSplinePathMovementComponent
	 * Size -> 0x01F0 (FullSize[0x0300] - InheritedSize[0x0110])
	 */
	class UFGSplinePathMovementComponent : public UMovementComponent
	{
	public:
		unsigned char                                              UnknownData_YQ4S[0x10];                                  // 0x0110(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGWheeledVehicleInfo*                               mVehicle;                                                // 0x0120(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0DDU[0x10];                                  // 0x0128(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGDrivingTargetList*                                mTargetList;                                             // 0x0138(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGTargetPoint*                                      mPauseTarget;                                            // 0x0140(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGTargetPoint*                                      mTarget;                                                 // 0x0148(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGTargetPoint*                                      mPreviousTarget;                                         // 0x0150(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BS3L[0x10];                                  // 0x0158(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mSimulatedLocationOffset;                                // 0x0168(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_YS8P[0x48];                                  // 0x0180(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mEndOfPath;                                              // 0x01C8(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_574E[0x3B];                                  // 0x01C9(0x003B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mServerStartTime;                                        // 0x0204(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mServerPauseTime;                                        // 0x0208(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U5ZF[0x12];                                  // 0x020C(0x0012) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsMoving;                                               // 0x021E(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TZX8[0xE1];                                  // 0x021F(0x00E1) MISSED OFFSET (PADDING)

	public:
		void StartSplinePathMovement_Multi(class AFGTargetPoint* Target);
		void OnRep_ServerStartTime();
		void OnRep_PauseTarget();
		void OnRep_IsMoving();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSporeFlower
	 * Size -> 0x0038 (FullSize[0x0330] - InheritedSize[0x02F8])
	 */
	class AFGSporeFlower : public AFGStaticReplicatedActor
	{
	public:
		unsigned char                                              UnknownData_6GF8[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_GGDR[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mTriggerActorClasses;                                    // 0x0308(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class AActor*>                                      mTriggerActors;                                          // 0x0318(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8W6B[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (PADDING)

	public:
		bool ActorShouldTriggerFlower(class AActor* Actor);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStackableStorageHologram
	 * Size -> 0x0008 (FullSize[0x0690] - InheritedSize[0x0688])
	 */
	class AFGStackableStorageHologram : public AFGFactoryHologram
	{
	public:
		unsigned char                                              UnknownData_J69H[0x8];                                   // 0x0688(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStairHologram
	 * Size -> 0x0010 (FullSize[0x0710] - InheritedSize[0x0700])
	 */
	class AFGStairHologram : public AFGFactoryBuildingHologram
	{
	public:
		unsigned char                                              UnknownData_YHOT[0x10];                                  // 0x0700(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStandaloneSignHologram
	 * Size -> 0x0050 (FullSize[0x0710] - InheritedSize[0x06C0])
	 */
	class AFGStandaloneSignHologram : public AFGGenericBuildableHologram
	{
	public:
		class UClass*                                              mDefaultSignSupportRecipe;                               // 0x06C0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGSignPoleHologram*                                 mChildSignPoleHologram;                                  // 0x06C8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_V6H2[0x40];                                  // 0x06D0(0x0040) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStartingPod
	 * Size -> 0x0058 (FullSize[0x0350] - InheritedSize[0x02F8])
	 */
	class AFGStartingPod : public AActor
	{
	public:
		unsigned char                                              UnknownData_Q2E9[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_E7WL[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGCharacterPlayer*                                  mCachedPlayer;                                           // 0x0308(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		TArray<struct FInventoryStack>                             mDismantleStacks;                                        // 0x0310(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class USkeletalMeshComponent*                              mDropPodMesh;                                            // 0x0320(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q9OW[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x0330(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FText                                                mMapText;                                                // 0x0338(0x0018) Net, NativeAccessSpecifierPrivate

	public:
		bool UpdateRepresentation();
		void StartSequence();
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		void OnPlayerSkipIntroSequence();
		bool IsActorStatic();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		struct FLinearColor GetDefaultRepresentationColor();
		class AFGCharacterPlayer* GetCachedPlayer();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStatisticsSubsystem
	 * Size -> 0x0258 (FullSize[0x0550] - InheritedSize[0x02F8])
	 */
	class AFGStatisticsSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_2PBK[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_7US1[0xB8];                                  // 0x0300(0x00B8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TMap<class UClass*, int32_t>                               mConsumablesConsumedCount;                               // 0x03B8(0x0050) SaveGame, NativeAccessSpecifierPrivate
		TMap<class UClass*, int32_t>                               mCreaturesKilledCount;                                   // 0x0408(0x0050) SaveGame, NativeAccessSpecifierPrivate
		TMap<class UClass*, int32_t>                               mItemsManuallyCraftedCount;                              // 0x0458(0x0050) SaveGame, NativeAccessSpecifierPrivate
		TMap<class UClass*, struct FActorBuiltData>                mActorsBuiltCount;                                       // 0x04A8(0x0050) SaveGame, NativeAccessSpecifierPrivate
		TMap<class UClass*, uint64_t>                              mItemsProduced;                                          // 0x04F8(0x0050) SaveGame, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2MAQ[0x8];                                   // 0x0548(0x0008) MISSED OFFSET (PADDING)

	public:
		void Stat_ConsumableConsumed(class UClass* consumable, int32_t numConsumed);
		class AFGStatisticsSubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStickyExplosive
	 * Size -> 0x0010 (FullSize[0x0620] - InheritedSize[0x0610])
	 */
	class AFGStickyExplosive : public AFGDestructiveProjectile
	{
	public:
		class USphereComponent*                                    mEnvironmentDestructionSphere;                           // 0x0610(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DXN5[0x8];                                   // 0x0618(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnRep_DetonateIn();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStimulusAccumulator
	 * Size -> 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
	 */
	class UFGStimulusAccumulator : public UObject
	{
	public:
		TArray<class UClass*>                                      mSourceActorFilter;                                      // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		unsigned char                                              mBlockedStates;                                          // 0x0038(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_6HMI[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mBaseGain;                                               // 0x003C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mStimulusStrengthMultiplierGain;                         // 0x0040(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mStimulusStrengthRange;                                  // 0x0044(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FFloatInterval                                      mStimulusDistanceRange;                                  // 0x004C(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8D7A[0x4];                                   // 0x0054(0x0004) MISSED OFFSET (PADDING)

	public:
		bool ShouldAccumulateForStimulus(class AFGCreatureController* Controller, const struct FAIStimulus& Stimulus, class AActor* SourceActor);
		float GetAccumulation(const struct FAIStimulus& Stimulus, class AActor* SourceActor);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStimulusAccumulatorNoise
	 * Size -> 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
	 */
	class UFGStimulusAccumulatorNoise : public UFGStimulusAccumulator
	{
	public:
		TArray<class UClass*>                                      mNoiseTypes;                                             // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStimulusAccumulatorSense
	 * Size -> 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
	 */
	class UFGStimulusAccumulatorSense : public UFGStimulusAccumulator
	{
	public:
		TArray<class UClass*>                                      mSenseTypes;                                             // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStingerWidgetRewardData
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGStingerWidgetRewardData : public UObject
	{
	public:
		class FText                                                mIconText;                                               // 0x0028(0x0018) Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          mIconTexture;                                            // 0x0040(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		class UTexture2D* STATIC_GetIconTexture(class UClass* InClass);
		class FText STATIC_GetIconText(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStoryQueue
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UFGStoryQueue : public UObject
	{
	public:
		TArray<class UClass*>                                      mMessages;                                               // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate
		bool                                                       mIsMessageTriggeredByMilestone;                          // 0x0038(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QO6C[0x3];                                   // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDelayAfterMilestone;                                    // 0x003C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsMessageTriggeredByTimer;                              // 0x0040(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3ICQ[0x3];                                   // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mTimeUntilMessageIsTriggered;                            // 0x0044(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMinimumDelayBetweenMessages;                            // 0x0048(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mMaximumDelayForCall;                                    // 0x004C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FEventTriggeredMessage>                      mFloatingMessages;                                       // 0x0050(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate
		TArray<class UFGAvailabilityDependency*>                   mDependencies;                                           // 0x0060(0x0010) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		float STATIC_GetMaximumDelayForCall(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStorySubsystemRemoteCallObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGStorySubsystemRemoteCallObject : public UFGRemoteCallObject
	{
	public:
		bool                                                       mForceNetField_UFGStorySubsystemRemoteCallObject;        // 0x0028(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HX1S[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		void Client_PlayMessages(TArray<class UFGMessage*> newMessages);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGStorySubsystem
	 * Size -> 0x0048 (FullSize[0x0340] - InheritedSize[0x02F8])
	 */
	class AFGStorySubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_332F[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		TArray<struct FSchematicMessagePair>                       mSchematicMessageData;                                   // 0x0300(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPrivate
		TArray<struct FItemFoundData>                              mItemFoundData;                                          // 0x0310(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, SaveGame, NativeAccessSpecifierPrivate
		TArray<struct FResearchTreeMessageData>                    mResearchTreeMessageData;                                // 0x0320(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPrivate
		TArray<class UFGMessage*>                                  mUnplayedMessages;                                       // 0x0330(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPrivate

	public:
		void TryPlayNewMessage();
		void SetupDelegates();
		void OnSchematicPurchased(class UClass* newSchematic);
		void OnResearchTreeUnlocked(class UClass* researchTree);
		void OnPlayerAdded(class AFGCharacterPlayer* inPlayer);
		void OnItemAddedToPlayerInventory(class UClass* ItemClass, int32_t numAdded);
		class AFGStorySubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSubsystemClasses
	 * Size -> 0x0548 (FullSize[0x0580] - InheritedSize[0x0038])
	 */
	class UFGSubsystemClasses : public UDeveloperSettings
	{
	public:
		unsigned char                                              mStorySubsystemClass[0x30];                              // 0x0038(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mTimeSubsystemClass[0x30];                               // 0x0068(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mRailroadSubsystemClass[0x30];                           // 0x0098(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mCircuitSubsystemClass[0x30];                            // 0x00C8(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mSchematicManagerClass[0x30];                            // 0x00F8(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mGamePhaseManagerClass[0x30];                            // 0x0128(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mResearchManagerClass[0x30];                             // 0x0158(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mTutorialIntroManagerClass[0x30];                        // 0x0188(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mRadioactivitySubsystemClass[0x30];                      // 0x01B8(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mChatManagerClass[0x30];                                 // 0x01E8(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mMapManagerClass[0x30];                                  // 0x0218(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		class UClass*                                              mBuildableSubsystemClass;                                // 0x0248(0x0008) Edit, ZeroConstructor, Config, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              mFoliageRemovalSubsystemClass[0x30];                     // 0x0250(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mProximitySubsystemClass[0x30];                          // 0x0280(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mUnlockSubsystem[0x30];                                  // 0x02B0(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mResourceSinkSubsystemClass[0x30];                       // 0x02E0(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mAdminInterfaceClass[0x30];                              // 0x0310(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mItemRegrowSubsystemClass[0x30];                         // 0x0340(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mVehicleSubsystemClass[0x30];                            // 0x0370(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mEventSubsystemClass[0x30];                              // 0x03A0(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mWorldGridSubsystemClass[0x30];                          // 0x03D0(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mDroneSubsystemClass[0x30];                              // 0x0400(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mConveyorItemSubsystemClass[0x30];                       // 0x0430(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mStatisticsSubsystemClass[0x30];                         // 0x0460(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mSignSubsystemClass[0x30];                               // 0x0490(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mPhotoModeManagerClass[0x30];                            // 0x04C0(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mCreatureSubsystemClass[0x30];                           // 0x04F0(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mScannableSubsystemClass[0x30];                          // 0x0520(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mBlueprintSubsystem[0x30];                               // 0x0550(0x0030) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSuitBase
	 * Size -> 0x0010 (FullSize[0x0490] - InheritedSize[0x0480])
	 */
	class AFGSuitBase : public AFGEquipment
	{
	public:
		TArray<struct FMaterialAndSlotName>                        mSuit1PMeshMaterials;                                    // 0x0480(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSuitBaseAttachment
	 * Size -> 0x0018 (FullSize[0x0350] - InheritedSize[0x0338])
	 */
	class AFGSuitBaseAttachment : public AFGEquipmentAttachment
	{
	public:
		TArray<struct FMaterialAndSlotName>                        mSuit3PMeshMaterials;                                    // 0x0338(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Q5S6[0x8];                                   // 0x0348(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSwatchGroup
	 * Size -> 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
	 */
	class UFGSwatchGroup : public UObject
	{
	public:
		class FText                                                mGroupName;                                              // 0x0028(0x0018) Edit, DisableEditOnInstance, EditConst, Protected, NativeAccessSpecifierProtected

	public:
		class FText STATIC_GetGroupName(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSwatchGroup_Standard
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UFGSwatchGroup_Standard : public UFGSwatchGroup
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSwatchGroup_FicsitFoundation
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UFGSwatchGroup_FicsitFoundation : public UFGSwatchGroup
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSwatchGroup_ConcreteFoundation
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UFGSwatchGroup_ConcreteFoundation : public UFGSwatchGroup
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSwatchGroup_CoatedConcreteFoundation
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UFGSwatchGroup_CoatedConcreteFoundation : public UFGSwatchGroup
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSwatchGroup_ConcreteWall
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UFGSwatchGroup_ConcreteWall : public UFGSwatchGroup
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSwatchGroup_Pipeline
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UFGSwatchGroup_Pipeline : public UFGSwatchGroup
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSwatchGroup_Vehicle
	 * Size -> 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
	 */
	class UFGSwatchGroup_Vehicle : public UFGSwatchGroup
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTapeData
	 * Size -> 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
	 */
	class UFGTapeData : public UObject
	{
	public:
		class FText                                                mTitle;                                                  // 0x0028(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FText                                                mDescription;                                            // 0x0040(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		unsigned char                                              mSmallIcon[0x30];                                        // 0x0058(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mBigIcon[0x30];                                          // 0x0088(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mTapeTexture[0x30];                                      // 0x00B8(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		TArray<struct FSongData>                                   mPlaylist;                                               // 0x00E8(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic

	public:
		void STATIC_LoadTapeTexture(class UClass* tapeClass, const class FScriptDelegate& OnTextureLoaded);
		void STATIC_LoadSmallIcon(class UClass* tapeClass, const class FScriptDelegate& OnTextureLoaded);
		void STATIC_LoadBigIcon(class UClass* tapeClass, const class FScriptDelegate& OnTextureLoaded);
		TArray<class UAkAudioEvent*> STATIC_GetSongs(class UClass* InClass);
		TArray<struct FSongData> STATIC_GetPlaylist(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTargetPoint
	 * Size -> 0x0128 (FullSize[0x0420] - InheritedSize[0x02F8])
	 */
	class AFGTargetPoint : public AActor
	{
	public:
		unsigned char                                              UnknownData_NJ6L[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_TEX9[0x20];                                  // 0x0300(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGDrivingTargetList*                                mOwningList;                                             // 0x0320(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGTargetPoint*                                      mNext;                                                   // 0x0328(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mWaitTime;                                               // 0x0330(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mTargetSpeed;                                            // 0x0334(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mDefaultWaitTime;                                        // 0x0338(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsLoopTarget;                                           // 0x033C(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsDockingTarget;                                        // 0x033D(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RQ8E[0x2];                                   // 0x033E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TWeakObjectPtr<class AFGDockingStationInfo>                mHostStation;                                            // 0x0340(0x0008) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SZDO[0xD8];                                  // 0x0348(0x00D8) MISSED OFFSET (PADDING)

	public:
		void TargetSpeedChanged();
		void SetWaitTime(float newWaitTime);
		void SetIsLoopTarget(bool IsLoopTarget);
		void SetIsDockingTarget(bool IsDockingTarget);
		void SetHostStation(class AFGDockingStationInfo* hostStation);
		void OnRep_TargetSpeed();
		void OnRep_IsLoopTarget();
		void OnRep_IsDockingTarget();
		void OnRep_HostStation();
		void IsTemporaryChanged();
		bool IsTemporary();
		bool IsTargetSpeedStill();
		void IsLoopTargetChanged();
		bool IsLoopTarget();
		void IsDockingTargetChanged();
		bool IsDockingTarget();
		void IsClaimedChanged();
		bool IsClaimed();
		void HostStationChanged();
		bool HasHostStation();
		float GetWaitTime();
		int32_t GetTargetSpeed();
		float GetForwardVelocity();
		int32_t GetDebugLevel();
		float GetCachedTimeToPrevious();
		float GetCachedTargetTime();
		float GetCachedTargetDistance();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGDrivingTargetList
	 * Size -> 0x0098 (FullSize[0x0390] - InheritedSize[0x02F8])
	 */
	class AFGDrivingTargetList : public AInfo
	{
	public:
		unsigned char                                              UnknownData_3UTV[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class AFGTargetPoint*                                      mFirst;                                                  // 0x0300(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGTargetPoint*                                      mLast;                                                   // 0x0308(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGTargetPoint*                                      mCurrentTarget;                                          // 0x0310(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mMaxLength;                                              // 0x0318(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LJEO[0x4];                                   // 0x031C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGMinimapCaptureActor*                              mCachedMinimapCaptureActor;                              // 0x0320(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0QXN[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mVehicleType;                                            // 0x0330(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5WXT[0x20];                                  // 0x0338(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsPathVisible;                                          // 0x0358(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsTemporary;                                            // 0x0359(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GNEJ[0x6];                                   // 0x035A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AActor*                                              mPathActor;                                              // 0x0360(0x0008) ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USplineComponent*                                    mPath;                                                   // 0x0368(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mTargetCount;                                            // 0x0370(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2TUS[0xC];                                   // 0x0374(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mPathFuelConsumption;                                    // 0x0380(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BT5I[0xC];                                   // 0x0384(0x000C) MISSED OFFSET (PADDING)

	public:
		void OnRep_TargetCount();
		void OnRep_IsTemporary();
		void OnRep_IsPathVisible();
		float GetPathTime();
		float GetPathLength();
		void GetMapData(float displaySize, int32_t NumberOfPoints, struct FDrivingTargetListMapData* Data);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTargetPointLinkedList
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGTargetPointLinkedList : public UObject
	{
	public:
		unsigned char                                              UnknownData_QU1U[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGTargetPoint*                                      mFirst;                                                  // 0x0030(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGTargetPoint*                                      mLast;                                                   // 0x0038(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGTargetPoint*                                      mCurrentTarget;                                          // 0x0040(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTimeOfDaySubsystem
	 * Size -> 0x0078 (FullSize[0x0370] - InheritedSize[0x02F8])
	 */
	class AFGTimeOfDaySubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_OPQC[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		float                                                      mSyncronizeTimeOfDayInterval;                            // 0x0300(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDayLengthMinutes;                                       // 0x0304(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mNightLengthMinutes;                                     // 0x0308(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDayStartTime;                                           // 0x030C(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mNightStartTime;                                         // 0x0310(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSpeedMultiplier;                                        // 0x0314(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ZPUT[0x4];                                   // 0x0318(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDaySeconds;                                             // 0x031C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mReplicatedDaySeconds;                                   // 0x0320(0x0004) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mNumberOfPassedDays;                                     // 0x0324(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DEBZ[0x8];                                   // 0x0328(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mRTPCInterval;                                           // 0x0330(0x0004) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_Z6DM[0x4];                                   // 0x0334(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UMaterialParameterCollection*                        mTimeOfDayMaterialParameterCollection;                   // 0x0338(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterialParameterCollectionInstance*                mCachedTimeOfDayMaterialParameterCollection;             // 0x0340(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mUpdateTime;                                             // 0x0348(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_C61Q[0x7];                                   // 0x0349(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnNewDayDelegate;                                       // 0x0350(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnDayStateDelegate;                                     // 0x0360(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic

	public:
		void UpdateServerDaySeconds();
		void SetTimeSpeedMultiplierResetTime(int32_t resetTime);
		void SetTimeSpeedMultiplier(float Multiplier);
		void OnRep_ReplicatedDaySeconds();
		bool IsNight();
		bool IsDay();
		float GetTimeOfDayHours();
		float GetSeconds();
		int32_t GetPassedDays();
		float GetNormalizedTimeOfDay();
		float GetNighttimeSeconds();
		float GetNightPct();
		int32_t GetMinutes();
		int32_t GetHours();
		float GetDaytimeSeconds();
		float GetDaySeconds();
		float GetDayPct();
		int32_t GetDayMinutes();
		class AFGTimeOfDaySubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTitleButton
	 * Size -> 0x0000 (FullSize[0x0288] - InheritedSize[0x0288])
	 */
	class UFGTitleButton : public UFGButtonWidget
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGToolBelt
	 * Size -> 0x0010 (FullSize[0x0490] - InheritedSize[0x0480])
	 */
	class AFGToolBelt : public AFGEquipment
	{
	public:
		int32_t                                                    mNumArmSlotsToUnlock;                                    // 0x0480(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_5OZN[0xC];                                   // 0x0484(0x000C) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTradingPostHologram
	 * Size -> 0x0058 (FullSize[0x06E0] - InheritedSize[0x0688])
	 */
	class AFGTradingPostHologram : public AFGFactoryHologram
	{
	public:
		class AFGFactoryHologram*                                  mGeneratorHolograms[0x2];                                // 0x0688(0x0010) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableHologram*                                mStorageHologram;                                        // 0x0698(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableHologram*                                mHubTerminalHologram;                                    // 0x06A0(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableHologram*                                mWorkBenchHologram;                                      // 0x06A8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class USceneComponent*>                             mGeneratorLocations;                                     // 0x06B0(0x0010) ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class USceneComponent*                                     mStorageLocation;                                        // 0x06C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USceneComponent*                                     mHubTerminalLocation;                                    // 0x06C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class USceneComponent*                                     mWorkBenchLocation;                                      // 0x06D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_GE01[0x8];                                   // 0x06D8(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTrain
	 * Size -> 0x0228 (FullSize[0x0520] - InheritedSize[0x02F8])
	 */
	class AFGTrain : public AActor
	{
	public:
		unsigned char                                              UnknownData_V1MU[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_YRPF[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnSelfDrivingChanged;                                   // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnDockingStateChanged;                                  // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnSelfDrivingErrorChanged;                              // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnTrainStatusChanged;                                   // 0x0340(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              mSoundComponentClass;                                    // 0x0350(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		struct FTrainConsist                                       mConsistData;                                            // 0x0358(0x0030) NativeAccessSpecifierPublic
		struct FTrainAtcData                                       mAtcData;                                                // 0x0388(0x0080) ContainsInstancedReference, NativeAccessSpecifierPublic
		struct FTrainSimulationData                                mSimulationData;                                         // 0x0408(0x0068) SaveGame, ContainsInstancedReference, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_H4YC[0x10];                                  // 0x0470(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FClientTrainData                                    mClientTrainData;                                        // 0x0480(0x0004) Net, NoDestructor, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IO3H[0x4];                                   // 0x0484(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                mTrainName;                                              // 0x0488(0x0018) Edit, Net, EditConst, SaveGame, NativeAccessSpecifierPublic
		int32_t                                                    mTrackGraphID;                                           // 0x04A0(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NWEO[0x4];                                   // 0x04A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGRailroadVehicle*                                  FirstVehicle;                                            // 0x04A8(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGRailroadVehicle*                                  LastVehicle;                                             // 0x04B0(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGLocomotive*                                       mMultipleUnitMaster;                                     // 0x04B8(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGRailroadTimeTable*                                TimeTable;                                               // 0x04C0(0x0008) Edit, Net, ZeroConstructor, EditConst, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ETrainStatus                                               mTrainStatus;                                            // 0x04C8(0x0001) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsSelfDrivingEnabled;                                   // 0x04C9(0x0001) Edit, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ESelfDrivingLocomotiveError                                mSelfDrivingError;                                       // 0x04CA(0x0001) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_YMV4[0x1];                                   // 0x04CB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mLongWaitAtSignalThreshold;                              // 0x04CC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		ETrainDockingState                                         mDockingState;                                           // 0x04D0(0x0001) Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_EFCN[0x7];                                   // 0x04D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableRailroadStation*                         mDockedAtStation;                                        // 0x04D8(0x0008) Edit, Net, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsDerailed;                                             // 0x04E0(0x0001) Edit, Net, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_353U[0x7];                                   // 0x04E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGTrainSoundComponent*                              mSoundComponent;                                         // 0x04E8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0LHM[0x30];                                  // 0x04F0(0x0030) MISSED OFFSET (PADDING)

	public:
		bool UpdateRepresentation();
		void SetTrainName(const class FText& Name);
		void SetSelfDrivingEnabled(bool IsEnabled);
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		void OnRep_TrainStatus();
		void OnRep_SelfDrivingError();
		void OnRep_MultipleUnitMaster();
		void OnRep_IsSelfDrivingEnabled();
		void OnRep_IsDerailed();
		void OnRep_DockingState();
		class AFGRailroadTimeTable* NewTimeTable();
		bool IsSelfDrivingEnabled();
		bool IsPlayerDriven();
		bool IsInputDisabled();
		bool IsDockingCancelRequested();
		bool IsDocked();
		bool IsDerailed();
		bool IsActorStatic();
		bool HasTimeTable();
		bool HasPendingCollision();
		ETrainStatus GetTrainStatus();
		class FText GetTrainName();
		int32_t GetTrackGraphID();
		class AFGRailroadTimeTable* GetTimeTable();
		ESelfDrivingLocomotiveError GetSelfDrivingError();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		class AFGLocomotive* GetMultipleUnitMaster();
		class AFGRailroadVehicle* GetLastVehicle();
		class AFGRailroadVehicle* GetFirstVehicle();
		ETrainDockingState GetDockingState();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTextureInternal();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColorInternal();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		void Dock();
		void CancelDockingSequence();
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTrainPlatformConnection
	 * Size -> 0x0028 (FullSize[0x02D0] - InheritedSize[0x02A8])
	 */
	class UFGTrainPlatformConnection : public UFGConnectionComponent
	{
	public:
		unsigned char                                              UnknownData_13GU[0x8];                                   // 0x02A8(0x0008) Fix Super Size
		bool                                                       mComponentDirection : 1;                                 // 0x02B0(0x0001) BIT_FIELD SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ETrainPlatformConnectionType                               mPlatformConnectionStatus;                               // 0x02B1(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HCT8[0x6];                                   // 0x02B2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableTrainPlatform*                           platformOwner;                                           // 0x02B8(0x0008) ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGRailroadTrackConnectionComponent*                 mRailroadTrackConnection;                                // 0x02C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGTrainPlatformConnection*                          mConnectedTo;                                            // 0x02C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTrainPlatformHologram
	 * Size -> 0x0048 (FullSize[0x06D0] - InheritedSize[0x0688])
	 */
	class AFGTrainPlatformHologram : public AFGFactoryHologram
	{
	public:
		unsigned char                                              UnknownData_XLOJ[0x8];                                   // 0x0688(0x0008) Fix Super Size
		class UClass*                                              mRailroadTrackRecipe;                                    // 0x0690(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGRailroadTrackHologram*                            mRailroadTrackHologram;                                  // 0x0698(0x0008) Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGTrainPlatformConnection*                          mPlatformConnectionComponents[0x2];                      // 0x06A0(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGTrainPlatformConnection*                          mConnectedPlatformComponents[0x2];                       // 0x06B0(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_G5SU[0x10];                                  // 0x06C0(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTrainScheduler
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class AFGTrainScheduler : public AInfo
	{
	public:
		unsigned char                                              UnknownData_4RXR[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_U4K4[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTrainSoundComponent
	 * Size -> 0x0040 (FullSize[0x02E0] - InheritedSize[0x02A0])
	 */
	class UFGTrainSoundComponent : public USceneComponent
	{
	public:
		class AFGTrain*                                            mTrainOwner;                                             // 0x02A0(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent*                                        mWheelsetsAkComponent;                                   // 0x02A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent*                                        mEnginesAkComponent;                                     // 0x02B0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent*                                        mAllVehicleCentersAkComponent;                           // 0x02B8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mSpeed;                                                  // 0x02C0(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTractionPct;                                            // 0x02C4(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mAirBrakingPct;                                          // 0x02C8(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDynamicBrakePct;                                        // 0x02CC(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_12BL[0x10];                                  // 0x02D0(0x0010) MISSED OFFSET (PADDING)

	public:
		void StopAllSounds();
		void StartIdleSounds();
		void RestartSounds();
		void OnThrottleReleased();
		void OnThrottleApplied();
		void OnStoppedMoving();
		void OnStartedMoving();
		void OnDynamicBrakesReleased();
		void OnDynamicBrakesApplied();
		void OnAirBrakesReleased();
		void OnAirBrakesApplied();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTrainStationHologram
	 * Size -> 0x0000 (FullSize[0x06D0] - InheritedSize[0x06D0])
	 */
	class AFGTrainStationHologram : public AFGTrainPlatformHologram
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTrainStationIdentifier
	 * Size -> 0x0038 (FullSize[0x0330] - InheritedSize[0x02F8])
	 */
	class AFGTrainStationIdentifier : public AInfo
	{
	public:
		unsigned char                                              UnknownData_Q16E[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_BISL[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableRailroadStation*                         mStation;                                                // 0x0308(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    mTrackGraphID;                                           // 0x0310(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_GB07[0x4];                                   // 0x0314(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FText                                                mStationName;                                            // 0x0318(0x0018) Net, SaveGame, RepNotify, NativeAccessSpecifierPublic

	public:
		bool UpdateRepresentation();
		void SetStationName(const class FText& Text);
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		void OnRep_StationName();
		void OnRep_Station();
		bool IsActorStatic();
		int32_t GetTrackGraphID();
		class FText GetStationName();
		class AFGBuildableRailroadStation* GetStation();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTriggerBoxTemplate
	 * Size -> 0x0000 (FullSize[0x05B0] - InheritedSize[0x05B0])
	 */
	class UFGTriggerBoxTemplate : public UBoxComponent
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTutorialIntroManager
	 * Size -> 0x0138 (FullSize[0x0430] - InheritedSize[0x02F8])
	 */
	class AFGTutorialIntroManager : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_41GL[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class FScriptMulticastDelegate                             mOnIntroSequenceStateUpdated;                            // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnCurrentIntroStepUpdated;                              // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnTutorialCompleted;                                    // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		bool                                                       mTradingPostBuilt;                                       // 0x0330(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_D0SU[0x2];                                   // 0x0331(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		EIntroTutorialSteps                                        mPendingTutorial;                                        // 0x0333(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_T3YN[0x1];                                   // 0x0334(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mHasCompletedIntroTutorial;                              // 0x0335(0x0001) Edit, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mHasCompletedIntroSequence;                              // 0x0336(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_530O[0x1];                                   // 0x0337(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mTradingPostDescriptor;                                  // 0x0338(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableTradingPost*                             mTradingPost;                                            // 0x0340(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FTutorialHintData>                           mIntroTutorialData;                                      // 0x0348(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class UClass*                                              mIronOreDescriptor;                                      // 0x0358(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mDidPickUpIronOre;                                       // 0x0360(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_0Z91[0x7];                                   // 0x0361(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mDropPodItemClass;                                       // 0x0368(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mDidDismantleDropPod;                                    // 0x0370(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_BYVU[0x7];                                   // 0x0371(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mStunSpearItemClass;                                     // 0x0378(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mDidEquipStunSpear;                                      // 0x0380(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_N0L4[0x7];                                   // 0x0381(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mStep1UpgradeSchematic;                                  // 0x0388(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mDidStep1Upgrade;                                        // 0x0390(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CDDU[0x7];                                   // 0x0391(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mStep1_5UpgradeSchematic;                                // 0x0398(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mDidStep1_5Upgrade;                                      // 0x03A0(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TS56[0x7];                                   // 0x03A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mStep2UpgradeSchematic;                                  // 0x03A8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mDidStep2Upgrade;                                        // 0x03B0(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_79QX[0x7];                                   // 0x03B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mStep3UpgradeSchematic;                                  // 0x03B8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mDidStep3Upgrade;                                        // 0x03C0(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1RMD[0x7];                                   // 0x03C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mStep4UpgradeSchematic;                                  // 0x03C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mDidStep4Upgrade;                                        // 0x03D0(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_ANVV[0x7];                                   // 0x03D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mStep5UpgradeSchematic;                                  // 0x03D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mDidStep5Upgrade;                                        // 0x03E0(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5TD8[0x7];                                   // 0x03E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mStartingPodClass;                                       // 0x03E8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGStartingPod*                                      mStartingPod;                                            // 0x03F0(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mTradingPostLevel;                                       // 0x03F8(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mWaitTimeAfterCompletingMinorStep;                       // 0x03FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mWaitTimeAfterCompletingHubStep;                         // 0x0400(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mHoldTimeToSkipIntro;                                    // 0x0404(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FTimerHandle                                        mHoldToSkipTimerHandle;                                  // 0x0408(0x0008) NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_I4XT[0x8];                                   // 0x0410(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FRecipeAmountPair>                           mRecipesToGivePlayersSkippingTutorial;                   // 0x0418(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPrivate
		bool                                                       mDidOpenCodex;                                           // 0x0428(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AISE[0x7];                                   // 0x0429(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateTutorial(EIntroTutorialSteps nextTutorialStep);
		void StartSkipIntroSequence();
		void SetInputGatesFromTutorialLevel(class AFGPlayerController* PlayerController);
		void SetCanSkipTutorialIntro(bool canSkip);
		void OnSchematicPurchased(class UClass* newSchematic);
		void OnRep_TradingPostLevel();
		void OnRep_HasCompletedIntroTutorial();
		void OnPlayerAddedItemToInventory(class UClass* ItemClass, int32_t numAdded);
		void OnPlayerAddedItemToArmSlot(class UClass* ItemClass, int32_t numAdded);
		void OnCodexOpened();
		void OnBuildingBuiltGlobal(class AFGBuildable* buildable);
		void IntroDone();
		bool HasTradingpostBeenBuilt();
		int32_t GetTradingPostLevel();
		float GetNormalizedProgressToSkip();
		bool GetIsTutorialCompleted();
		bool GetIsIntroSequenceDone();
		EIntroTutorialSteps GetCurrentTutorialStep();
		bool GetCanSkipTutorial();
		class AFGTutorialIntroManager* STATIC_Get(class UObject* WorldContext);
		void EndSkipIntroSequence();
		void CompleteTutorial();
		void CancelSkipIntroSequence();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGTutorialSubsystem
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UFGTutorialSubsystem : public UObject
	{
	public:
		unsigned char                                              UnknownData_S7PL[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mBuildingsBuilt;                                         // 0x0030(0x0010) ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPrivate
		bool                                                       mHasSeenIntroTutorial;                                   // 0x0040(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CZ3F[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UClass*>                                      mIntroTutorialMessages;                                  // 0x0048(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<struct FTutorialData>                               mTutorialData;                                           // 0x0058(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate
		class AFGPlayerState*                                      mOwningPlayerState;                                      // 0x0068(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		void OnBuildingBuilt(class UClass* itemDesc);
		void ClearBuiltData();
		void AddToBuiltClasses(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUISettings
	 * Size -> 0x0110 (FullSize[0x0148] - InheritedSize[0x0038])
	 */
	class UFGUISettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              mSettingUpServerWidget[0x30];                            // 0x0038(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mJoinSessionWidget[0x30];                                // 0x0068(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		unsigned char                                              mConnectAccountsWidget[0x30];                            // 0x0098(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		class UClass*                                              mResetAccountLinkingWidget;                              // 0x00C8(0x0008) Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              mCreateOfflineSessionPrompt[0x30];                       // 0x00D0(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		class UClass*                                              mDebugOverlayWidgetClass;                                // 0x0100(0x0008) Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mEmoteMenuWidget;                                        // 0x0108(0x0008) Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              mAddMapMarkerWidget;                                     // 0x0110(0x0008) Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              mDefaultAudioMessageWidget[0x30];                        // 0x0118(0x0030) UNKNOWN PROPERTY: SoftClassProperty

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlock
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGUnlock : public UObject
	{
	public:
		void OnUnlock(class AFGUnlockSubsystem* unlockSubssytem);
		void OnApply(class AFGUnlockSubsystem* unlockSubssytem);
		bool IsRepeatPurchasesAllowed();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockArmEquipmentSlot
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGUnlockArmEquipmentSlot : public UFGUnlock
	{
	public:
		int32_t                                                    mNumArmEquipmentSlotsToUnlock;                           // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AVKE[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		int32_t GetNumArmEquipmentSlotsToUnlock();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockRecipe
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGUnlockRecipe : public UFGUnlock
	{
	public:
		TArray<class UClass*>                                      mRecipes;                                                // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		TArray<class UClass*> GetRecipesToUnlock();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockBlueprints
	 * Size -> 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
	 */
	class UFGUnlockBlueprints : public UFGUnlockRecipe
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockBuildEfficiency
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGUnlockBuildEfficiency : public UFGUnlock
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockBuildOverclock
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGUnlockBuildOverclock : public UFGUnlock
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockInfoOnly
	 * Size -> 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
	 */
	class UFGUnlockInfoOnly : public UFGUnlock
	{
	public:
		class FText                                                mUnlockName;                                             // 0x0028(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FText                                                mUnlockDescription;                                      // 0x0040(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class UTexture2D*                                          mUnlockIconBig;                                          // 0x0058(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mUnlockIconSmall;                                        // 0x0060(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UTexture2D*                                          mUnlockIconCategory;                                     // 0x0068(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockCheckmark
	 * Size -> 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
	 */
	class UFGUnlockCheckmark : public UFGUnlockInfoOnly
	{
	public:
		bool HasPlayerUnlockedCheckmark(class APlayerController* PlayerController, class AFGUnlockSubsystem* unlockSubsystem);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockCustomizer
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGUnlockCustomizer : public UFGUnlock
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockEmote
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGUnlockEmote : public UFGUnlock
	{
	public:
		TArray<class UClass*>                                      mEmotes;                                                 // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		TArray<class UClass*> GetEmotesToUnlock();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockGiveItem
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGUnlockGiveItem : public UFGUnlock
	{
	public:
		TArray<struct FItemAmount>                                 mItemsToGive;                                            // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		TArray<struct FItemAmount> GetItemsToGive();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockInventorySlot
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGUnlockInventorySlot : public UFGUnlock
	{
	public:
		int32_t                                                    mNumInventorySlotsToUnlock;                              // 0x0028(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_BB39[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (PADDING)

	public:
		int32_t GetNumInventorySlotsToUnlock();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockMap
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGUnlockMap : public UFGUnlock
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockPickup
	 * Size -> 0x0028 (FullSize[0x0320] - InheritedSize[0x02F8])
	 */
	class AFGUnlockPickup : public AFGStaticReplicatedActor
	{
	public:
		unsigned char                                              UnknownData_FJE4[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_ZTT5[0x10];                                  // 0x0300(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mSchematic;                                              // 0x0310(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		ESchematicPickupState                                      mPickupState;                                            // 0x0318(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_OGEQ[0x7];                                   // 0x0319(0x0007) MISSED OFFSET (PADDING)

	public:
		void UpdateVisuals();
		void SomeSchematicPurchased(class UClass* schematic);
		void PlayPickupEffect(class AFGCharacterPlayer* byCharacter);
		void OnRep_PickedUp();
		void Multicast_PlayPickupEffect(class AFGCharacterPlayer* byCharacter);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockScannableObject
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGUnlockScannableObject : public UFGUnlock
	{
	public:
		TArray<struct FScannableObjectData>                        mScannableObjects;                                       // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		TArray<struct FScannableObjectData> GetScannableObjectsToUnlock();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockScannableResource
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGUnlockScannableResource : public UFGUnlock
	{
	public:
		TArray<class UClass*>                                      mResourcesToAddToScanner;                                // 0x0028(0x0010) ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<struct FScannableResourcePair>                      mResourcePairsToAddToScanner;                            // 0x0038(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		TArray<struct FScannableResourcePair> GetResourcesToAddToScanner();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockSchematic
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGUnlockSchematic : public UFGUnlock
	{
	public:
		TArray<class UClass*>                                      mSchematics;                                             // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected

	public:
		TArray<class UClass*> GetSchematicsToUnlock();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockSettings
	 * Size -> 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
	 */
	class UFGUnlockSettings : public UDeveloperSettings
	{
	public:
		unsigned char                                              mCheckmarkSchematic[0x30];                               // 0x0038(0x0030) UNKNOWN PROPERTY: SoftClassProperty

	public:
		class UClass* STATIC_GetCheckmarkSchematicClass();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockSubsystem
	 * Size -> 0x00C8 (FullSize[0x03C0] - InheritedSize[0x02F8])
	 */
	class AFGUnlockSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_ZHJB[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class FScriptMulticastDelegate                             mOnUnlockedMoreInventorySlots;                           // 0x0300(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnUnlockedMoreArmsSlots;                                // 0x0310(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnNewTapeUnlocked;                                      // 0x0320(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnNewScannableObjectUnlocked;                           // 0x0330(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		TArray<class UClass*>                                      mScannableResources;                                     // 0x0340(0x0010) ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<struct FScannableResourcePair>                      mScannableResourcesPairs;                                // 0x0350(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		TArray<struct FScannableObjectData>                        mScannableObjectData;                                    // 0x0360(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		bool                                                       mIsMapUnlocked;                                          // 0x0370(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsBuildingEfficiencyUnlocked;                           // 0x0371(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsBuildingOverclockUnlocked;                            // 0x0372(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsBlueprintsUnlocked;                                   // 0x0373(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsCustomizerUnlocked;                                   // 0x0374(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U7AH[0x7];                                   // 0x0375(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mNumTotalInventorySlots;                                 // 0x037C(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SF47[0x4];                                   // 0x0380(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mNumTotalArmEquipmentSlots;                              // 0x0384(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mUnlockedEmotes;                                         // 0x0388(0x0010) Net, ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<class UClass*>                                      mUnlockedTapes;                                          // 0x0398(0x0010) Net, ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPrivate
		TArray<struct FGCheckmarkUnlockData>                       mPlayersWithCheckmark;                                   // 0x03A8(0x0010) Net, ZeroConstructor, SaveGame, RepNotify, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_5FFU[0x8];                                   // 0x03B8(0x0008) MISSED OFFSET (PADDING)

	public:
		void UnlockCheckmark(const class FString& PlayerName);
		void RemoveAllScannableResources();
		void OnSchematicPurchasedByPlayer(class UClass* newSchematic, class AFGCharacterPlayer* Player);
		void OnSchematicPurchased(class UClass* newSchematic);
		void OnRep_PlayerCheckmarks();
		void GetUnlockedTapes(TArray<class UClass*>* out_unlockedTapes);
		void GetUnlockedEmotes(TArray<class UClass*>* out_unlockedEmotes);
		TArray<class UClass*> GetScannableResources();
		TArray<class UClass*> GetScannableObjects(class UObject* scannerObject);
		void GetPlayersWithCheckmarks(TArray<struct FGCheckmarkUnlockData>* out_playersWithCheckmarks);
		bool GetIsMapUnlocked();
		bool GetIsCustomizerUnlocked();
		bool GetIsBuildingOverclockUnlocked();
		bool GetIsBuildingEfficiencyUnlocked();
		bool GetIsBlueprintsUnlocked();
		class AFGUnlockSubsystem* STATIC_Get(class UObject* WorldContext);
		bool DoesPlayerHaveCheckmarkUnlocked(const class FString& PlayerName);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUnlockTape
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGUnlockTape : public UFGUnlock
	{
	public:
		TArray<class UClass*>                                      mTapeUnlocks;                                            // 0x0028(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_Valid
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_Valid : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGUseableInterface : public UInterface
	{
	public:
		void UpdateUseState(class AFGCharacterPlayer* byCharacter, const struct FVector& atLocation, class UPrimitiveComponent* componentHit, struct FUseState* out_useState);
		void UnregisterInteractingPlayer(class AFGCharacterPlayer* Player);
		void StopIsLookedAt(class AFGCharacterPlayer* byCharacter, const struct FUseState& State);
		void StartIsLookedAt(class AFGCharacterPlayer* byCharacter, const struct FUseState& State);
		void RegisterInteractingPlayer(class AFGCharacterPlayer* Player);
		void OnUseStop(class AFGCharacterPlayer* byCharacter, const struct FUseState& State);
		void OnUse(class AFGCharacterPlayer* byCharacter, const struct FUseState& State);
		bool IsUseable();
		class FText GetLookAtDecription(class AFGCharacterPlayer* byCharacter, const struct FUseState& State);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSetting
	 * Size -> 0x00F8 (FullSize[0x0128] - InheritedSize[0x0030])
	 */
	class UFGUserSetting : public UPrimaryDataAsset
	{
	public:
		class FString                                              StrId;                                                   // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       UseCVar;                                                 // 0x0040(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_KY8Y[0x7];                                   // 0x0041(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              DocString;                                               // 0x0048(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FText                                                DisplayName;                                             // 0x0058(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class FText                                                ToolTip;                                                 // 0x0070(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic
		class UClass*                                              CategoryClass;                                           // 0x0088(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class UClass*                                              SubCategoryClass;                                        // 0x0090(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MenuPriority;                                            // 0x0098(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       IsSettingSessionWide;                                    // 0x009C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_LLRO[0x3];                                   // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              ApplyType[0x30];                                         // 0x00A0(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		class UFGUserSetting_ValueSelector*                        ValueSelector;                                           // 0x00D0(0x0008) Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              CustomValueSelectorWidget[0x30];                         // 0x00D8(0x0030) UNKNOWN PROPERTY: SoftClassProperty
		class UClass*                                              ManagerTypeAvailability;                                 // 0x0108(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              VisibilityDisqualifiers;                                 // 0x0110(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              EditabilityDisqualifiers;                                // 0x0111(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_F8ZR[0x6];                                   // 0x0112(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGUserSetting*                                      SubOptionTo;                                             // 0x0118(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EIncludeInBuilds                                           ShowInBuilds;                                            // 0x0120(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EUserSettingManagers                                       ManagerAvailability;                                     // 0x0121(0x0001) ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_17FP[0x6];                                   // 0x0122(0x0006) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSetting_ValueSelector
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGUserSetting_ValueSelector : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSetting_CheckBox
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UFGUserSetting_CheckBox : public UFGUserSetting_ValueSelector
	{
	public:
		bool                                                       DefaultCheckBoxValue;                                    // 0x0028(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MZ5Q[0x7];                                   // 0x0029(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSetting_EnumSelector
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGUserSetting_EnumSelector : public UFGUserSetting_ValueSelector
	{
	public:
		class FString                                              EnumAsString;                                            // 0x0028(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FString                                              DefaultEnumValue;                                        // 0x0038(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		TArray<class FString> GetEnumOptions();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSetting_IntSelector
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGUserSetting_IntSelector : public UFGUserSetting_ValueSelector
	{
	public:
		int32_t                                                    DefaultValue;                                            // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_E2G4[0x4];                                   // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FIntegerSelection>                           IntegerSelectionValues;                                  // 0x0030(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic
		bool                                                       BlockLastIndexFromManualSelection;                       // 0x0040(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       LockLastIndexWhenSelected;                               // 0x0041(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShowAsDropdown;                                          // 0x0042(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_IJ8Z[0x5];                                   // 0x0043(0x0005) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSetting_Slider
	 * Size -> 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
	 */
	class UFGUserSetting_Slider : public UFGUserSetting_ValueSelector
	{
	public:
		float                                                      MinValue;                                                // 0x0028(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxValue;                                                // 0x002C(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MinDisplayValue;                                         // 0x0030(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      MaxDisplayValue;                                         // 0x0034(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		int32_t                                                    MaxFractionalDigits;                                     // 0x0038(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       ShowZeroAsOff;                                           // 0x003C(0x0001) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_Q8WZ[0x3];                                   // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      DefaultSliderValue;                                      // 0x0040(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_XM2T[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSetting_Custom
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGUserSetting_Custom : public UFGUserSetting_ValueSelector
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSettingApplyType
	 * Size -> 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
	 */
	class UFGUserSettingApplyType : public UObject
	{
	public:
		class UFGUserSetting*                                      UserSetting;                                             // 0x0028(0x0008) ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGDynamicOptionsRow*                                OptionRowWidget;                                         // 0x0030(0x0008) ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WXAB[0x70];                                  // 0x0038(0x0070) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSettingApplyType_UpdateInstantly
	 * Size -> 0x0000 (FullSize[0x00A8] - InheritedSize[0x00A8])
	 */
	class UFGUserSettingApplyType_UpdateInstantly : public UFGUserSettingApplyType
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSettingApplyType_RequireGameRestart
	 * Size -> 0x0018 (FullSize[0x00C0] - InheritedSize[0x00A8])
	 */
	class UFGUserSettingApplyType_RequireGameRestart : public UFGUserSettingApplyType
	{
	public:
		unsigned char                                              UnknownData_JN04[0x18];                                  // 0x00A8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSettingApplyType_RequireSessionRestart
	 * Size -> 0x0018 (FullSize[0x00C0] - InheritedSize[0x00A8])
	 */
	class UFGUserSettingApplyType_RequireSessionRestart : public UFGUserSettingApplyType
	{
	public:
		unsigned char                                              UnknownData_XR5Y[0x18];                                  // 0x00A8(0x0018) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSettingCategory
	 * Size -> 0x0000 (FullSize[0x0120] - InheritedSize[0x0120])
	 */
	class UFGUserSettingCategory : public UFGCategory
	{
	public:
		void STATIC_SortByCategoryPriority(TArray<struct FUserSettingCategoryMapping>* UserSettingCategoryMapping);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUserSettingLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGUserSettingLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_SetInt32Value(class UFGUserSetting* setting, int32_t Value, bool forceSet);
		void STATIC_SetFloatValue(class UFGUserSetting* setting, float Value, bool forceSet);
		void STATIC_SetBoolValue(class UFGUserSetting* setting, bool Value, bool forceSet);
		int32_t STATIC_GetInt32Value(class UFGUserSetting* setting, int32_t* out_displayValue);
		float STATIC_GetFloatValue(class UFGUserSetting* setting, float* out_displayValue);
		bool STATIC_GetBoolValue(class UFGUserSetting* setting, bool* out_displayValue);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_VehicleHasDriver
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_VehicleHasDriver : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_VehicleInWater
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_VehicleInWater : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_VehicleOccupied
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_VehicleOccupied : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGUseState_WorkBench
	 * Size -> 0x0000 (FullSize[0x0030] - InheritedSize[0x0030])
	 */
	class UFGUseState_WorkBench : public UFGUseState
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGVehicleDescriptor
	 * Size -> 0x0008 (FullSize[0x01A8] - InheritedSize[0x01A0])
	 */
	class UFGVehicleDescriptor : public UFGBuildDescriptor
	{
	public:
		class UClass*                                              mVehicleClass;                                           // 0x01A0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic

	public:
		class UClass* STATIC_GetVehicleClass(class UClass* InClass);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGVehicleDestroyableInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGVehicleDestroyableInterface : public UInterface
	{
	public:
		float GetForceThreshold();
		class UParticleSystem* GetDestroyEffect();
		class UAkAudioEvent* GetDestroyAudioEvent();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGSavedWheeledVehiclePath
	 * Size -> 0x0048 (FullSize[0x0340] - InheritedSize[0x02F8])
	 */
	class AFGSavedWheeledVehiclePath : public AInfo
	{
	public:
		unsigned char                                              UnknownData_DLQ6[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class FString                                              mPathName;                                               // 0x0300(0x0010) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mOriginalVehicleType;                                    // 0x0310(0x0008) ZeroConstructor, SaveGame, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class AFGDrivingTargetList*                                mTargetList;                                             // 0x0318(0x0008) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		int32_t                                                    mUserCount;                                              // 0x0320(0x0004) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsInUse;                                                // 0x0324(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_PR8F[0x3];                                   // 0x0325(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mDistanceFromVehicle;                                    // 0x0328(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsInUseByThisVehicle;                                   // 0x032C(0x0001) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_5LFL[0x3];                                   // 0x032D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mFuelConsumptionPerTrip;                                 // 0x0330(0x0004) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8I9R[0x4];                                   // 0x0334(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mFuelType;                                               // 0x0338(0x0008) BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGVehicleSubsystem
	 * Size -> 0x0148 (FullSize[0x0440] - InheritedSize[0x02F8])
	 */
	class AFGVehicleSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_23N6[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		unsigned char                                              UnknownData_OZWR[0x8];                                   // 0x0300(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mMaxVehicleIterationsPerTick;                            // 0x0308(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2EP9[0x4];                                   // 0x030C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGVehicle*>                                  mVehicles;                                               // 0x0310(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class AFGWheeledVehicleInfo*>                       mWheeledVehicles;                                        // 0x0320(0x0010) Net, ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class AFGBuildableDockingStation*>                  mDockingStations;                                        // 0x0330(0x0010) ZeroConstructor, NativeAccessSpecifierPrivate
		TArray<class AFGSavedWheeledVehiclePath*>                  mSavedPaths;                                             // 0x0340(0x0010) Net, ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_VFEM[0x28];                                  // 0x0350(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGWheeledVehicleInfo*                               mTheChosenWheeledVehicle;                                // 0x0378(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8XR7[0xC0];                                  // 0x0380(0x00C0) MISSED OFFSET (PADDING)

	public:
		void RemoveTargetPoint(class AFGTargetPoint* targetToRemove, bool updateList);
		void OnThereBeDeadlocks();
		bool IsPathNameTaken(const class FString& Name);
		class AFGVehicleSubsystem* STATIC_Get(class UObject* WorldContext);
		float CalculateStraightDistanceFromPrevious(class AFGTargetPoint* TargetPoint);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGVehicleWheel
	 * Size -> 0x0000 (FullSize[0x02E0] - InheritedSize[0x02E0])
	 */
	class UFGVehicleWheel : public UChaosVehicleWheel
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGVersionFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGVersionFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		bool STATIC_IsPublicBuild();
		class FString STATIC_GetVersionString();
		EGameVersion STATIC_GetGameVersion();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGVirtualCursorFunctionLibrary
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGVirtualCursorFunctionLibrary : public UBlueprintFunctionLibrary
	{
	public:
		void STATIC_EnableVirtualCursor(class APlayerController* PC);
		void STATIC_DisableVirtualCursor(class APlayerController* PC);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGVolumeMapArea
	 * Size -> 0x0010 (FullSize[0x0340] - InheritedSize[0x0330])
	 */
	class AFGVolumeMapArea : public AVolume
	{
	public:
		class UClass*                                              mMapArea;                                                // 0x0330(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_K8H1[0x8];                                   // 0x0338(0x0008) MISSED OFFSET (PADDING)

	public:
		void OnPrimitiveComponentEntered(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool fromSweep, const struct FHitResult& SweepResult);
		class UClass* GetMapArea();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWalkwayHologram
	 * Size -> 0x0010 (FullSize[0x0710] - InheritedSize[0x0700])
	 */
	class AFGWalkwayHologram : public AFGFactoryBuildingHologram
	{
	public:
		unsigned char                                              UnknownData_K2W9[0x1];                                   // 0x0700(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mOnlyAllowLineZoop;                                      // 0x0701(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_31YP[0xE];                                   // 0x0702(0x000E) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWaterAudio
	 * Size -> 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
	 */
	class UFGWaterAudio : public UObject
	{
	public:
		TArray<struct FPawnImpactAudio>                            mImpactAudioMap;                                         // 0x0028(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected

	public:
		void OnPawnHitSurface(class AFGWaterVolume* waterVolume, class APawn* Pawn, const struct FVector& surfaceLocation);
		void OnCameraExitedWater(class AFGWaterVolume* waterVolume, const struct FVector& exitLocation, class AFGPlayerController* PC);
		void OnCameraEnteredWater(class AFGWaterVolume* waterVolume, const struct FVector& enterLocation, class AFGPlayerController* PC);
		class UAkAudioEvent* GetImpactEvent(class APawn* Pawn);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWaterfall
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGWaterfall : public AActor
	{
	public:
		unsigned char                                              UnknownData_GKL2[0x8];                                   // 0x02F8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWaterPumpHologram
	 * Size -> 0x0008 (FullSize[0x06B0] - InheritedSize[0x06A8])
	 */
	class AFGWaterPumpHologram : public AFGResourceExtractorHologram
	{
	public:
		class AFGBuildableWaterPump*                               mDefaultWaterPump;                                       // 0x06A8(0x0008) ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWaterVolume
	 * Size -> 0x0060 (FullSize[0x03A0] - InheritedSize[0x0340])
	 */
	class AFGWaterVolume : public APhysicsVolume
	{
	public:
		unsigned char                                              UnknownData_77IU[0x20];                                  // 0x0340(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mAreaClass;                                              // 0x0360(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mAffectNavigation;                                       // 0x0368(0x0001) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_WT7T[0x7];                                   // 0x0369(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mWaterAudio;                                             // 0x0370(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mCanPlaceExtractor;                                      // 0x0378(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_SEFX[0x7];                                   // 0x0379(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mPostProcessSettings;                                    // 0x0380(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_2MMM[0x8];                                   // 0x0388(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mResourceClass;                                          // 0x0390(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_NHQC[0x8];                                   // 0x0398(0x0008) MISSED OFFSET (PADDING)

	public:
		void SetIsOccupied(bool occupied);
		void OnPrimitiveComponentExited(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex);
		void OnPrimitiveComponentEntered(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool fromSweep, const struct FHitResult& SweepResult);
		bool IsOccupied();
		bool HasAnyResources();
		class UClass* GetResourceClass();
		struct FVector GetPlacementLocation(const struct FVector& HitLocation);
		float GetExtractionSpeedMultiplier();
		int32_t ExtractResource(int32_t Amount);
		bool CanPlaceResourceExtractor();
		bool CanBecomeOccupied();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWeaponAttachment
	 * Size -> 0x0008 (FullSize[0x0340] - InheritedSize[0x0338])
	 */
	class AFGWeaponAttachment : public AFGEquipmentAttachment
	{
	public:
		unsigned char                                              UnknownData_GZRI[0x8];                                   // 0x0338(0x0008) Fix Super Size

	public:
		void PlayFireEffect(class UFGAmmoType* ammoType);
		void OnIsLoadedSet();
		void OnBeginFireEffect(const struct FVector& Location);
		void Multicast_SetIsLoaded(bool IsLoaded);
		void Multicast_PlayReloadEffectMulticast();
		void Multicast_PlayFireEffect(class UFGAmmoType* ammoType);
		void Multicast_PlayBeginFireEffect(const struct FVector& Location);
		void ClientPlayReloadEffect();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWeaponAttachmentProjectile
	 * Size -> 0x0000 (FullSize[0x0340] - InheritedSize[0x0340])
	 */
	class AFGWeaponAttachmentProjectile : public AFGWeaponAttachment
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWeaponChild
	 * Size -> 0x0000 (FullSize[0x03B0] - InheritedSize[0x03B0])
	 */
	class AFGWeaponChild : public AFGEquipmentChild
	{
	public:
		void NotifySetIsLoaded(bool IsLoaded);
		void NotifyReloading(bool hadAmmoLeft);
		void NotifyReloadComplete();
		void NotifyPrimaryFireExecuted();
		void NotifyFailedToFire();
		void NotifyEndSecondaryFire();
		void NotifyEndPrimaryFire();
		void NotifyBeginSecondaryFire();
		void NotifyBeginPrimaryFire();
		void Multicast_NotifySetIsLoaded(bool IsLoaded);
		void Multicast_NotifyReloading(bool hadAmmoLeft);
		void Multicast_NotifyReloadComplete();
		void Multicast_NotifyPrimaryFireExecuted();
		void Multicast_NotifyFailedToFire();
		void Multicast_NotifyEndSecondaryFire();
		void Multicast_NotifyEndPrimaryFire();
		void Multicast_NotifyBeginSecondaryFire();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWeatherReaction
	 * Size -> 0x0018 (FullSize[0x0310] - InheritedSize[0x02F8])
	 */
	class AFGWeatherReaction : public AActor
	{
	public:
		unsigned char                                              UnknownData_ZNCK[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class AFGSkySphere*                                        mSkySphere;                                              // 0x0300(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_C4F9[0x8];                                   // 0x0308(0x0008) MISSED OFFSET (PADDING)

	public:
		void TransitionEndWeatherState(float dt, float percentage);
		void TransitionBeginWeatherState(float dt, float percentage);
		void StartWeatherState(class AFGSkySphere* SkySphere);
		void OnTransitionFinished(bool bEventFinished);
		class AFGSkySphere* GetSkySphere();
		void EndWeatherState(class AFGSkySphere* SkySphere);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWheeledVehicle
	 * Size -> 0x02B8 (FullSize[0x0860] - InheritedSize[0x05A8])
	 */
	class AFGWheeledVehicle : public AFGVehicle
	{
	public:
		class UFGWorkBench*                                        mWorkBench;                                              // 0x05A8(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             TransferStatusChangedDelegate;                           // 0x05B0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             ManualDockingStateChangedDelegate;                       // 0x05C0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnAutopilotEnabledChanged;                              // 0x05D0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnVehiclePathVisibilityChanged;                         // 0x05E0(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_HJRP[0x4];                                   // 0x05F0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mAirDampingStrength;                                     // 0x05F4(0x0004) Edit, BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UClass*                                              mRunOverDamageTypeClass;                                 // 0x05F8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FRuntimeFloatCurve                                  mDamageAtSpeed;                                          // 0x0600(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		float                                                      mRagdollRunOverMinSpeed;                                 // 0x0688(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFuelConsumption;                                        // 0x068C(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mFuelConsumedWhileRecording;                             // 0x0690(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCurrentFuelAmount;                                      // 0x0694(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsLoadingVehicle;                                       // 0x0698(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mIsUnloadingVehicle;                                     // 0x0699(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_V4V6[0x6];                                   // 0x069A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGWheeledVehicleMovementComponent*                  mVehicleMovement;                                        // 0x06A0(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UBoxComponent*                                       mFoliageCollideBox;                                      // 0x06A8(0x0008) Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3P3O[0x8];                                   // 0x06B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class ULightComponent*>                             mVehicleHeadlights;                                      // 0x06B8(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<class ULightComponent*>                             mVehicleTailLights;                                      // 0x06C8(0x0010) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		bool                                                       mVehicleLightsOn;                                        // 0x06D8(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mVehicleHonkOn;                                          // 0x06D9(0x0001) BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_FRT1[0x6];                                   // 0x06DA(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		unsigned char                                              mSpringArmComponent[0x30];                               // 0x06E0(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		struct FRotator                                            mDefaultLockedSprintArmRotation;                         // 0x0710(0x0018) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_CJVB[0x8];                                   // 0x0728(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGInventoryComponent*                               mFuelInventory;                                          // 0x0730(0x0008) Edit, ExportObject, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGInventoryComponent*                               mStorageInventory;                                       // 0x0738(0x0008) Edit, ExportObject, Net, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mInventorySize;                                          // 0x0740(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_JOE2[0x4];                                   // 0x0744(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGTargetPointLinkedList*                            mTargetNodeLinkedList;                                   // 0x0748(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mNeedsFuelToDrive;                                       // 0x0750(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EQF3[0x7];                                   // 0x0751(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             OnStopRecordingDelegate;                                 // 0x0758(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             OnStartRecordingDelegate;                                // 0x0768(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class UClass*                                              mTargetPointClass;                                       // 0x0778(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mGhostingTimeout;                                        // 0x0780(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mMaxDistanceToSimulation;                                // 0x0784(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_MHLD[0xC];                                   // 0x0788(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mWasFuelAdded;                                           // 0x0794(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_0CYD[0x3];                                   // 0x0795(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGWheeledVehicleInfo*                               mInfo;                                                   // 0x0798(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGDrivingTargetList*                                mTargetList;                                             // 0x07A0(0x0008) Net, ZeroConstructor, SaveGame, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_9X3M[0x44];                                  // 0x07A8(0x0044) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		int32_t                                                    mSpeedLimit;                                             // 0x07EC(0x0004) Net, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_1NFE[0x11];                                  // 0x07F0(0x0011) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsAutopilotEnabled;                                     // 0x0801(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6R6E[0x6];                                   // 0x0802(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableDockingStation*                          mRefuelingStation;                                       // 0x0808(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EManualDockingState                                        mManualDockingState;                                     // 0x0810(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_AB0W[0x7];                                   // 0x0811(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGTargetPoint*                                      mCurrentTarget;                                          // 0x0818(0x0008) ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		ERecordingStatus                                           mRecordingStatus;                                        // 0x0820(0x0001) Net, ZeroConstructor, SaveGame, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_TZ1P[0x7];                                   // 0x0821(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGTargetPoint*                                      mStoredTarget;                                           // 0x0828(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_QRTZ[0xA];                                   // 0x0830(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mHasAutomatedFuelConsumption;                            // 0x083A(0x0001) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XYCJ[0x1];                                   // 0x083B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mActualAutomatedFuelConsumptionSinceStart;               // 0x083C(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mAutomatedFuelConsumptionStart;                          // 0x0840(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mAutomatedFuelConsumptionTimeSkipped;                    // 0x0844(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mTargetWaitTime;                                         // 0x0848(0x0004) ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_2Y9N[0x14];                                  // 0x084C(0x0014) MISSED OFFSET (PADDING)

	public:
		void TurnOverVehicle();
		void TransferStatusChanged__DelegateSignature();
		void SmoothMovementReplication(float DeltaTime);
		void SetSpeedLimit(int32_t speedLimit);
		void SetIsPossessed(bool IsPossessed);
		void SetIsMenuOpen(bool IsMenuOpen);
		void Server_UnsavePath(class AFGSavedWheeledVehiclePath* Path);
		void Server_ToggleRecording();
		void Server_TogglePathVisibility();
		void Server_ToggleAutoPilot();
		void Server_SetVehicleLightsOn(bool Active);
		void Server_SetHonkStatus(bool Active);
		void Server_SavePath(const class FString& saveName);
		void Server_LoadPath(class AFGDrivingTargetList* targetList);
		void Server_ClearRecordedPath();
		void ReplicateMovementClientToServer(const struct FVector& AuthoritativeLoc, const struct FQuat& AuthoritativeQuat, const struct FVector& AuthoritativeVelocity);
		void PickNextTarget();
		void OpenVehicleTrunk(class AFGCharacterPlayer* Player);
		void OnVehicleLightStatusChanged();
		void OnVehicleLanded();
		void OnStopRecording__DelegateSignature(bool Success);
		void OnStartRecording__DelegateSignature();
		void OnRep_TransferStatusChanged();
		void OnRep_TargetList(class AFGDrivingTargetList* oldList);
		void OnRep_RecordingStatus();
		void OnRep_ManualDockingState();
		void OnRep_IsAutopilotEnabled();
		void OnRep_Info();
		void OnPathVisibilityChanged(bool pathVisibility);
		void OnOpenRecorderMenu();
		void OnHonkStatusChanged();
		void OnFuelAdded(class UClass* ItemClass, int32_t numAdded);
		void Multicast_OnVehicleEntered();
		void MoveRight(float AxisValue);
		void MoveForward(float Throttle, float Brake);
		void ManualDockingStateChanged__DelegateSignature();
		bool IsValidFuel(class UClass* Resource);
		bool IsRecording();
		bool IsMenuOpen();
		bool IsFollowingPath();
		bool IsAutopilotEnabled();
		void Input_ToggleLights(const struct FInputActionValue& ActionValue);
		void Input_ToggleCamera(const struct FInputActionValue& ActionValue);
		void Input_ThrottleSteer(const struct FInputActionValue& ActionValue);
		void Input_OpenRecorder(const struct FInputActionValue& ActionValue);
		void Input_LookAxis(const struct FInputActionValue& ActionValue);
		void Input_Honk(const struct FInputActionValue& ActionValue);
		void Input_Handbrake(const struct FInputActionValue& ActionValue);
		float ImpactForceForCollisionSFX(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent);
		bool HasFuel();
		class UFGWheeledVehicleMovementComponent* GetVehicleMovementComponent();
		ETransferAnimationState GetTransferAnimationState(float animationLength, float* AnimationTime);
		class AFGDrivingTargetList* GetTargetList(bool createIfNeeded);
		class UFGInventoryComponent* GetStorageInventory();
		int32_t GetSpeedInKMH();
		class AFGBuildableDockingStation* GetRefuelingStation();
		bool GetPathVisibility();
		EManualDockingState GetManualDockingState();
		class AFGWheeledVehicleInfo* GetInfo();
		class UFGInventoryComponent* GetFuelInventory();
		float GetForwardSpeed();
		class FText STATIC_GetDefaultMapName(class UClass* vehicleType);
		void FindSavedPaths(const class FString& textFilter, bool filterOnVehicleType, TArray<class AFGSavedWheeledVehiclePath*>* Result);
		class UStaticMeshComponent* FindAttachedStaticMesh();
		bool FilterFuelClasses(class UClass* Object, int32_t idx);
		void DockToRefuelingStation();
		void CreateInventoryItemDrops();
		bool ConsumesFuel();
		void CloseVehicleTrunk(class AFGCharacterPlayer* Player);
		void Client_PlayFoliageDestroyedEffect(class UParticleSystem* destroyEffect, class UAkAudioEvent* destroyAudioEvent, const struct FVector& Location);
		bool CanSavePath();
		bool CanLoadPath();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWheeledVehicleAIController
	 * Size -> 0x0170 (FullSize[0x0590] - InheritedSize[0x0420])
	 */
	class AFGWheeledVehicleAIController : public AAIController
	{
	public:
		unsigned char                                              UnknownData_220H[0x170];                                 // 0x0420(0x0170) MISSED OFFSET (PADDING)

	public:
		void VehiclePossessed(class AFGWheeledVehicle* Vehicle);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWheeledVehicleAnimationInstance
	 * Size -> 0x0000 (FullSize[0x0C10] - InheritedSize[0x0C10])
	 */
	class UFGWheeledVehicleAnimationInstance : public UVehicleAnimationInstance
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWheeledVehicleAnimInstance
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGWheeledVehicleAnimInstance : public UObject
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWheeledVehicleHologram
	 * Size -> 0x0000 (FullSize[0x04E0] - InheritedSize[0x04E0])
	 */
	class AFGWheeledVehicleHologram : public AFGVehicleHologram
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWheeledVehicleInfo
	 * Size -> 0x0140 (FullSize[0x04C0] - InheritedSize[0x0380])
	 */
	class AFGWheeledVehicleInfo : public ASkeletalMeshActor
	{
	public:
		unsigned char                                              UnknownData_Z1IA[0x8];                                   // 0x0380(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             VehicleStatusChangedDelegate;                            // 0x0388(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class AFGWheeledVehicle*                                   mVehicle;                                                // 0x0398(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_SUTZ[0x8];                                   // 0x03A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGWheeledVehicle*                                   mReplicatedVehicle;                                      // 0x03A8(0x0008) Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		EVehicleStatus                                             mStatus;                                                 // 0x03B0(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsFollowingPath;                                        // 0x03B1(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsPossessed;                                            // 0x03B2(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_XXSU[0x5];                                   // 0x03B3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGTargetPoint*                                      mTarget;                                                 // 0x03B8(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGSplinePathMovementComponent*                      mSimulationMovement;                                     // 0x03C0(0x0008) ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableDockingStation*                          mCurrentStation;                                         // 0x03C8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsSimulated;                                            // 0x03D0(0x0001) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_CLLO[0x7];                                   // 0x03D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mAuthoritativeLocation;                                  // 0x03D8(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FQuat                                               mAuthoritativeRotation;                                  // 0x03F0(0x0020) Net, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mAuthoritativeLinearVel;                                 // 0x0410(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsGhosting;                                             // 0x0428(0x0001) Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_U75W[0x7];                                   // 0x0429(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mCurrentFuelClass;                                       // 0x0430(0x0008) Net, ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UTexture2D*                                          mActorRepresentationTexture;                             // 0x0438(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class FText                                                mMapText;                                                // 0x0440(0x0018) Net, NativeAccessSpecifierPrivate
		struct FLinearColor                                        mDefaultRepresentationColor;                             // 0x0458(0x0010) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FLinearColor                                        mPlayerNametagColor;                                     // 0x0468(0x0010) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mBoundingBoxExtent;                                      // 0x0478(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector                                             mBoundingBoxOffset;                                      // 0x0490(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mWheelRadius;                                            // 0x04A8(0x0004) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_EVP9[0x4];                                   // 0x04AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class UStaticMeshComponent*>                        mStaticMeshComponents;                                   // 0x04B0(0x0010) ExportObject, Net, ZeroConstructor, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate

	public:
		bool UpdateRepresentation();
		void StatusChanged__DelegateSignature(EVehicleStatus Status);
		void SetActorRepresentationText(const class FText& newText);
		void SetActorRepresentationColor(const struct FLinearColor& NewColor);
		void SetActorCompassViewDistance(ECompassViewDistance compassViewDistance);
		bool RemoveAsRepresentation();
		void OnRep_Status();
		void OnRep_StaticMeshComponents();
		void OnRep_ReplicatedVehicle();
		void OnRep_IsGhosting();
		void OnRep_IsFollowingPath();
		void IsFollowingPathChanged(bool IsFollowingPath);
		bool IsActorStatic();
		EVehicleStatus GetVehicleStatus();
		struct FRotator GetRealActorRotation();
		struct FVector GetRealActorLocation();
		bool GetActorShouldShowOnMap();
		bool GetActorShouldShowInCompass();
		ERepresentationType GetActorRepresentationType();
		class UTexture2D* GetActorRepresentationTexture();
		class FText GetActorRepresentationText();
		struct FLinearColor GetActorRepresentationColor();
		EFogOfWarRevealType GetActorFogOfWarRevealType();
		float GetActorFogOfWarRevealRadius();
		ECompassViewDistance GetActorCompassViewDistance();
		bool AddAsRepresentation();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWheeledVehicleMovementComponent
	 * Size -> 0x0258 (FullSize[0x0EA0] - InheritedSize[0x0C48])
	 */
	class UFGWheeledVehicleMovementComponent : public UChaosWheeledVehicleMovementComponent
	{
	public:
		class FScriptMulticastDelegate                             mOnVehicleLanded;                                        // 0x0C48(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnGearChangedImmediate;                                 // 0x0C58(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnGearChangeBegin;                                      // 0x0C68(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		class FScriptMulticastDelegate                             mOnGearChangeEnd;                                        // 0x0C78(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
		float                                                      mHandbrakeSideSlipMultiplier;                            // 0x0C88(0x0004) Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_F79C[0x4];                                   // 0x0C8C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FSurfaceForceMultiplierOverride>             mSurfaceWheelForceMultiplierOverrides;                   // 0x0C90(0x0010) Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UPhysicalMaterial*                                   mPrimarySurfaceMaterial;                                 // 0x0CA0(0x0008) BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDistanceBetweenDecals;                                  // 0x0CA8(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mDecalsLifespan;                                         // 0x0CAC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UMaterial*                                           mDefaultTireTrackDecal;                                  // 0x0CB0(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FTireTrackDecalDetails>                      mTireTrackDecals;                                        // 0x0CB8(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		struct FVector                                             mDecalSize;                                              // 0x0CC8(0x0018) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		TArray<struct FSurfaceParticlePair>                        mVehicleParticleMap;                                     // 0x0CE0(0x0010) Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		class FName                                                mSpeedRTPCName;                                          // 0x0CF0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mSkidRTPCName;                                           // 0x0CF8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTireSoundMaxAtSpeed;                                    // 0x0D00(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTireSkidSoundMaxAtSpeed;                                // 0x0D04(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mTires3PAttenuationScalingFactor;                        // 0x0D08(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_IKRR[0x4];                                   // 0x0D0C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWheelSoundSurfacePair>                      mVehicleSoundMap;                                        // 0x0D10(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected
		TMap<int32_t, class UAkComponent*>                         mVehicleWheelAudioComponents;                            // 0x0D20(0x0050) BlueprintVisible, ExportObject, BlueprintReadOnly, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected
		TArray<struct FParticleTemplatePair>                       mActiveParticleAndTemplate;                              // 0x0D70(0x0010) ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected
		TArray<struct FVector>                                     mLastDecalLocations;                                     // 0x0D80(0x0010) ZeroConstructor, Protected, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mCrashSoundEvent;                                        // 0x0D90(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mCrashRTPCName;                                          // 0x0D98(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mCrashMaxSpeed;                                          // 0x0DA0(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_DW77[0x4];                                   // 0x0DA4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UAkAudioEvent*                                       mEngineAudioPlayEvent;                                   // 0x0DA8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mEngineAudioStopEvent;                                   // 0x0DB0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mEngineStartSoundEvent;                                  // 0x0DB8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mEngineShutdownSoundEvent;                               // 0x0DC0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mEngineAudioSocket;                                      // 0x0DC8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mEngineRpmRTPC;                                          // 0x0DD0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FName                                                mEngineLoadRTPC;                                         // 0x0DD8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkComponent*                                        mEngineAudioComponent;                                   // 0x0DE0(0x0008) BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mTransmissionAudioEventGearChangeBegin;                  // 0x0DE8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mTransmissionAudioEventGearChangeEnd;                    // 0x0DF0(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mTransmissionAudioEventGearChangedImmediate;             // 0x0DF8(0x0008) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FInt32Range                                         mIdleBounceRange;                                        // 0x0E00(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mIdleRevRateBounceFactor;                                // 0x0E10(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		struct FInt32Range                                         mRevLimiterBounceRange;                                  // 0x0E14(0x0010) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mRevLimiterRevRateBounceFactor;                          // 0x0E24(0x0004) Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_AFK3[0x78];                                  // 0x0E28(0x0078) MISSED OFFSET (PADDING)

	public:
		void SetHasDriver(bool hasDriver, bool isLocalDriver);
		void OnGearChangeEnd(int32_t NewGear);
		void OnGearChangedImmediate(int32_t NewGear);
		void OnGearChangeBegin(int32_t NewGear);
		bool IsInAir();
		float GetVehicleMass();
		class UParticleSystem* GetSurfaceParticleSystem(class UPhysicalMaterial* PhysMat);
		class UPhysicalMaterial* GetPrimarySurfaceMaterial();
		float GetModifiedThrottleInput();
		float GetModifiedSteeringInput();
		float GetModifiedBrakeInput();
		float GetLargestTireLoadValue();
		float GetLargestSlipMagnitude();
		float GetLargestSkidMagnitude();
		class UAkComponent* GetEngineAudioComponent();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWidgetMultiplayer
	 * Size -> 0x0020 (FullSize[0x02A0] - InheritedSize[0x0280])
	 */
	class UFGWidgetMultiplayer : public UUserWidget
	{
	public:
		bool                                                       mIsOnline;                                               // 0x0280(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       mIsPlayingSatisfactory;                                  // 0x0281(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_4VBJ[0x6];                                   // 0x0282(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FString                                              mTitle;                                                  // 0x0288(0x0010) BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		EMultiplayerButtonType                                     mMultiplayerButtonType;                                  // 0x0298(0x0001) BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_ZJCM[0x7];                                   // 0x0299(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWidgetSwitcherInterface
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UFGWidgetSwitcherInterface : public UInterface
	{
	public:
		bool OverrideSwitching(class UFGButtonWidget* buttonWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWidgetSwitcher
	 * Size -> 0x0058 (FullSize[0x01D8] - InheritedSize[0x0180])
	 */
	class UFGWidgetSwitcher : public UWidgetSwitcher
	{
	public:
		float                                                      mFadeOutTime;                                            // 0x0180(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_3RV2[0x4];                                   // 0x0184(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class FScriptMulticastDelegate                             mOnWidgetSet;                                            // 0x0188(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		class FScriptMulticastDelegate                             mOnFadoutDone;                                           // 0x0198(0x0010) ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_ABJU[0x18];                                  // 0x01A8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UWidget*                                             mPendingNewWidget;                                       // 0x01C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGMenuBase*                                         mEnteringWidget;                                         // 0x01C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UFGMenuBase*                                         mExitingWidget;                                          // 0x01D0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

	public:
		void FadeOut();
		void ExitAnimationTookToLong();
		void EnterAnimationTookToLong();
		bool CanSwitchWidget(class UFGButtonWidget* buttonWidget);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWildCardDescriptor
	 * Size -> 0x0000 (FullSize[0x01A0] - InheritedSize[0x01A0])
	 */
	class UFGWildCardDescriptor : public UFGItemDescriptor
	{
	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWindow
	 * Size -> 0x0000 (FullSize[0x0280] - InheritedSize[0x0280])
	 */
	class UFGWindow : public UUserWidget
	{
	public:
		class UUserWidget* GetCloseButton();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWireHologram
	 * Size -> 0x0098 (FullSize[0x0720] - InheritedSize[0x0688])
	 */
	class AFGWireHologram : public AFGBuildableHologram
	{
	public:
		unsigned char                                              UnknownData_WE29[0x8];                                   // 0x0688(0x0008) Fix Super Size
		unsigned char                                              UnknownData_YYZS[0x8];                                   // 0x0690(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGCircuitConnectionComponent*                       mConnections[0x2];                                       // 0x0698(0x0010) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGPowerPoleHologram*                                mPowerPole;                                              // 0x06A8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGPowerPoleWallHologram*                            mPowerPoleWall;                                          // 0x06B0(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGBuildableHologram*                                mActivePoleHologram;                                     // 0x06B8(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UFGCircuitConnectionComponent*                       mActiveSnapConnection;                                   // 0x06C0(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mDefaultPowerPoleRecipe;                                 // 0x06C8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mCircuitType;                                            // 0x06D0(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class UClass*                                              mDefaultPowerPoleWallRecipe;                             // 0x06D8(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_RN92[0x8];                                   // 0x06E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector                                             mStartLocation;                                          // 0x06E8(0x0018) Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mCurrentConnection;                                      // 0x0700(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8214[0x4];                                   // 0x0704(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<struct FWireInstance>                               mWireInstances;                                          // 0x0708(0x0010) ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
		class AFGBuildableWire*                                    mUpgradeTarget;                                          // 0x0718(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void OnAutomaticPoleDisableToggle(bool Disabled);
		bool IsPowerTowerWire();
		class AFGBuildableHologram* GetActiveAutomaticPoleHologram();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorkBench
	 * Size -> 0x0070 (FullSize[0x0310] - InheritedSize[0x02A0])
	 */
	class UFGWorkBench : public USceneComponent
	{
	public:
		unsigned char                                              UnknownData_U9VS[0x8];                                   // 0x02A0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UClass*                                              mCurrentRecipe;                                          // 0x02A8(0x0008) ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mCurrentManufacturingProgress;                           // 0x02B0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		float                                                      mManufacturingSpeed;                                     // 0x02B4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class AFGCharacterPlayer*                                  mPlayerWorkingAtBench;                                   // 0x02B8(0x0008) Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mRecipeRate;                                             // 0x02C0(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		bool                                                       mIsProducing;                                            // 0x02C4(0x0001) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_UGES[0x3];                                   // 0x02C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGInventoryComponent*                               mInventory;                                              // 0x02C8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_IS2L[0x4];                                   // 0x02D0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mFatigueMultiplier;                                      // 0x02D4(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_POOA[0x4];                                   // 0x02D8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mFatigueDecreaseSpeedMultiplier;                         // 0x02DC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mHoldProduceTime;                                        // 0x02E0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_F85O[0x4];                                   // 0x02E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class UFGManufacturingButton*                              mManufacturingButton;                                    // 0x02E8(0x0008) ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		int32_t                                                    mFatigueUpdaterInterval;                                 // 0x02F0(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_M9G9[0x4];                                   // 0x02F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		float                                                      mRecipeDuration;                                         // 0x02F8(0x0004) ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mCooldownDelay;                                          // 0x02FC(0x0004) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_6HC9[0x4];                                   // 0x0300(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		bool                                                       mIsFatigueEnabled;                                       // 0x0304(0x0001) Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_3LAF[0xB];                                   // 0x0305(0x000B) MISSED OFFSET (PADDING)

	public:
		void SetWorkBenchUser(class AFGCharacterPlayer* newUser);
		void SetupManufacturingButton(class UFGManufacturingButton* inButton);
		void SetRecipe(class UClass* recipe);
		void SetInventory(class UFGInventoryComponent* newInventory);
		void RemoveIngredientsAndAwardRewards(class UFGInventoryComponent* inventory, class UClass* recipe);
		void Produce(float dt);
		bool IsProducing();
		class AFGCharacterPlayer* GetWorkBenchUser();
		class AFGCharacterPlayer* GetPlayerWorkingAtBench();
		float GetManufacturingSpeed();
		float GetManufacturingProgress();
		class UFGInventoryComponent* GetInventory();
		class UClass* GetCurrentRecipe();
		float GetCurrentFatigue();
		float GetCurrentDuration();
		float GetActiveManufacturingTime();
		void CraftComplete();
		bool CanProduce(class UClass* recipe, class UFGInventoryComponent* inventory);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorldGridGeneratorActor
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGWorldGridGeneratorActor : public AActor
	{
	public:
		unsigned char                                              UnknownData_XI17[0x8];                                   // 0x02F8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorldGridDataAsset
	 * Size -> 0x0038 (FullSize[0x0068] - InheritedSize[0x0030])
	 */
	class UFGWorldGridDataAsset : public UDataAsset
	{
	public:
		int32_t                                                    mGridDivisions;                                          // 0x0030(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_8F55[0x4];                                   // 0x0034(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FVector2D                                           mWorldGridMin;                                           // 0x0038(0x0010) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		struct FVector2D                                           mWorldGridMax;                                           // 0x0048(0x0010) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FFGWorldGridCellData>                        mWorldCells;                                             // 0x0058(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate

	public:
		void DebugDraw();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorldGridSubsystem
	 * Size -> 0x0038 (FullSize[0x0330] - InheritedSize[0x02F8])
	 */
	class AFGWorldGridSubsystem : public AFGSubsystem
	{
	public:
		unsigned char                                              UnknownData_HZ7T[0x8];                                   // 0x02F8(0x0008) Fix Super Size
		class UFGWorldGridDataAsset*                               mDefaultWorldGridData;                                   // 0x0300(0x0008) Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		TArray<struct FFGWorldGridCell>                            mWorldGrid;                                              // 0x0308(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_10KL[0x18];                                  // 0x0318(0x0018) MISSED OFFSET (PADDING)

	public:
		class AFGWorldGridSubsystem* STATIC_Get(class UObject* WorldContext);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorldGridSettings
	 * Size -> 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
	 */
	class UFGWorldGridSettings : public UDeveloperSettings
	{
	public:
		int32_t                                                    mWorldGridDivisions;                                     // 0x0038(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		float                                                      mElevationStepSize;                                      // 0x003C(0x0004) Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorldHeightData
	 * Size -> 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
	 */
	class UFGWorldHeightData : public UDataAsset
	{
	public:
		TArray<float>                                              mHeightData;                                             // 0x0030(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic
		int32_t                                                    mHeightDataResolution;                                   // 0x0040(0x0004) Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_JXJI[0x4];                                   // 0x0044(0x0004) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorldPartitionContentBundle
	 * Size -> 0x0040 (FullSize[0x0070] - InheritedSize[0x0030])
	 */
	class UFGWorldPartitionContentBundle : public UDataAsset
	{
	public:
		class UContentBundleDescriptor*                            mContentBundleDescriptor;                                // 0x0030(0x0008) Edit, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		EIncludeInBuilds                                           mBuildAvailability;                                      // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		bool                                                       mEnabledInRuntime;                                       // 0x0039(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_8WIQ[0x36];                                  // 0x003A(0x0036) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorldPartitionContentBundleSubsystem
	 * Size -> 0x0050 (FullSize[0x0080] - InheritedSize[0x0030])
	 */
	class UFGWorldPartitionContentBundleSubsystem : public UEngineSubsystem
	{
	public:
		unsigned char                                              mActiveContentBundles[0x50];                             // 0x0030(0x0050) UNKNOWN PROPERTY: MapProperty

	public:
		void SetContentBundleEnabled(class UFGWorldPartitionContentBundle* bundle, bool Enabled);
		bool IsContentBundleEnabled(class UFGWorldPartitionContentBundle* bundle);
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorldPartitionRuntimeSpatialHash
	 * Size -> 0x0058 (FullSize[0x0108] - InheritedSize[0x00B0])
	 */
	class UFGWorldPartitionRuntimeSpatialHash : public UWorldPartitionRuntimeSpatialHash
	{
	public:
		TMap<class FName, class UWorldPartitionRuntimeCell*>       mNameToCellMap;                                          // 0x00B0(0x0050) Transient, NativeAccessSpecifierPrivate
		unsigned char                                              UnknownData_FXZ6[0x8];                                   // 0x0100(0x0008) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorldScannableData
	 * Size -> 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
	 */
	class UFGWorldScannableData : public UDataAsset
	{
	public:
		TArray<struct FWorldScannableData>                         mItemPickups;                                            // 0x0030(0x0010) Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorldScannableDataGenerator
	 * Size -> 0x0008 (FullSize[0x0300] - InheritedSize[0x02F8])
	 */
	class AFGWorldScannableDataGenerator : public AActor
	{
	public:
		unsigned char                                              UnknownData_738W[0x8];                                   // 0x02F8(0x0008) Fix Super Size

	public:
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGWorldSettings
	 * Size -> 0x0210 (FullSize[0x0730] - InheritedSize[0x0520])
	 */
	class AFGWorldSettings : public AWorldSettings
	{
	public:
		unsigned char                                              UnknownData_6CYZ[0x8];                                   // 0x0520(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		TArray<class AFGAtmosphereVolume*>                         mFogVolumes;                                             // 0x0528(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class AFGAmbientVolume*>                            mAmbientVolumes;                                         // 0x0538(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		TArray<class AFGWaterVolume*>                              mWaterVolumes;                                           // 0x0548(0x0010) ZeroConstructor, Transient, NativeAccessSpecifierPublic
		struct FExponentialFogSettings                             mDefaultHeightFogSettings;                               // 0x0558(0x0058) Edit, DisableEditOnTemplate, NoDestructor, NativeAccessSpecifierPublic
		struct FWorldPartitionValidationData                       SaveGameValidationData;                                  // 0x05B0(0x0050) Edit, EditConst, NativeAccessSpecifierPublic
		TMap<class FString, struct FWPCellIdentifier>              WPActorCellMapping;                                      // 0x0600(0x0050) Edit, EditConst, NativeAccessSpecifierPublic
		unsigned char                                              mExponentialHeightFog[0x30];                             // 0x0650(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mSkyAtmosphere[0x30];                                    // 0x0680(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		unsigned char                                              mSkySphere[0x30];                                        // 0x06B0(0x0030) UNKNOWN PROPERTY: SoftObjectProperty
		class AFGMinimapCaptureActor*                              mMinimapCaptureActor;                                    // 0x06E0(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class UAkAudioEvent*                                       mLevelStartedEvent;                                      // 0x06E8(0x0008) Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		class FString                                              mDefaultLoadSave;                                        // 0x06F0(0x0010) Edit, ZeroConstructor, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		float                                                      mStartTimeOfDay;                                         // 0x0700(0x0004) Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
		unsigned char                                              UnknownData_HJCW[0x4];                                   // 0x0704(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		class AFGBuildableSubsystem*                               mBuildableSubsystem;                                     // 0x0708(0x0008) ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGAudioVolumeSubsystem*                             mAudioVolumeSubsystem;                                   // 0x0710(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGFoliageRemovalSubsystem*                          mFoliageRemovalSubsystem;                                // 0x0718(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGConveyorItemSubsystem*                            mConveyorItemSubsystem;                                  // 0x0720(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
		class AFGPhotoModeManager*                                 mPhotoModeManager;                                       // 0x0728(0x0008) ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate

	public:
		void UpdateWorldBounds();
		class UAkAudioEvent* GetLevelStartedAkEvent();
		static UClass* StaticClass();
	};

	/**
	 * Class FactoryGame.FGBiome
	 * Size -> 0xA240 (FullSize[0xA268] - InheritedSize[0x0028])
	 */
	class UFGBiome : public UObject
	{
	public:
		class UFGBiome*                                            BaseBiome;                                               // 0x0028(0x0008) Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		class FName                                                DebugName;                                               // 0x0030(0x0008) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              WeatherStatesMask;                                       // 0x0038(0x0001) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_NQN7[0x7];                                   // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCyclicRuntimeFloatCurve                            FogHeight;                                               // 0x0040(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  FogHeight2;                                              // 0x00C8(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            FogDensity;                                              // 0x0150(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  FogDensity2;                                             // 0x01D8(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            FogInscatteringColor;                                    // 0x0260(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            FogInscatteringLuminance;                                // 0x0468(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            FogInscatteringLuminance2;                               // 0x0670(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            FullyDirectionalInscatteringColorDistance;               // 0x0878(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  FullyDirectionalInscatteringColorDistance2;              // 0x0900(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, AdvancedDisplay, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            NonDirectionalInscatteringColorDistance;                 // 0x0988(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  NonDirectionalInscatteringColorDistance2;                // 0x0A10(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, AdvancedDisplay, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            DirectionalInscatteringExponent;                         // 0x0A98(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  DirectionalInscatteringExponent2;                        // 0x0B20(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, AdvancedDisplay, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            DirectionalInscatteringStartDistance;                    // 0x0BA8(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  DirectionalInscatteringStartDistance2;                   // 0x0C30(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, AdvancedDisplay, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            DirectionalInscatteringColor;                            // 0x0CB8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            DirectionalInscatteringLuminance;                        // 0x0EC0(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            DirectionalInscatteringLuminance2;                       // 0x10C8(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            FogHeightFalloff;                                        // 0x12D0(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  FogHeightFalloff2;                                       // 0x1358(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            FogMaxOpacity;                                           // 0x13E0(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  FogMaxOpacity2;                                          // 0x1468(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, AdvancedDisplay, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            StartDistance;                                           // 0x14F0(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  StartDistance2;                                          // 0x1578(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            FogCutoffDistance;                                       // 0x1600(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  FogCutoffDistance2;                                      // 0x1688(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            SecondFogDensity;                                        // 0x1710(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  SecondFogDensity2;                                       // 0x1798(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            SecondFogHeightFalloff;                                  // 0x1820(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  SecondFogHeightFalloff2;                                 // 0x18A8(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            SecondFogHeightOffset;                                   // 0x1930(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  SecondFogHeightOffset2;                                  // 0x19B8(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            CloudColor;                                              // 0x1A40(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            CloudColor2;                                             // 0x1C48(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            SunLightColor;                                           // 0x1E50(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            SunLightColor2;                                          // 0x2058(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            MoonLightColor;                                          // 0x2260(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            MoonLightColor2;                                         // 0x2468(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            SunIntensity;                                            // 0x2670(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  SunIntensity2;                                           // 0x26F8(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            MoonIntensity;                                           // 0x2780(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  MoonIntensity2;                                          // 0x2808(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            CloudOpacity;                                            // 0x2890(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  CloudOpacity2;                                           // 0x2918(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		float                                                      mBlendWeight;                                            // 0x29A0(0x0004) Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_00A3[0x4];                                   // 0x29A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
		struct FCyclicRuntimeFloatCurve                            WhiteTemp;                                               // 0x29A8(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  WhiteTemp2;                                              // 0x2A30(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            WhiteTint;                                               // 0x2AB8(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  WhiteTint2;                                              // 0x2B40(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorSaturation;                                         // 0x2BC8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorSaturation2;                                        // 0x2DD0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorContrast;                                           // 0x2FD8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorContrast2;                                          // 0x31E0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorGamma;                                              // 0x33E8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorGamma2;                                             // 0x35F0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorGain;                                               // 0x37F8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorGain2;                                              // 0x3A00(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorOffset;                                             // 0x3C08(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorOffset2;                                            // 0x3E10(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorSaturationShadows;                                  // 0x4018(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorSaturationShadows2;                                 // 0x4220(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorContrastShadows;                                    // 0x4428(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorContrastShadows2;                                   // 0x4630(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorGammaShadows;                                       // 0x4838(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorGammaShadows2;                                      // 0x4A40(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorGainShadows;                                        // 0x4C48(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorGainShadows2;                                       // 0x4E50(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorOffsetShadows;                                      // 0x5058(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorOffsetShadows2;                                     // 0x5260(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorSaturationMidtones;                                 // 0x5468(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorSaturationMidtones2;                                // 0x5670(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorContrastMidtones;                                   // 0x5878(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorContrastMidtones2;                                  // 0x5A80(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorGammaMidtones;                                      // 0x5C88(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorGammaMidtones2;                                     // 0x5E90(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorGainMidtones;                                       // 0x6098(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorGainMidtones2;                                      // 0x62A0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorOffsetMidtones;                                     // 0x64A8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorOffsetMidtones2;                                    // 0x66B0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorSaturationHighlights;                               // 0x68B8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorSaturationHighlights2;                              // 0x6AC0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorContrastHighlights;                                 // 0x6CC8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorContrastHighlights2;                                // 0x6ED0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorGammaHighlights;                                    // 0x70D8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorGammaHighlights2;                                   // 0x72E0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorGainHighlights;                                     // 0x74E8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorGainHighlights2;                                    // 0x76F0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            ColorOffsetHighlights;                                   // 0x78F8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            ColorOffsetHighlights2;                                  // 0x7B00(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            ColorCorrectionHighlightsMin;                            // 0x7D08(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  ColorCorrectionHighlightsMin2;                           // 0x7D90(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            ColorCorrectionShadowsMax;                               // 0x7E18(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  ColorCorrectionShadowsMax2;                              // 0x7EA0(0x0088) Edit, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            BlueCorrection;                                          // 0x7F28(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  BlueCorrection2;                                         // 0x7FB0(0x0088) Edit, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            ExpandGamut;                                             // 0x8038(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  ExpandGamut2;                                            // 0x80C0(0x0088) Edit, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            SceneColorTint;                                          // 0x8148(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            SceneColorTint2;                                         // 0x8350(0x0208) Edit, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            FilmSlope;                                               // 0x8558(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  FilmSlope2;                                              // 0x85E0(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            FilmToe;                                                 // 0x8668(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  FilmToe2;                                                // 0x86F0(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            FilmShoulder;                                            // 0x8778(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  FilmShoulder2;                                           // 0x8800(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            FilmBlackClip;                                           // 0x8888(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  FilmBlackClip2;                                          // 0x8910(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            FilmWhiteClip;                                           // 0x8998(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  FilmWhiteClip2;                                          // 0x8A20(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            RayleighScattering;                                      // 0x8AA8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            RayleighScattering2;                                     // 0x8CB0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            RayleighScatteringScale;                                 // 0x8EB8(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  RayleighScatteringScale2;                                // 0x8F40(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            RayleighExponentialDistribution;                         // 0x8FC8(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  RayleighExponentialDistribution2;                        // 0x9050(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            MieScatteringScale;                                      // 0x90D8(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  MieScatteringScale2;                                     // 0x9160(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            MieScattering;                                           // 0x91E8(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            MieScattering2;                                          // 0x93F0(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            MieAbsorptionScale;                                      // 0x95F8(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  MieAbsorptionScale2;                                     // 0x9680(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            MieAbsorption;                                           // 0x9708(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            MieAbsorption2;                                          // 0x9910(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            MieAnisotropy;                                           // 0x9B18(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  MieAnisotropy2;                                          // 0x9BA0(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            MieExponentialDistribution;                              // 0x9C28(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  MieExponentialDistribution2;                             // 0x9CB0(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeFloatCurve                            OtherAbsorptionScale;                                    // 0x9D38(0x0088) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeFloatCurve                                  OtherAbsorptionScale2;                                   // 0x9DC0(0x0088) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		struct FCyclicRuntimeColorCurve                            OtherAbsorption;                                         // 0x9E48(0x0208) Deprecated, NativeAccessSpecifierPublic
		struct FRuntimeCurveLinearColor                            OtherAbsorption2;                                        // 0xA050(0x0208) Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
		bool                                                       OverrideFogDensity : 1;                                  // 0xA258(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideFogInscatteringLuminance : 1;                    // 0xA258(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideFullyDirectionalInscatteringColorDistance : 1;   // 0xA258(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideNonDirectionalInscatteringColorDistance : 1;     // 0xA258(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideDirectionalInscatteringExponent : 1;             // 0xA258(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideDirectionalInscatteringStartDistance : 1;        // 0xA258(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideDirectionalInscatteringLuminance : 1;            // 0xA258(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideFogHeightFalloff : 1;                            // 0xA258(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideFogMaxOpacity : 1;                               // 0xA259(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideStartDistance : 1;                               // 0xA259(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideFogCutoffDistance : 1;                           // 0xA259(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideFogHeight : 1;                                   // 0xA259(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideSecondFogDensity : 1;                            // 0xA259(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideSecondFogHeightFalloff : 1;                      // 0xA259(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideSecondFogHeightOffset : 1;                       // 0xA259(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideZenithColor : 1;                                 // 0xA259(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideCloudColor : 1;                                  // 0xA25A(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideSunLightColor : 1;                               // 0xA25A(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideMoonLightColor : 1;                              // 0xA25A(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideSunIntensity : 1;                                // 0xA25A(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideMoonIntensity : 1;                               // 0xA25A(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideCloudOpacity : 1;                                // 0xA25A(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideWhiteTemp : 1;                                   // 0xA25A(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideWhiteTint : 1;                                   // 0xA25A(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorSaturation : 1;                             // 0xA25B(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorContrast : 1;                               // 0xA25B(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorGamma : 1;                                  // 0xA25B(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorGain : 1;                                   // 0xA25B(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorOffset : 1;                                 // 0xA25B(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorSaturationShadows : 1;                      // 0xA25B(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorContrastShadows : 1;                        // 0xA25B(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorGammaShadows : 1;                           // 0xA25B(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorGainShadows : 1;                            // 0xA25C(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorOffsetShadows : 1;                          // 0xA25C(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorSaturationMidtones : 1;                     // 0xA25C(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorContrastMidtones : 1;                       // 0xA25C(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorGammaMidtones : 1;                          // 0xA25C(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorGainMidtones : 1;                           // 0xA25C(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorOffsetMidtones : 1;                         // 0xA25C(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorSaturationHighlights : 1;                   // 0xA25C(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorContrastHighlights : 1;                     // 0xA25D(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorGammaHighlights : 1;                        // 0xA25D(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorGainHighlights : 1;                         // 0xA25D(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorOffsetHighlights : 1;                       // 0xA25D(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorCorrectionHighlightsMin : 1;                // 0xA25D(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideColorCorrectionShadowsMax : 1;                   // 0xA25D(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideBlueCorrection : 1;                              // 0xA25D(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideExpandGamut : 1;                                 // 0xA25D(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideSceneColorTint : 1;                              // 0xA25E(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideFilmSlope : 1;                                   // 0xA25E(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideFilmToe : 1;                                     // 0xA25E(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideFilmShoulder : 1;                                // 0xA25E(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideFilmBlackClip : 1;                               // 0xA25E(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideFilmWhiteClip : 1;                               // 0xA25E(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideRayleighScattering : 1;                          // 0xA25E(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideRayleighScatteringScale : 1;                     // 0xA25E(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideRayleighExponentialDistribution : 1;             // 0xA25F(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideMieScatteringScale : 1;                          // 0xA25F(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideMieScattering : 1;                               // 0xA25F(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideMieAbsorptionScale : 1;                          // 0xA25F(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideMieAbsorption : 1;                               // 0xA25F(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideMieAnisotropy : 1;                               // 0xA25F(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideMieExponentialDistribution : 1;                  // 0xA25F(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideOtherAbsorptionScale : 1;                        // 0xA25F(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		bool                                                       OverrideOtherAbsorption : 1;                             // 0xA260(0x0001) BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
		unsigned char                                              UnknownData_TQW0[0x7];                                   // 0xA261(0x0007) MISSED OFFSET (PADDING)

	public:
		static UClass* StaticClass();
	};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
